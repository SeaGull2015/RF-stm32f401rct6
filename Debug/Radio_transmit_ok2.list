
Radio_transmit_ok2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800622c  0800622c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006234  08006234  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800623c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  200001fc  08006438  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  08006438  000216a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019070  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003747  00000000  00000000  0003929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001043a  00000000  00000000  0003c9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0004ce20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f50  00000000  00000000  0004ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b4a  00000000  00000000  0004ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001993a  00000000  00000000  00068892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ca36  00000000  00000000  000821cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ec02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031d8  00000000  00000000  0010ec54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006040 	.word	0x08006040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08006040 	.word	0x08006040

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	2400      	movs	r4, #0
 800058a:	9405      	str	r4, [sp, #20]
 800058c:	9406      	str	r4, [sp, #24]
 800058e:	9407      	str	r4, [sp, #28]
 8000590:	9408      	str	r4, [sp, #32]
 8000592:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000594:	9401      	str	r4, [sp, #4]
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_GPIO_Init+0x90>)
 8000598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800059a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
 80005a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	9402      	str	r4, [sp, #8]
 80005ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ae:	f042 0201 	orr.w	r2, r2, #1
 80005b2:	631a      	str	r2, [r3, #48]	; 0x30
 80005b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b6:	f002 0201 	and.w	r2, r2, #1
 80005ba:	9202      	str	r2, [sp, #8]
 80005bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	9403      	str	r4, [sp, #12]
 80005c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c2:	f042 0204 	orr.w	r2, r2, #4
 80005c6:	631a      	str	r2, [r3, #48]	; 0x30
 80005c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ca:	f002 0204 	and.w	r2, r2, #4
 80005ce:	9203      	str	r2, [sp, #12]
 80005d0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	9404      	str	r4, [sp, #16]
 80005d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005d6:	f042 0202 	orr.w	r2, r2, #2
 80005da:	631a      	str	r2, [r3, #48]	; 0x30
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	9304      	str	r3, [sp, #16]
 80005e4:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET);
 80005e6:	4d0c      	ldr	r5, [pc, #48]	; (8000618 <MX_GPIO_Init+0x94>)
 80005e8:	4622      	mov	r2, r4
 80005ea:	2110      	movs	r1, #16
 80005ec:	4628      	mov	r0, r5
 80005ee:	f000 fe27 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2120      	movs	r1, #32
 80005f6:	4628      	mov	r0, r5
 80005f8:	f000 fe22 	bl	8001240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LATCH_Pin nOE_Pin */
  GPIO_InitStruct.Pin = LATCH_Pin|nOE_Pin;
 80005fc:	2330      	movs	r3, #48	; 0x30
 80005fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000608:	a905      	add	r1, sp, #20
 800060a:	4628      	mov	r0, r5
 800060c:	f000 fd38 	bl	8001080 <HAL_GPIO_Init>

}
 8000610:	b00b      	add	sp, #44	; 0x2c
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40020800 	.word	0x40020800

0800061c <RF_ShiftRegs>:
void RF_ShiftRegs(){
 800061c:	b510      	push	{r4, lr}
 800061e:	b084      	sub	sp, #16
			HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 1); //shiftreg 2 HiZ
 8000620:	4c10      	ldr	r4, [pc, #64]	; (8000664 <RF_ShiftRegs+0x48>)
 8000622:	2201      	movs	r2, #1
 8000624:	2120      	movs	r1, #32
 8000626:	4620      	mov	r0, r4
 8000628:	f000 fe0a 	bl	8001240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 0);  //отключаем защёлку
 800062c:	2200      	movs	r2, #0
 800062e:	2110      	movs	r1, #16
 8000630:	4620      	mov	r0, r4
 8000632:	f000 fe05 	bl	8001240 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi2, &regD, &buf, 1, 5000);  //отправляем данные для сдвигового регистра со светодиодами
 8000636:	f241 3388 	movw	r3, #5000	; 0x1388
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	f10d 020f 	add.w	r2, sp, #15
 8000642:	4909      	ldr	r1, [pc, #36]	; (8000668 <RF_ShiftRegs+0x4c>)
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <RF_ShiftRegs+0x50>)
 8000646:	f002 f968 	bl	800291a <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(RF_SRL_GPIO_Port, RF_SRL_Pin, 1);  //включаем защёлку
 800064a:	2201      	movs	r2, #1
 800064c:	2110      	movs	r1, #16
 800064e:	4620      	mov	r0, r4
 8000650:	f000 fdf6 	bl	8001240 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RF_SRE_GPIO_Port, RF_SRE_Pin, 0);  //shitfreg вывести из HiZ
 8000654:	2200      	movs	r2, #0
 8000656:	2120      	movs	r1, #32
 8000658:	4620      	mov	r0, r4
 800065a:	f000 fdf1 	bl	8001240 <HAL_GPIO_WritePin>
}
 800065e:	b004      	add	sp, #16
 8000660:	bd10      	pop	{r4, pc}
 8000662:	bf00      	nop
 8000664:	40020800 	.word	0x40020800
 8000668:	2000009d 	.word	0x2000009d
 800066c:	20000218 	.word	0x20000218

08000670 <NRF_cs>:
void NRF_cs(uint8_t flag){
 8000670:	b508      	push	{r3, lr}
		if(flag==0)
 8000672:	b938      	cbnz	r0, 8000684 <NRF_cs+0x14>
			regD &=~(1<<1);
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <NRF_cs+0x20>)
 8000676:	7813      	ldrb	r3, [r2, #0]
 8000678:	f023 0302 	bic.w	r3, r3, #2
 800067c:	7013      	strb	r3, [r2, #0]
		RF_ShiftRegs();
 800067e:	f7ff ffcd 	bl	800061c <RF_ShiftRegs>
}
 8000682:	bd08      	pop	{r3, pc}
			regD |= 1<<1;
 8000684:	4a02      	ldr	r2, [pc, #8]	; (8000690 <NRF_cs+0x20>)
 8000686:	7813      	ldrb	r3, [r2, #0]
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	7013      	strb	r3, [r2, #0]
 800068e:	e7f6      	b.n	800067e <NRF_cs+0xe>
 8000690:	2000009d 	.word	0x2000009d

08000694 <NRF_ce>:
void NRF_ce(uint8_t flag){
 8000694:	b508      	push	{r3, lr}
		if(flag==0)
 8000696:	b938      	cbnz	r0, 80006a8 <NRF_ce+0x14>
			regD &=~(1<<0);
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <NRF_ce+0x20>)
 800069a:	7813      	ldrb	r3, [r2, #0]
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	7013      	strb	r3, [r2, #0]
		RF_ShiftRegs();
 80006a2:	f7ff ffbb 	bl	800061c <RF_ShiftRegs>
}
 80006a6:	bd08      	pop	{r3, pc}
			regD |= 1<<0;
 80006a8:	4a02      	ldr	r2, [pc, #8]	; (80006b4 <NRF_ce+0x20>)
 80006aa:	7813      	ldrb	r3, [r2, #0]
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	7013      	strb	r3, [r2, #0]
 80006b2:	e7f6      	b.n	80006a2 <NRF_ce+0xe>
 80006b4:	2000009d 	.word	0x2000009d

080006b8 <NRF_write_reg>:
void NRF_write_reg(uint8_t reg, uint8_t val){
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	b087      	sub	sp, #28
 80006bc:	f88d 000f 	strb.w	r0, [sp, #15]
 80006c0:	f88d 100e 	strb.w	r1, [sp, #14]
	NRF_cs(0);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ffd3 	bl	8000670 <NRF_cs>
	reg |= NRF_WRITE_MASK;
 80006ca:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(&hspi2, &reg, &buf, sizeof(reg), 10000);
 80006d6:	4c0d      	ldr	r4, [pc, #52]	; (800070c <NRF_write_reg+0x54>)
 80006d8:	f242 7510 	movw	r5, #10000	; 0x2710
 80006dc:	9500      	str	r5, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	f10d 0217 	add.w	r2, sp, #23
 80006e4:	f10d 010f 	add.w	r1, sp, #15
 80006e8:	4620      	mov	r0, r4
 80006ea:	f002 f916 	bl	800291a <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, &val, &buf, sizeof(val), 10000);
 80006ee:	9500      	str	r5, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	f10d 0217 	add.w	r2, sp, #23
 80006f6:	f10d 010e 	add.w	r1, sp, #14
 80006fa:	4620      	mov	r0, r4
 80006fc:	f002 f90d 	bl	800291a <HAL_SPI_TransmitReceive>
	NRF_cs(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff ffb5 	bl	8000670 <NRF_cs>
}
 8000706:	b007      	add	sp, #28
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop
 800070c:	20000218 	.word	0x20000218

08000710 <NRF_read_reg>:
uint8_t NRF_read_reg(uint8_t reg){
 8000710:	b500      	push	{lr}
 8000712:	b087      	sub	sp, #28
 8000714:	f88d 000f 	strb.w	r0, [sp, #15]
	NRF_cs(0);
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ffa9 	bl	8000670 <NRF_cs>
	HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 1, 10000);
 800071e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	f10d 0217 	add.w	r2, sp, #23
 800072a:	f10d 010f 	add.w	r1, sp, #15
 800072e:	480f      	ldr	r0, [pc, #60]	; (800076c <NRF_read_reg+0x5c>)
 8000730:	f002 f8f3 	bl	800291a <HAL_SPI_TransmitReceive>
	if(reg != NRF_REG_STATUS)
 8000734:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000738:	2b07      	cmp	r3, #7
 800073a:	d107      	bne.n	800074c <NRF_read_reg+0x3c>
	NRF_cs(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff97 	bl	8000670 <NRF_cs>
}
 8000742:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8000746:	b007      	add	sp, #28
 8000748:	f85d fb04 	ldr.w	pc, [sp], #4
			reg=NOP;
 800074c:	23ff      	movs	r3, #255	; 0xff
 800074e:	f88d 300f 	strb.w	r3, [sp, #15]
			HAL_SPI_TransmitReceive(&hspi2, &reg, &rx_data, 1, 500);
 8000752:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f10d 0217 	add.w	r2, sp, #23
 800075e:	f10d 010f 	add.w	r1, sp, #15
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <NRF_read_reg+0x5c>)
 8000764:	f002 f8d9 	bl	800291a <HAL_SPI_TransmitReceive>
 8000768:	e7e8      	b.n	800073c <NRF_read_reg+0x2c>
 800076a:	bf00      	nop
 800076c:	20000218 	.word	0x20000218

08000770 <NRF_initialization>:
void NRF_initialization(){
 8000770:	b500      	push	{lr}
 8000772:	b085      	sub	sp, #20
HAL_Delay(150); //задержка включения
 8000774:	2096      	movs	r0, #150	; 0x96
 8000776:	f000 fc03 	bl	8000f80 <HAL_Delay>
uint8_t NRF_TX_ADDR[5] = {0x01,0x02,0x03,0x04,0x05}; // {0xff,0x00,0x00,0x00,0xff}; //address of transmitter
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <NRF_initialization+0x74>)
 800077c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000780:	9002      	str	r0, [sp, #8]
 8000782:	f88d 100c 	strb.w	r1, [sp, #12]
uint8_t NRF_RX_ADDR[5] = {0x01,0x02,0x03,0x04,0x05} /*= {0xff,0x00,0x00,0x00,0xff} = {0xD1,0xD2,0xD3,0xD4,0xD5}*/; // Адрес приёмника
 8000786:	9000      	str	r0, [sp, #0]
 8000788:	f88d 1004 	strb.w	r1, [sp, #4]
NRF_write_reg(NRF_REG_CONFIG, FANTOM_CONFIG); // go to Standby-I mode
 800078c:	210e      	movs	r1, #14
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ff92 	bl	80006b8 <NRF_write_reg>
HAL_Delay(200);
 8000794:	20c8      	movs	r0, #200	; 0xc8
 8000796:	f000 fbf3 	bl	8000f80 <HAL_Delay>
HAL_Delay(2);
 800079a:	2002      	movs	r0, #2
 800079c:	f000 fbf0 	bl	8000f80 <HAL_Delay>
NRF_write_reg(NRF_REG_EN_AA, 0x00);
 80007a0:	2100      	movs	r1, #0
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff ff88 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_EN_RXADDR, NRF_REG_EN_RXADDR_ERX_P0);
 80007a8:	2101      	movs	r1, #1
 80007aa:	2002      	movs	r0, #2
 80007ac:	f7ff ff84 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_RF_CH, 0x00);
 80007b0:	2100      	movs	r1, #0
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff ff80 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_SETUP_AW, NRF_REG_SETUP_AW_AW0 | NRF_REG_SETUP_AW_AW1);
 80007b8:	2103      	movs	r1, #3
 80007ba:	4608      	mov	r0, r1
 80007bc:	f7ff ff7c 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_RSETUP_AW, NRF_REG_RSETUP_AW_RF_RF_DR_LOW //скорость 250kbts
 80007c0:	2126      	movs	r1, #38	; 0x26
 80007c2:	2006      	movs	r0, #6
 80007c4:	f7ff ff78 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_RX_PW_P0, NRF_PACKET_SIZE);
 80007c8:	2120      	movs	r1, #32
 80007ca:	2011      	movs	r0, #17
 80007cc:	f7ff ff74 	bl	80006b8 <NRF_write_reg>
NRF_write_reg(NRF_REG_STATUS, NRF_REG_STATUS_TX_DS
 80007d0:	2170      	movs	r1, #112	; 0x70
 80007d2:	2007      	movs	r0, #7
 80007d4:	f7ff ff70 	bl	80006b8 <NRF_write_reg>
HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 fbd1 	bl	8000f80 <HAL_Delay>
}
 80007de:	b005      	add	sp, #20
 80007e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80007e4:	08006078 	.word	0x08006078

080007e8 <NRF_Transmit>:
void NRF_Transmit(uint8_t *data){
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	b083      	sub	sp, #12
 80007ec:	4605      	mov	r5, r0
	NRF_ce(0);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff ff50 	bl	8000694 <NRF_ce>
	HAL_Delay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 fbc3 	bl	8000f80 <HAL_Delay>
	NRF_cs(0);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff ff38 	bl	8000670 <NRF_cs>
	uint8_t tmp_com = NRF24_COMMAND_W_TX_PAYLOAD;
 8000800:	23a0      	movs	r3, #160	; 0xa0
 8000802:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit(&hspi2, &tmp_com, sizeof(tmp_com), 1);
 8000806:	2301      	movs	r3, #1
 8000808:	461a      	mov	r2, r3
 800080a:	f10d 0107 	add.w	r1, sp, #7
 800080e:	4817      	ldr	r0, [pc, #92]	; (800086c <NRF_Transmit+0x84>)
 8000810:	f001 ffa7 	bl	8002762 <HAL_SPI_Transmit>
	for(uint8_t i = 0; i < 32; i++){
 8000814:	2400      	movs	r4, #0
 8000816:	e007      	b.n	8000828 <NRF_Transmit+0x40>
		HAL_SPI_Transmit(&hspi2, &data[i], 1, 1);
 8000818:	2301      	movs	r3, #1
 800081a:	461a      	mov	r2, r3
 800081c:	1929      	adds	r1, r5, r4
 800081e:	4813      	ldr	r0, [pc, #76]	; (800086c <NRF_Transmit+0x84>)
 8000820:	f001 ff9f 	bl	8002762 <HAL_SPI_Transmit>
	for(uint8_t i = 0; i < 32; i++){
 8000824:	3401      	adds	r4, #1
 8000826:	b2e4      	uxtb	r4, r4
 8000828:	2c1f      	cmp	r4, #31
 800082a:	d9f5      	bls.n	8000818 <NRF_Transmit+0x30>
	HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fba7 	bl	8000f80 <HAL_Delay>
	NRF_cs(1);
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ff1c 	bl	8000670 <NRF_cs>
	NRF_ce(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff2b 	bl	8000694 <NRF_ce>
	HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fb9e 	bl	8000f80 <HAL_Delay>
	NRF_ce(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff25 	bl	8000694 <NRF_ce>
	uint8_t a = 0;
 800084a:	2400      	movs	r4, #0
	while(NRF_read_reg(NRF_REG_FIFO_STATUS) & NRF_REG_FIFO_STATUS_TX_EMPTY){
 800084c:	2017      	movs	r0, #23
 800084e:	f7ff ff5f 	bl	8000710 <NRF_read_reg>
 8000852:	f010 0f10 	tst.w	r0, #16
 8000856:	d006      	beq.n	8000866 <NRF_Transmit+0x7e>
		a++;
 8000858:	3401      	adds	r4, #1
 800085a:	b2e4      	uxtb	r4, r4
		HAL_Delay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f000 fb8f 	bl	8000f80 <HAL_Delay>
		if(a >= 100) break;
 8000862:	2c63      	cmp	r4, #99	; 0x63
 8000864:	d9f2      	bls.n	800084c <NRF_Transmit+0x64>
}
 8000866:	b003      	add	sp, #12
 8000868:	bd30      	pop	{r4, r5, pc}
 800086a:	bf00      	nop
 800086c:	20000218 	.word	0x20000218

08000870 <parseGNSS>:
int parseGNSS(uint8_t input[inputSize]){ // we want to find $GPGGA because it contains height, then parse it to spit out the longitude, latitude, height.
 8000870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000872:	b083      	sub	sp, #12
 8000874:	4605      	mov	r5, r0
	for (int i = 0; i < inputSize; i++){
 8000876:	2400      	movs	r4, #0
 8000878:	e028      	b.n	80008cc <parseGNSS+0x5c>
				currentProtocol[j-i] = input[j];
 800087a:	1b1a      	subs	r2, r3, r4
 800087c:	5ce9      	ldrb	r1, [r5, r3]
 800087e:	3208      	adds	r2, #8
 8000880:	446a      	add	r2, sp
 8000882:	f802 1c08 	strb.w	r1, [r2, #-8]
				temp_iter = j;
 8000886:	461e      	mov	r6, r3
 8000888:	17df      	asrs	r7, r3, #31
			for (int j = i; (j < (i + 6)) && (j < inputSize); j++){
 800088a:	3301      	adds	r3, #1
 800088c:	1d62      	adds	r2, r4, #5
 800088e:	429a      	cmp	r2, r3
 8000890:	db01      	blt.n	8000896 <parseGNSS+0x26>
 8000892:	2b9f      	cmp	r3, #159	; 0x9f
 8000894:	ddf1      	ble.n	800087a <parseGNSS+0xa>
			if (temp_iter >= inputSize) printf("\nmoved over the edge of the input, trying to find the $GPwhatever, j >= inputSize\r\n");
 8000896:	2ea0      	cmp	r6, #160	; 0xa0
 8000898:	f177 0300 	sbcs.w	r3, r7, #0
 800089c:	da02      	bge.n	80008a4 <parseGNSS+0x34>
			for (int j = 0; j < 6; j++){
 800089e:	2300      	movs	r3, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	e004      	b.n	80008ae <parseGNSS+0x3e>
			if (temp_iter >= inputSize) printf("\nmoved over the edge of the input, trying to find the $GPwhatever, j >= inputSize\r\n");
 80008a4:	487e      	ldr	r0, [pc, #504]	; (8000aa0 <parseGNSS+0x230>)
 80008a6:	f004 fc4d 	bl	8005144 <puts>
 80008aa:	e7f8      	b.n	800089e <parseGNSS+0x2e>
			for (int j = 0; j < 6; j++){
 80008ac:	3301      	adds	r3, #1
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	dc0a      	bgt.n	80008c8 <parseGNSS+0x58>
				if (currentProtocol[j] != "$GPGGA"[j]) identical = false;
 80008b2:	f103 0208 	add.w	r2, r3, #8
 80008b6:	446a      	add	r2, sp
 80008b8:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80008bc:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <parseGNSS+0x234>)
 80008be:	5cd2      	ldrb	r2, [r2, r3]
 80008c0:	4291      	cmp	r1, r2
 80008c2:	d0f3      	beq.n	80008ac <parseGNSS+0x3c>
 80008c4:	2000      	movs	r0, #0
 80008c6:	e7f1      	b.n	80008ac <parseGNSS+0x3c>
			if (identical) {
 80008c8:	b938      	cbnz	r0, 80008da <parseGNSS+0x6a>
	for (int i = 0; i < inputSize; i++){
 80008ca:	3401      	adds	r4, #1
 80008cc:	2c9f      	cmp	r4, #159	; 0x9f
 80008ce:	dc07      	bgt.n	80008e0 <parseGNSS+0x70>
		if (input[i] == '$'){
 80008d0:	5d2b      	ldrb	r3, [r5, r4]
 80008d2:	2b24      	cmp	r3, #36	; 0x24
 80008d4:	d1f9      	bne.n	80008ca <parseGNSS+0x5a>
			for (int j = i; (j < (i + 6)) && (j < inputSize); j++){
 80008d6:	4623      	mov	r3, r4
 80008d8:	e7d8      	b.n	800088c <parseGNSS+0x1c>
				start = i;
 80008da:	4623      	mov	r3, r4
 80008dc:	17e4      	asrs	r4, r4, #31
				break;
 80008de:	e001      	b.n	80008e4 <parseGNSS+0x74>
	int64_t start = INT_MAX - 1;
 80008e0:	4b71      	ldr	r3, [pc, #452]	; (8000aa8 <parseGNSS+0x238>)
 80008e2:	2400      	movs	r4, #0
	if (start == INT_MAX - 1){
 80008e4:	4a70      	ldr	r2, [pc, #448]	; (8000aa8 <parseGNSS+0x238>)
 80008e6:	2c00      	cmp	r4, #0
 80008e8:	bf08      	it	eq
 80008ea:	4293      	cmpeq	r3, r2
 80008ec:	d107      	bne.n	80008fe <parseGNSS+0x8e>
		printf("\nparsing failed, start == INT_MAX - 1\r\n");
 80008ee:	486f      	ldr	r0, [pc, #444]	; (8000aac <parseGNSS+0x23c>)
 80008f0:	f004 fc28 	bl	8005144 <puts>
		return 10;
 80008f4:	200a      	movs	r0, #10
 80008f6:	e0cc      	b.n	8000a92 <parseGNSS+0x222>
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip $GPGGA,
 80008f8:	3301      	adds	r3, #1
 80008fa:	f144 0400 	adc.w	r4, r4, #0
 80008fe:	5cea      	ldrb	r2, [r5, r3]
 8000900:	2a2c      	cmp	r2, #44	; 0x2c
 8000902:	d003      	beq.n	800090c <parseGNSS+0x9c>
 8000904:	2ba0      	cmp	r3, #160	; 0xa0
 8000906:	f174 0200 	sbcs.w	r2, r4, #0
 800090a:	dbf5      	blt.n	80008f8 <parseGNSS+0x88>
	pointer++;
 800090c:	3301      	adds	r3, #1
 800090e:	f144 0400 	adc.w	r4, r4, #0
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip time,
 8000912:	e002      	b.n	800091a <parseGNSS+0xaa>
 8000914:	3301      	adds	r3, #1
 8000916:	f144 0400 	adc.w	r4, r4, #0
 800091a:	5cea      	ldrb	r2, [r5, r3]
 800091c:	2a2c      	cmp	r2, #44	; 0x2c
 800091e:	d003      	beq.n	8000928 <parseGNSS+0xb8>
 8000920:	2ba0      	cmp	r3, #160	; 0xa0
 8000922:	f174 0200 	sbcs.w	r2, r4, #0
 8000926:	dbf5      	blt.n	8000914 <parseGNSS+0xa4>
	pointer++;
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	f144 0600 	adc.w	r6, r4, #0
	if (input[pointer] == ',') {} // latitude is missing
 800092e:	5ca8      	ldrb	r0, [r5, r2]
 8000930:	282c      	cmp	r0, #44	; 0x2c
 8000932:	d01f      	beq.n	8000974 <parseGNSS+0x104>
		parseResult[13] = input[pointer++]; // this is bad, because no && (pointer < inputSize), but ok
 8000934:	1c9a      	adds	r2, r3, #2
 8000936:	495e      	ldr	r1, [pc, #376]	; (8000ab0 <parseGNSS+0x240>)
 8000938:	7348      	strb	r0, [r1, #13]
		parseResult[14] = input[pointer++];
 800093a:	1cd8      	adds	r0, r3, #3
 800093c:	5caa      	ldrb	r2, [r5, r2]
 800093e:	738a      	strb	r2, [r1, #14]
		parseResult[16] = input[pointer++];
 8000940:	1d1a      	adds	r2, r3, #4
 8000942:	5c28      	ldrb	r0, [r5, r0]
 8000944:	7408      	strb	r0, [r1, #16]
		parseResult[17] = input[pointer++];
 8000946:	1d58      	adds	r0, r3, #5
 8000948:	5caa      	ldrb	r2, [r5, r2]
 800094a:	744a      	strb	r2, [r1, #17]
		parseResult[18] = input[pointer++];
 800094c:	1d9a      	adds	r2, r3, #6
 800094e:	5c28      	ldrb	r0, [r5, r0]
 8000950:	7488      	strb	r0, [r1, #18]
		parseResult[19] = input[pointer++];
 8000952:	1dd8      	adds	r0, r3, #7
 8000954:	5caa      	ldrb	r2, [r5, r2]
 8000956:	74ca      	strb	r2, [r1, #19]
		parseResult[20] = input[pointer++];
 8000958:	f113 0208 	adds.w	r2, r3, #8
 800095c:	5c28      	ldrb	r0, [r5, r0]
 800095e:	7508      	strb	r0, [r1, #20]
		parseResult[21] = input[pointer++];
 8000960:	f113 0009 	adds.w	r0, r3, #9
 8000964:	5caa      	ldrb	r2, [r5, r2]
 8000966:	754a      	strb	r2, [r1, #21]
		parseResult[22] = input[pointer++];
 8000968:	f113 020a 	adds.w	r2, r3, #10
 800096c:	f144 0600 	adc.w	r6, r4, #0
 8000970:	5c2b      	ldrb	r3, [r5, r0]
 8000972:	758b      	strb	r3, [r1, #22]
	pointer++;
 8000974:	1c53      	adds	r3, r2, #1
	if (input[pointer] != ',') { // make sure that north/south isn't missing
 8000976:	5ceb      	ldrb	r3, [r5, r3]
 8000978:	2b2c      	cmp	r3, #44	; 0x2c
 800097a:	d001      	beq.n	8000980 <parseGNSS+0x110>
		parseResult[23] = input[pointer];
 800097c:	494c      	ldr	r1, [pc, #304]	; (8000ab0 <parseGNSS+0x240>)
 800097e:	75cb      	strb	r3, [r1, #23]
	pointer += 2;
 8000980:	1cd1      	adds	r1, r2, #3
 8000982:	f146 0000 	adc.w	r0, r6, #0
	if (input[pointer] == ',') {} // longitude is missing
 8000986:	5c6c      	ldrb	r4, [r5, r1]
 8000988:	2c2c      	cmp	r4, #44	; 0x2c
 800098a:	d02f      	beq.n	80009ec <parseGNSS+0x17c>
		parseResult[39] = input[pointer++];
 800098c:	1d10      	adds	r0, r2, #4
 800098e:	4b48      	ldr	r3, [pc, #288]	; (8000ab0 <parseGNSS+0x240>)
 8000990:	f883 4027 	strb.w	r4, [r3, #39]	; 0x27
		parseResult[40] = input[pointer++];
 8000994:	1d51      	adds	r1, r2, #5
 8000996:	5c28      	ldrb	r0, [r5, r0]
 8000998:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
		parseResult[41] = input[pointer++];
 800099c:	1d90      	adds	r0, r2, #6
 800099e:	5c69      	ldrb	r1, [r5, r1]
 80009a0:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
		parseResult[43] = input[pointer++];
 80009a4:	1dd1      	adds	r1, r2, #7
 80009a6:	5c28      	ldrb	r0, [r5, r0]
 80009a8:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
		parseResult[44] = input[pointer++];
 80009ac:	f112 0008 	adds.w	r0, r2, #8
 80009b0:	5c69      	ldrb	r1, [r5, r1]
 80009b2:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
		parseResult[45] = input[pointer++];
 80009b6:	f112 0109 	adds.w	r1, r2, #9
 80009ba:	5c28      	ldrb	r0, [r5, r0]
 80009bc:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
		parseResult[46] = input[pointer++];
 80009c0:	f112 000a 	adds.w	r0, r2, #10
 80009c4:	5c69      	ldrb	r1, [r5, r1]
 80009c6:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
		parseResult[47] = input[pointer++];
 80009ca:	f112 010b 	adds.w	r1, r2, #11
 80009ce:	5c28      	ldrb	r0, [r5, r0]
 80009d0:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
		parseResult[48] = input[pointer++];
 80009d4:	f112 040c 	adds.w	r4, r2, #12
 80009d8:	5c69      	ldrb	r1, [r5, r1]
 80009da:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
		parseResult[49] = input[pointer++];
 80009de:	f112 010d 	adds.w	r1, r2, #13
 80009e2:	f146 0000 	adc.w	r0, r6, #0
 80009e6:	5d2a      	ldrb	r2, [r5, r4]
 80009e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	pointer++;
 80009ec:	1c4b      	adds	r3, r1, #1
 80009ee:	f140 0200 	adc.w	r2, r0, #0
	if (input[pointer] != ',') { // make sure that hemisphere isn't missing
 80009f2:	5cec      	ldrb	r4, [r5, r3]
 80009f4:	2c2c      	cmp	r4, #44	; 0x2c
 80009f6:	d005      	beq.n	8000a04 <parseGNSS+0x194>
		parseResult[50] = input[pointer++];
 80009f8:	1c8b      	adds	r3, r1, #2
 80009fa:	f140 0200 	adc.w	r2, r0, #0
 80009fe:	492c      	ldr	r1, [pc, #176]	; (8000ab0 <parseGNSS+0x240>)
 8000a00:	f881 4032 	strb.w	r4, [r1, #50]	; 0x32
	pointer++;
 8000a04:	3301      	adds	r3, #1
 8000a06:	f142 0200 	adc.w	r2, r2, #0
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip mode,
 8000a0a:	e002      	b.n	8000a12 <parseGNSS+0x1a2>
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f142 0200 	adc.w	r2, r2, #0
 8000a12:	5ce9      	ldrb	r1, [r5, r3]
 8000a14:	292c      	cmp	r1, #44	; 0x2c
 8000a16:	d003      	beq.n	8000a20 <parseGNSS+0x1b0>
 8000a18:	2ba0      	cmp	r3, #160	; 0xa0
 8000a1a:	f172 0100 	sbcs.w	r1, r2, #0
 8000a1e:	dbf5      	blt.n	8000a0c <parseGNSS+0x19c>
	pointer++;
 8000a20:	3301      	adds	r3, #1
 8000a22:	f142 0200 	adc.w	r2, r2, #0
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip number of used sattelites,
 8000a26:	5ce9      	ldrb	r1, [r5, r3]
 8000a28:	292c      	cmp	r1, #44	; 0x2c
 8000a2a:	d007      	beq.n	8000a3c <parseGNSS+0x1cc>
 8000a2c:	2ba0      	cmp	r3, #160	; 0xa0
 8000a2e:	f172 0100 	sbcs.w	r1, r2, #0
 8000a32:	da03      	bge.n	8000a3c <parseGNSS+0x1cc>
 8000a34:	3301      	adds	r3, #1
 8000a36:	f142 0200 	adc.w	r2, r2, #0
 8000a3a:	e7f4      	b.n	8000a26 <parseGNSS+0x1b6>
	pointer++;
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	f142 0200 	adc.w	r2, r2, #0
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip HDOP, whatever it is
 8000a42:	e002      	b.n	8000a4a <parseGNSS+0x1da>
 8000a44:	3301      	adds	r3, #1
 8000a46:	f142 0200 	adc.w	r2, r2, #0
 8000a4a:	5ce9      	ldrb	r1, [r5, r3]
 8000a4c:	292c      	cmp	r1, #44	; 0x2c
 8000a4e:	d003      	beq.n	8000a58 <parseGNSS+0x1e8>
 8000a50:	2ba0      	cmp	r3, #160	; 0xa0
 8000a52:	f172 0100 	sbcs.w	r1, r2, #0
 8000a56:	dbf5      	blt.n	8000a44 <parseGNSS+0x1d4>
	pointer++;
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f142 0200 	adc.w	r2, r2, #0
	for (int i = pointer; ((i - pointer) < 9) && (i < inputSize); i++){ // pointer+1 because I wanna to put ">" in there if there are too many symbols.
 8000a5e:	4619      	mov	r1, r3
 8000a60:	17c8      	asrs	r0, r1, #31
 8000a62:	1acc      	subs	r4, r1, r3
 8000a64:	eb60 0002 	sbc.w	r0, r0, r2
 8000a68:	2c09      	cmp	r4, #9
 8000a6a:	f170 0000 	sbcs.w	r0, r0, #0
 8000a6e:	da0b      	bge.n	8000a88 <parseGNSS+0x218>
 8000a70:	299f      	cmp	r1, #159	; 0x9f
 8000a72:	dc09      	bgt.n	8000a88 <parseGNSS+0x218>
		if (input[i] == ',') break;
 8000a74:	5c6c      	ldrb	r4, [r5, r1]
 8000a76:	2c2c      	cmp	r4, #44	; 0x2c
 8000a78:	d006      	beq.n	8000a88 <parseGNSS+0x218>
		parseResult[63 + i - pointer] = input[i];
 8000a7a:	f101 003f 	add.w	r0, r1, #63	; 0x3f
 8000a7e:	1ac0      	subs	r0, r0, r3
 8000a80:	4e0b      	ldr	r6, [pc, #44]	; (8000ab0 <parseGNSS+0x240>)
 8000a82:	5434      	strb	r4, [r6, r0]
	for (int i = pointer; ((i - pointer) < 9) && (i < inputSize); i++){ // pointer+1 because I wanna to put ">" in there if there are too many symbols.
 8000a84:	3101      	adds	r1, #1
 8000a86:	e7eb      	b.n	8000a60 <parseGNSS+0x1f0>
	if (pointer >= inputSize){
 8000a88:	2ba0      	cmp	r3, #160	; 0xa0
 8000a8a:	f172 0300 	sbcs.w	r3, r2, #0
 8000a8e:	da02      	bge.n	8000a96 <parseGNSS+0x226>
	return 0;
 8000a90:	2000      	movs	r0, #0
}
 8000a92:	b003      	add	sp, #12
 8000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("\nparsing failed, pointer >= inputSize\r\n");
 8000a96:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <parseGNSS+0x244>)
 8000a98:	f004 fb54 	bl	8005144 <puts>
		return 20;
 8000a9c:	2014      	movs	r0, #20
 8000a9e:	e7f8      	b.n	8000a92 <parseGNSS+0x222>
 8000aa0:	08006080 	.word	0x08006080
 8000aa4:	08006124 	.word	0x08006124
 8000aa8:	7ffffffe 	.word	0x7ffffffe
 8000aac:	080060d4 	.word	0x080060d4
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	080060fc 	.word	0x080060fc

08000ab8 <__io_getchar>:

/* USER CODE BEGIN 4 */
int __io_getchar(void){
 8000ab8:	b500      	push	{lr}
 8000aba:	b083      	sub	sp, #12
	uint8_t data;
	HAL_UART_Receive(&huart2, &data, sizeof(data), 1000);
 8000abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f10d 0107 	add.w	r1, sp, #7
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <__io_getchar+0x20>)
 8000ac8:	f002 f93f 	bl	8002d4a <HAL_UART_Receive>
	return data;
}
 8000acc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ad0:	b003      	add	sp, #12
 8000ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ad6:	bf00      	nop
 8000ad8:	20000270 	.word	0x20000270

08000adc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ade:	e7fe      	b.n	8000ade <Error_Handler+0x2>

08000ae0 <MX_SPI2_Init>:
{
 8000ae0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_SPI2_Init+0x38>)
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_SPI2_Init+0x3c>)
 8000ae6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ae8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000aec:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	2300      	movs	r3, #0
 8000af0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afe:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b04:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b06:	230a      	movs	r3, #10
 8000b08:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b0a:	f001 fdcb 	bl	80026a4 <HAL_SPI_Init>
 8000b0e:	b900      	cbnz	r0, 8000b12 <MX_SPI2_Init+0x32>
}
 8000b10:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b12:	f7ff ffe3 	bl	8000adc <Error_Handler>
 8000b16:	bf00      	nop
 8000b18:	20000218 	.word	0x20000218
 8000b1c:	40003800 	.word	0x40003800

08000b20 <MX_USART2_UART_Init>:
{
 8000b20:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <MX_USART2_UART_Init+0x2c>)
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_USART2_UART_Init+0x30>)
 8000b26:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000b28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b2c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b32:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b34:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b36:	220c      	movs	r2, #12
 8000b38:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3e:	f002 f8d5 	bl	8002cec <HAL_UART_Init>
 8000b42:	b900      	cbnz	r0, 8000b46 <MX_USART2_UART_Init+0x26>
}
 8000b44:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b46:	f7ff ffc9 	bl	8000adc <Error_Handler>
 8000b4a:	bf00      	nop
 8000b4c:	20000270 	.word	0x20000270
 8000b50:	40004400 	.word	0x40004400

08000b54 <SystemClock_Config>:
{
 8000b54:	b500      	push	{lr}
 8000b56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b58:	2230      	movs	r2, #48	; 0x30
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	a808      	add	r0, sp, #32
 8000b5e:	f004 fa63 	bl	8005028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b62:	2300      	movs	r3, #0
 8000b64:	9303      	str	r3, [sp, #12]
 8000b66:	9304      	str	r3, [sp, #16]
 8000b68:	9305      	str	r3, [sp, #20]
 8000b6a:	9306      	str	r3, [sp, #24]
 8000b6c:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <SystemClock_Config+0xa0>)
 8000b72:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000b74:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000b78:	6411      	str	r1, [r2, #64]	; 0x40
 8000b7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000b7c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000b80:	9201      	str	r2, [sp, #4]
 8000b82:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <SystemClock_Config+0xa4>)
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	6813      	ldr	r3, [r2, #0]
 8000b96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b9a:	9302      	str	r3, [sp, #8]
 8000b9c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bb6:	2260      	movs	r2, #96	; 0x60
 8000bb8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000bba:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	a808      	add	r0, sp, #32
 8000bc2:	f001 f9ad 	bl	8001f20 <HAL_RCC_OscConfig>
 8000bc6:	b988      	cbnz	r0, 8000bec <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000bda:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	a803      	add	r0, sp, #12
 8000be0:	f001 fbec 	bl	80023bc <HAL_RCC_ClockConfig>
 8000be4:	b920      	cbnz	r0, 8000bf0 <SystemClock_Config+0x9c>
}
 8000be6:	b015      	add	sp, #84	; 0x54
 8000be8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000bec:	f7ff ff76 	bl	8000adc <Error_Handler>
    Error_Handler();
 8000bf0:	f7ff ff74 	bl	8000adc <Error_Handler>
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <main>:
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	b0b0      	sub	sp, #192	; 0xc0
  HAL_Init();
 8000c00:	f000 f992 	bl	8000f28 <HAL_Init>
  SystemClock_Config();
 8000c04:	f7ff ffa6 	bl	8000b54 <SystemClock_Config>
  MX_GPIO_Init();
 8000c08:	f7ff fcbc 	bl	8000584 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c0c:	f7ff ff68 	bl	8000ae0 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000c10:	f003 ffa0 	bl	8004b54 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000c14:	f7ff ff84 	bl	8000b20 <MX_USART2_UART_Init>
  NRF_initialization();
 8000c18:	f7ff fdaa 	bl	8000770 <NRF_initialization>
 8000c1c:	e00d      	b.n	8000c3a <main+0x3e>
		  parseResult[i] = permParseResult[i];
 8000c1e:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <main+0x88>)
 8000c20:	5cd1      	ldrb	r1, [r2, r3]
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <main+0x8c>)
 8000c24:	54d1      	strb	r1, [r2, r3]
	  for (int i = 0; i < sizeof(permParseResult)/sizeof(permParseResult[0]); i++){
 8000c26:	3301      	adds	r3, #1
 8000c28:	2b4c      	cmp	r3, #76	; 0x4c
 8000c2a:	d9f8      	bls.n	8000c1e <main+0x22>
	  NRF_Transmit(parseResult);
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <main+0x8c>)
 8000c2e:	f7ff fddb 	bl	80007e8 <NRF_Transmit>
	  HAL_Delay(1000);
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f000 f9a3 	bl	8000f80 <HAL_Delay>
	  uint8_t hello_str[32] = "Hello";
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <main+0x90>)
 8000c3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	f8ad 1004 	strh.w	r1, [sp, #4]
 8000c46:	2400      	movs	r4, #0
 8000c48:	f8cd 4006 	str.w	r4, [sp, #6]
 8000c4c:	f8cd 400a 	str.w	r4, [sp, #10]
 8000c50:	f8cd 400e 	str.w	r4, [sp, #14]
 8000c54:	f8cd 4012 	str.w	r4, [sp, #18]
 8000c58:	f8cd 4016 	str.w	r4, [sp, #22]
 8000c5c:	f8cd 401a 	str.w	r4, [sp, #26]
 8000c60:	f8ad 401e 	strh.w	r4, [sp, #30]
	  HAL_UART_Receive(&huart2, input, sizeof(input)/sizeof(input[0]), 1000);
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	22a0      	movs	r2, #160	; 0xa0
 8000c6a:	a908      	add	r1, sp, #32
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <main+0x94>)
 8000c6e:	f002 f86c 	bl	8002d4a <HAL_UART_Receive>
	  int j = parseGNSS(input);
 8000c72:	a808      	add	r0, sp, #32
 8000c74:	f7ff fdfc 	bl	8000870 <parseGNSS>
	  printf("%s\n\n", parseResult);
 8000c78:	4903      	ldr	r1, [pc, #12]	; (8000c88 <main+0x8c>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <main+0x98>)
 8000c7c:	f004 f9dc 	bl	8005038 <iprintf>
	  for (int i = 0; i < sizeof(permParseResult)/sizeof(permParseResult[0]); i++){
 8000c80:	4623      	mov	r3, r4
 8000c82:	e7d1      	b.n	8000c28 <main+0x2c>
 8000c84:	20000050 	.word	0x20000050
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	08006058 	.word	0x08006058
 8000c90:	20000270 	.word	0x20000270
 8000c94:	0800612c 	.word	0x0800612c

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	9100      	str	r1, [sp, #0]
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_MspInit+0x34>)
 8000ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000caa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	9101      	str	r1, [sp, #4]
 8000cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	b002      	add	sp, #8
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b500      	push	{lr}
 8000cd2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9303      	str	r3, [sp, #12]
 8000cd8:	9304      	str	r3, [sp, #16]
 8000cda:	9305      	str	r3, [sp, #20]
 8000cdc:	9306      	str	r3, [sp, #24]
 8000cde:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8000ce0:	6802      	ldr	r2, [r0, #0]
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <HAL_SPI_MspInit+0x68>)
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d002      	beq.n	8000cee <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ce8:	b009      	add	sp, #36	; 0x24
 8000cea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cee:	2100      	movs	r1, #0
 8000cf0:	9101      	str	r1, [sp, #4]
 8000cf2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d04:	9201      	str	r2, [sp, #4]
 8000d06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	9102      	str	r1, [sp, #8]
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0c:	f042 0202 	orr.w	r2, r2, #2
 8000d10:	631a      	str	r2, [r3, #48]	; 0x30
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	9302      	str	r3, [sp, #8]
 8000d1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d1c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	a903      	add	r1, sp, #12
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <HAL_SPI_MspInit+0x6c>)
 8000d32:	f000 f9a5 	bl	8001080 <HAL_GPIO_Init>
}
 8000d36:	e7d7      	b.n	8000ce8 <HAL_SPI_MspInit+0x18>
 8000d38:	40003800 	.word	0x40003800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d40:	b500      	push	{lr}
 8000d42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2300      	movs	r3, #0
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	9304      	str	r3, [sp, #16]
 8000d4a:	9305      	str	r3, [sp, #20]
 8000d4c:	9306      	str	r3, [sp, #24]
 8000d4e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000d50:	6802      	ldr	r2, [r0, #0]
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x68>)
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d002      	beq.n	8000d5e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d58:	b009      	add	sp, #36	; 0x24
 8000d5a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5e:	2100      	movs	r1, #0
 8000d60:	9101      	str	r1, [sp, #4]
 8000d62:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000d66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d70:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	9102      	str	r1, [sp, #8]
 8000d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d7c:	f042 0201 	orr.w	r2, r2, #1
 8000d80:	631a      	str	r2, [r3, #48]	; 0x30
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	a903      	add	r1, sp, #12
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <HAL_UART_MspInit+0x6c>)
 8000da0:	f000 f96e 	bl	8001080 <HAL_GPIO_Init>
}
 8000da4:	e7d8      	b.n	8000d58 <HAL_UART_MspInit+0x18>
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler>

08000db2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler>

08000db4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler>

08000db6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler>

08000db8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler>

08000dba <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f8cb 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bd08      	pop	{r3, pc}

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dca:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <OTG_FS_IRQHandler+0xc>)
 8000dcc:	f000 fd9a 	bl	8001904 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000f6c 	.word	0x20000f6c

08000dd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b570      	push	{r4, r5, r6, lr}
 8000dda:	460c      	mov	r4, r1
 8000ddc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2500      	movs	r5, #0
 8000de0:	e006      	b.n	8000df0 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8000de2:	f7ff fe69 	bl	8000ab8 <__io_getchar>
 8000de6:	4621      	mov	r1, r4
 8000de8:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dec:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000dee:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	42b5      	cmp	r5, r6
 8000df2:	dbf6      	blt.n	8000de2 <_read+0xa>
	}

return len;
}
 8000df4:	4630      	mov	r0, r6
 8000df6:	bd70      	pop	{r4, r5, r6, pc}

08000df8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2500      	movs	r5, #0
 8000e00:	e004      	b.n	8000e0c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8000e02:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000e06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	3501      	adds	r5, #1
 8000e0c:	42b5      	cmp	r5, r6
 8000e0e:	dbf8      	blt.n	8000e02 <_write+0xa>
	}
	return len;
}
 8000e10:	4630      	mov	r0, r6
 8000e12:	bd70      	pop	{r4, r5, r6, pc}

08000e14 <_close>:

int _close(int file)
{
	return -1;
}
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e1e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000e20:	2000      	movs	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000e24:	2001      	movs	r0, #1
 8000e26:	4770      	bx	lr

08000e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000e28:	2000      	movs	r0, #0
 8000e2a:	4770      	bx	lr

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <_sbrk+0x38>)
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <_sbrk+0x40>)
 8000e36:	6800      	ldr	r0, [r0, #0]
 8000e38:	b140      	cbz	r0, 8000e4c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	480c      	ldr	r0, [pc, #48]	; (8000e6c <_sbrk+0x40>)
 8000e3c:	6800      	ldr	r0, [r0, #0]
 8000e3e:	4403      	add	r3, r0
 8000e40:	1a52      	subs	r2, r2, r1
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d806      	bhi.n	8000e54 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <_sbrk+0x40>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000e4a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <_sbrk+0x40>)
 8000e4e:	4c08      	ldr	r4, [pc, #32]	; (8000e70 <_sbrk+0x44>)
 8000e50:	6004      	str	r4, [r0, #0]
 8000e52:	e7f2      	b.n	8000e3a <_sbrk+0xe>
    errno = ENOMEM;
 8000e54:	f004 f8be 	bl	8004fd4 <__errno>
 8000e58:	230c      	movs	r3, #12
 8000e5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	e7f3      	b.n	8000e4a <_sbrk+0x1e>
 8000e62:	bf00      	nop
 8000e64:	20010000 	.word	0x20010000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200002b4 	.word	0x200002b4
 8000e70:	200016a8 	.word	0x200016a8

08000e74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <SystemInit+0x10>)
 8000e76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffdf 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f004 f893 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fe9f 	bl	8000bfc <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000ecc:	0800623c 	.word	0x0800623c
  ldr r2, =_sbss
 8000ed0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000ed4:	200016a8 	.word	0x200016a8

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b510      	push	{r4, lr}
 8000ede:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_InitTick+0x40>)
 8000ee2:	7818      	ldrb	r0, [r3, #0]
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	fbb3 f3f0 	udiv	r3, r3, r0
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_InitTick+0x44>)
 8000eee:	6810      	ldr	r0, [r2, #0]
 8000ef0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef4:	f000 f8b0 	bl	8001058 <HAL_SYSTICK_Config>
 8000ef8:	b968      	cbnz	r0, 8000f16 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	2c0f      	cmp	r4, #15
 8000efc:	d901      	bls.n	8000f02 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000efe:	2001      	movs	r0, #1
 8000f00:	e00a      	b.n	8000f18 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f02:	2200      	movs	r2, #0
 8000f04:	4621      	mov	r1, r4
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	f000 f85f 	bl	8000fcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_InitTick+0x48>)
 8000f10:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2000      	movs	r0, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f16:	2001      	movs	r0, #1
}
 8000f18:	bd10      	pop	{r4, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	200000a0 	.word	0x200000a0
 8000f24:	200000a8 	.word	0x200000a8

08000f28 <HAL_Init>:
{
 8000f28:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x30>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f3a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f42:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f82f 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f7ff ffc6 	bl	8000edc <HAL_InitTick>
  HAL_MspInit();
 8000f50:	f7ff fea2 	bl	8000c98 <HAL_MspInit>
}
 8000f54:	2000      	movs	r0, #0
 8000f56:	bd08      	pop	{r3, pc}
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f5c:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <HAL_IncTick+0x10>)
 8000f5e:	6811      	ldr	r1, [r2, #0]
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_IncTick+0x14>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	440b      	add	r3, r1
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200002b8 	.word	0x200002b8
 8000f70:	200000a4 	.word	0x200000a4

08000f74 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <HAL_GetTick+0x8>)
 8000f76:	6818      	ldr	r0, [r3, #0]
}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200002b8 	.word	0x200002b8

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff6 	bl	8000f74 <HAL_GetTick>
 8000f88:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f8e:	d002      	beq.n	8000f96 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_Delay+0x24>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f96:	f7ff ffed 	bl	8000f74 <HAL_GetTick>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	42a0      	cmp	r0, r4
 8000f9e:	d3fa      	bcc.n	8000f96 <HAL_Delay+0x16>
  {
  }
}
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000a4 	.word	0x200000a4

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000faa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	0200      	lsls	r0, r0, #8
 8000fb6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000fc4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fcc:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_NVIC_SetPriority+0x68>)
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd6:	f1c3 0c07 	rsb	ip, r3, #7
 8000fda:	f1bc 0f04 	cmp.w	ip, #4
 8000fde:	bf28      	it	cs
 8000fe0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe4:	f103 0e04 	add.w	lr, r3, #4
 8000fe8:	f1be 0f06 	cmp.w	lr, #6
 8000fec:	d918      	bls.n	8001020 <HAL_NVIC_SetPriority+0x54>
 8000fee:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 3eff 	mov.w	lr, #4294967295
 8000ff4:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000ff8:	ea21 010c 	bic.w	r1, r1, ip
 8000ffc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffe:	fa0e f303 	lsl.w	r3, lr, r3
 8001002:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001006:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001008:	2800      	cmp	r0, #0
 800100a:	db0b      	blt.n	8001024 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	0109      	lsls	r1, r1, #4
 800100e:	b2c9      	uxtb	r1, r1
 8001010:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001014:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001018:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800101c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001020:	2300      	movs	r3, #0
 8001022:	e7e5      	b.n	8000ff0 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	f000 000f 	and.w	r0, r0, #15
 8001028:	0109      	lsls	r1, r1, #4
 800102a:	b2c9      	uxtb	r1, r1
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_NVIC_SetPriority+0x6c>)
 800102e:	5419      	strb	r1, [r3, r0]
 8001030:	e7f4      	b.n	800101c <HAL_NVIC_SetPriority+0x50>
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	e000ed14 	.word	0xe000ed14

0800103c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800103c:	2800      	cmp	r0, #0
 800103e:	db07      	blt.n	8001050 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001040:	f000 021f 	and.w	r2, r0, #31
 8001044:	0940      	lsrs	r0, r0, #5
 8001046:	2301      	movs	r3, #1
 8001048:	4093      	lsls	r3, r2
 800104a:	4a02      	ldr	r2, [pc, #8]	; (8001054 <HAL_NVIC_EnableIRQ+0x18>)
 800104c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	3801      	subs	r0, #1
 800105a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800105e:	d20b      	bcs.n	8001078 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001060:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001064:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_SYSTICK_Config+0x24>)
 8001068:	21f0      	movs	r1, #240	; 0xf0
 800106a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106e:	2000      	movs	r0, #0
 8001070:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	2207      	movs	r2, #7
 8001074:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001076:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001078:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001080:	2300      	movs	r3, #0
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f200 80d2 	bhi.w	800122c <HAL_GPIO_Init+0x1ac>
{
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	e060      	b.n	8001150 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001090:	005e      	lsls	r6, r3, #1
 8001092:	2403      	movs	r4, #3
 8001094:	40b4      	lsls	r4, r6
 8001096:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	68cc      	ldr	r4, [r1, #12]
 800109c:	40b4      	lsls	r4, r6
 800109e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80010a0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a8:	684c      	ldr	r4, [r1, #4]
 80010aa:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80010b2:	6042      	str	r2, [r0, #4]
 80010b4:	e05a      	b.n	800116c <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b6:	08dc      	lsrs	r4, r3, #3
 80010b8:	3408      	adds	r4, #8
 80010ba:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	f003 0207 	and.w	r2, r3, #7
 80010c2:	0095      	lsls	r5, r2, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	40aa      	lsls	r2, r5
 80010c8:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010cc:	690a      	ldr	r2, [r1, #16]
 80010ce:	40aa      	lsls	r2, r5
 80010d0:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80010d4:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80010d8:	e05c      	b.n	8001194 <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	2204      	movs	r2, #4
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x60>
 80010de:	2200      	movs	r2, #0
 80010e0:	fa02 f20e 	lsl.w	r2, r2, lr
 80010e4:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e6:	3402      	adds	r4, #2
 80010e8:	4d51      	ldr	r5, [pc, #324]	; (8001230 <HAL_GPIO_Init+0x1b0>)
 80010ea:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ee:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x1b4>)
 80010f0:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	ea6f 020c 	mvn.w	r2, ip
 80010f6:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	684e      	ldr	r6, [r1, #4]
 80010fc:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001100:	d001      	beq.n	8001106 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001102:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001106:	4c4b      	ldr	r4, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x1b4>)
 8001108:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800110a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800110c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001110:	684e      	ldr	r6, [r1, #4]
 8001112:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001116:	d001      	beq.n	800111c <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8001118:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800111c:	4c45      	ldr	r4, [pc, #276]	; (8001234 <HAL_GPIO_Init+0x1b4>)
 800111e:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001120:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001122:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	684e      	ldr	r6, [r1, #4]
 8001128:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800112c:	d001      	beq.n	8001132 <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 800112e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001132:	4c40      	ldr	r4, [pc, #256]	; (8001234 <HAL_GPIO_Init+0x1b4>)
 8001134:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001138:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800113a:	684d      	ldr	r5, [r1, #4]
 800113c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001140:	d001      	beq.n	8001146 <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8001142:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001146:	4c3b      	ldr	r4, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x1b4>)
 8001148:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	3301      	adds	r3, #1
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d86b      	bhi.n	8001228 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001154:	680c      	ldr	r4, [r1, #0]
 8001156:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 800115a:	ea32 0404 	bics.w	r4, r2, r4
 800115e:	d1f4      	bne.n	800114a <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001160:	684c      	ldr	r4, [r1, #4]
 8001162:	f004 0403 	and.w	r4, r4, #3
 8001166:	3c01      	subs	r4, #1
 8001168:	2c01      	cmp	r4, #1
 800116a:	d990      	bls.n	800108e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	684a      	ldr	r2, [r1, #4]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	2a03      	cmp	r2, #3
 8001174:	d009      	beq.n	800118a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8001176:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001178:	005d      	lsls	r5, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	40aa      	lsls	r2, r5
 800117e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001182:	688a      	ldr	r2, [r1, #8]
 8001184:	40aa      	lsls	r2, r5
 8001186:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001188:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	684a      	ldr	r2, [r1, #4]
 800118c:	f002 0203 	and.w	r2, r2, #3
 8001190:	2a02      	cmp	r2, #2
 8001192:	d090      	beq.n	80010b6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001194:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001196:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f20e 	lsl.w	r2, r2, lr
 80011a0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	684a      	ldr	r2, [r1, #4]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	fa02 f20e 	lsl.w	r2, r2, lr
 80011ae:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80011b0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b2:	684a      	ldr	r2, [r1, #4]
 80011b4:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80011b8:	d0c7      	beq.n	800114a <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2200      	movs	r2, #0
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	4a1e      	ldr	r2, [pc, #120]	; (8001238 <HAL_GPIO_Init+0x1b8>)
 80011c0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80011c2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80011c6:	6454      	str	r4, [r2, #68]	; 0x44
 80011c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011ce:	9201      	str	r2, [sp, #4]
 80011d0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	089c      	lsrs	r4, r3, #2
 80011d4:	1ca5      	adds	r5, r4, #2
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <HAL_GPIO_Init+0x1b0>)
 80011d8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f20e 	lsl.w	r2, r2, lr
 80011ea:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_GPIO_Init+0x1bc>)
 80011f0:	4290      	cmp	r0, r2
 80011f2:	f43f af74 	beq.w	80010de <HAL_GPIO_Init+0x5e>
 80011f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fa:	4290      	cmp	r0, r2
 80011fc:	d00e      	beq.n	800121c <HAL_GPIO_Init+0x19c>
 80011fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001202:	4290      	cmp	r0, r2
 8001204:	d00c      	beq.n	8001220 <HAL_GPIO_Init+0x1a0>
 8001206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120a:	4290      	cmp	r0, r2
 800120c:	d00a      	beq.n	8001224 <HAL_GPIO_Init+0x1a4>
 800120e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001212:	4290      	cmp	r0, r2
 8001214:	f43f af61 	beq.w	80010da <HAL_GPIO_Init+0x5a>
 8001218:	2207      	movs	r2, #7
 800121a:	e761      	b.n	80010e0 <HAL_GPIO_Init+0x60>
 800121c:	2201      	movs	r2, #1
 800121e:	e75f      	b.n	80010e0 <HAL_GPIO_Init+0x60>
 8001220:	2202      	movs	r2, #2
 8001222:	e75d      	b.n	80010e0 <HAL_GPIO_Init+0x60>
 8001224:	2203      	movs	r2, #3
 8001226:	e75b      	b.n	80010e0 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8001228:	b002      	add	sp, #8
 800122a:	bd70      	pop	{r4, r5, r6, pc}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40013800 	.word	0x40013800
 8001234:	40013c00 	.word	0x40013c00
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001240:	b10a      	cbz	r2, 8001246 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001242:	6181      	str	r1, [r0, #24]
 8001244:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001246:	0409      	lsls	r1, r1, #16
 8001248:	6181      	str	r1, [r0, #24]
  }
}
 800124a:	4770      	bx	lr

0800124c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800124c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001250:	b083      	sub	sp, #12
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001252:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001256:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 800125a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800125e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	429a      	cmp	r2, r3
 8001264:	d854      	bhi.n	8001310 <PCD_WriteEmptyTxFifo+0xc4>
 8001266:	4607      	mov	r7, r0
 8001268:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800126a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800126c:	eb01 02c1 	add.w	r2, r1, r1, lsl #3
 8001270:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001274:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001276:	429a      	cmp	r2, r3
 8001278:	d300      	bcc.n	800127c <PCD_WriteEmptyTxFifo+0x30>
  len = ep->xfer_len - ep->xfer_count;
 800127a:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800127c:	f102 0903 	add.w	r9, r2, #3
 8001280:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001284:	e015      	b.n	80012b2 <PCD_WriteEmptyTxFifo+0x66>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001286:	f106 0903 	add.w	r9, r6, #3
 800128a:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800128e:	eb04 05c4 	add.w	r5, r4, r4, lsl #3
 8001292:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001296:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8001298:	7c3b      	ldrb	r3, [r7, #16]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	b2b3      	uxth	r3, r6
 800129e:	b2e2      	uxtb	r2, r4
 80012a0:	4640      	mov	r0, r8
 80012a2:	f002 f990 	bl	80035c6 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 80012a6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80012a8:	4433      	add	r3, r6
 80012aa:	64eb      	str	r3, [r5, #76]	; 0x4c
    ep->xfer_count += len;
 80012ac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80012ae:	4433      	add	r3, r6
 80012b0:	65eb      	str	r3, [r5, #92]	; 0x5c
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80012b2:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80012b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	454b      	cmp	r3, r9
 80012c0:	d312      	bcc.n	80012e8 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80012c2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80012c6:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80012ca:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80012cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80012ce:	4299      	cmp	r1, r3
 80012d0:	d20a      	bcs.n	80012e8 <PCD_WriteEmptyTxFifo+0x9c>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80012d2:	b14b      	cbz	r3, 80012e8 <PCD_WriteEmptyTxFifo+0x9c>
    len = ep->xfer_len - ep->xfer_count;
 80012d4:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80012d6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 80012da:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80012de:	6c96      	ldr	r6, [r2, #72]	; 0x48
 80012e0:	429e      	cmp	r6, r3
 80012e2:	d3d0      	bcc.n	8001286 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80012e4:	461e      	mov	r6, r3
 80012e6:	e7ce      	b.n	8001286 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80012e8:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80012ec:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80012f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d80f      	bhi.n	8001318 <PCD_WriteEmptyTxFifo+0xcc>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012f8:	f004 040f 	and.w	r4, r4, #15
 80012fc:	2301      	movs	r3, #1
 80012fe:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001300:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8001304:	ea24 0403 	bic.w	r4, r4, r3
 8001308:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	e000      	b.n	8001312 <PCD_WriteEmptyTxFifo+0xc6>
    return HAL_ERROR;
 8001310:	2001      	movs	r0, #1
}
 8001312:	b003      	add	sp, #12
 8001314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8001318:	2000      	movs	r0, #0
 800131a:	e7fa      	b.n	8001312 <PCD_WriteEmptyTxFifo+0xc6>

0800131c <HAL_PCD_Init>:
{
 800131c:	b570      	push	{r4, r5, r6, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 8001320:	2800      	cmp	r0, #0
 8001322:	f000 8090 	beq.w	8001446 <HAL_PCD_Init+0x12a>
 8001326:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8001328:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132a:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 800132e:	b33b      	cbz	r3, 8001380 <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001330:	2303      	movs	r3, #3
 8001332:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001338:	f413 7f80 	tst.w	r3, #256	; 0x100
 800133c:	d101      	bne.n	8001342 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001342:	6828      	ldr	r0, [r5, #0]
 8001344:	f001 fe5a 	bl	8002ffc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001348:	462c      	mov	r4, r5
 800134a:	f854 6b10 	ldr.w	r6, [r4], #16
 800134e:	46ec      	mov	ip, sp
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001358:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800135c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001360:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001364:	1d2b      	adds	r3, r5, #4
 8001366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001368:	4630      	mov	r0, r6
 800136a:	f001 fd89 	bl	8002e80 <USB_CoreInit>
 800136e:	4604      	mov	r4, r0
 8001370:	b158      	cbz	r0, 800138a <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001372:	2302      	movs	r3, #2
 8001374:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001378:	2401      	movs	r4, #1
}
 800137a:	4620      	mov	r0, r4
 800137c:	b00a      	add	sp, #40	; 0x28
 800137e:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001380:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001384:	f003 fcd2 	bl	8004d2c <HAL_PCD_MspInit>
 8001388:	e7d2      	b.n	8001330 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138a:	2100      	movs	r1, #0
 800138c:	6828      	ldr	r0, [r5, #0]
 800138e:	f002 fb31 	bl	80039f4 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001392:	4623      	mov	r3, r4
 8001394:	e016      	b.n	80013c4 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8001396:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800139a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800139e:	2101      	movs	r1, #1
 80013a0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 80013a4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ac:	2100      	movs	r1, #0
 80013ae:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 80013b2:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b4:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 80013b6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80013ba:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80013be:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	6869      	ldr	r1, [r5, #4]
 80013c6:	428b      	cmp	r3, r1
 80013c8:	d3e5      	bcc.n	8001396 <HAL_PCD_Init+0x7a>
 80013ca:	e016      	b.n	80013fa <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 80013cc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80013d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 80013da:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013de:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013e2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ea:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80013ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80013f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	3401      	adds	r4, #1
 80013f8:	b2e4      	uxtb	r4, r4
 80013fa:	42a1      	cmp	r1, r4
 80013fc:	d8e6      	bhi.n	80013cc <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013fe:	462c      	mov	r4, r5
 8001400:	f854 6b10 	ldr.w	r6, [r4], #16
 8001404:	46ec      	mov	ip, sp
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800140c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001416:	e88c 0003 	stmia.w	ip, {r0, r1}
 800141a:	1d2b      	adds	r3, r5, #4
 800141c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800141e:	4630      	mov	r0, r6
 8001420:	f001 fe48 	bl	80030b4 <USB_DevInit>
 8001424:	4604      	mov	r4, r0
 8001426:	b120      	cbz	r0, 8001432 <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001428:	2302      	movs	r3, #2
 800142a:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 800142e:	2401      	movs	r4, #1
 8001430:	e7a3      	b.n	800137a <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001438:	2301      	movs	r3, #1
 800143a:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800143e:	6828      	ldr	r0, [r5, #0]
 8001440:	f002 fa95 	bl	800396e <USB_DevDisconnect>
  return HAL_OK;
 8001444:	e799      	b.n	800137a <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8001446:	2401      	movs	r4, #1
 8001448:	e797      	b.n	800137a <HAL_PCD_Init+0x5e>

0800144a <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800144a:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 800144c:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 8001450:	2b01      	cmp	r3, #1
 8001452:	d019      	beq.n	8001488 <HAL_PCD_Start+0x3e>
{
 8001454:	b510      	push	{r4, lr}
 8001456:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001458:	2301      	movs	r3, #1
 800145a:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800145e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001460:	2b01      	cmp	r3, #1
 8001462:	d009      	beq.n	8001478 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8001464:	6820      	ldr	r0, [r4, #0]
 8001466:	f001 fdc3 	bl	8002ff0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f002 fa71 	bl	8003952 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001470:	2000      	movs	r0, #0
 8001472:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8001476:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001478:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800147a:	2b01      	cmp	r3, #1
 800147c:	d0f2      	beq.n	8001464 <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800147e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6393      	str	r3, [r2, #56]	; 0x38
 8001486:	e7ed      	b.n	8001464 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001488:	2002      	movs	r0, #2
}
 800148a:	4770      	bx	lr

0800148c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001492:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001494:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001496:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800149a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149e:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 80014a0:	6921      	ldr	r1, [r4, #16]
 80014a2:	2901      	cmp	r1, #1
 80014a4:	d011      	beq.n	80014ca <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80014a6:	4938      	ldr	r1, [pc, #224]	; (8001588 <PCD_EP_OutXfrComplete_int+0xfc>)
 80014a8:	428e      	cmp	r6, r1
 80014aa:	d056      	beq.n	800155a <PCD_EP_OutXfrComplete_int+0xce>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80014ac:	b93d      	cbnz	r5, 80014be <PCD_EP_OutXfrComplete_int+0x32>
 80014ae:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80014b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80014b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d05e      	beq.n	800157c <PCD_EP_OutXfrComplete_int+0xf0>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80014be:	b2e9      	uxtb	r1, r5
 80014c0:	4620      	mov	r0, r4
 80014c2:	f003 fc7d 	bl	8004dc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80014c6:	2000      	movs	r0, #0
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80014ca:	f012 0f08 	tst.w	r2, #8
 80014ce:	d009      	beq.n	80014e4 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014d0:	492e      	ldr	r1, [pc, #184]	; (800158c <PCD_EP_OutXfrComplete_int+0x100>)
 80014d2:	428e      	cmp	r6, r1
 80014d4:	d9f7      	bls.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
 80014d6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80014da:	d0f4      	beq.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80014dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	e7f0      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80014e4:	f012 0f20 	tst.w	r2, #32
 80014e8:	d002      	beq.n	80014f0 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014ea:	2220      	movs	r2, #32
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	e7ea      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80014f0:	f012 0f28 	tst.w	r2, #40	; 0x28
 80014f4:	d1e7      	bne.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80014f6:	4925      	ldr	r1, [pc, #148]	; (800158c <PCD_EP_OutXfrComplete_int+0x100>)
 80014f8:	428e      	cmp	r6, r1
 80014fa:	d906      	bls.n	800150a <PCD_EP_OutXfrComplete_int+0x7e>
 80014fc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001500:	d003      	beq.n	800150a <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e7dd      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800150a:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 800150e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001512:	f8d2 1298 	ldr.w	r1, [r2, #664]	; 0x298
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800151c:	1acb      	subs	r3, r1, r3
 800151e:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
        if (epnum == 0U)
 8001522:	b97d      	cbnz	r5, 8001544 <PCD_EP_OutXfrComplete_int+0xb8>
          if (ep->xfer_len == 0U)
 8001524:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800152c:	f8d2 2294 	ldr.w	r2, [r2, #660]	; 0x294
 8001530:	b16a      	cbz	r2, 800154e <PCD_EP_OutXfrComplete_int+0xc2>
            ep->xfer_buff += ep->xfer_count;
 8001532:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
 8001536:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800153a:	f8d2 128c 	ldr.w	r1, [r2, #652]	; 0x28c
 800153e:	440b      	add	r3, r1
 8001540:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001544:	b2e9      	uxtb	r1, r5
 8001546:	4620      	mov	r0, r4
 8001548:	f003 fc3a 	bl	8004dc0 <HAL_PCD_DataOutStageCallback>
 800154c:	e7bb      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800154e:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001552:	2101      	movs	r1, #1
 8001554:	f002 fa90 	bl	8003a78 <USB_EP0_OutStart>
 8001558:	e7f4      	b.n	8001544 <PCD_EP_OutXfrComplete_int+0xb8>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800155a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800155e:	d003      	beq.n	8001568 <PCD_EP_OutXfrComplete_int+0xdc>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001560:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	e7ae      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001568:	f012 0f20 	tst.w	r2, #32
 800156c:	d001      	beq.n	8001572 <PCD_EP_OutXfrComplete_int+0xe6>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800156e:	2220      	movs	r2, #32
 8001570:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001572:	b2e9      	uxtb	r1, r5
 8001574:	4620      	mov	r0, r4
 8001576:	f003 fc23 	bl	8004dc0 <HAL_PCD_DataOutStageCallback>
 800157a:	e7a4      	b.n	80014c6 <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800157c:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001580:	2100      	movs	r1, #0
 8001582:	f002 fa79 	bl	8003a78 <USB_EP0_OutStart>
 8001586:	e79a      	b.n	80014be <PCD_EP_OutXfrComplete_int+0x32>
 8001588:	4f54310a 	.word	0x4f54310a
 800158c:	4f54300a 	.word	0x4f54300a

08001590 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001590:	b538      	push	{r3, r4, r5, lr}
 8001592:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001594:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001596:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001598:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800159c:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <PCD_EP_OutSetupPacket_int+0x4c>)
 80015a2:	4295      	cmp	r5, r2
 80015a4:	d907      	bls.n	80015b6 <PCD_EP_OutSetupPacket_int+0x26>
 80015a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015aa:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80015ae:	d002      	beq.n	80015b6 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80015b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015b4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f003 fbfa 	bl	8004db0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <PCD_EP_OutSetupPacket_int+0x4c>)
 80015be:	429d      	cmp	r5, r3
 80015c0:	d902      	bls.n	80015c8 <PCD_EP_OutSetupPacket_int+0x38>
 80015c2:	6923      	ldr	r3, [r4, #16]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d001      	beq.n	80015cc <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80015c8:	2000      	movs	r0, #0
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015cc:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 80015d0:	2101      	movs	r1, #1
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f002 fa50 	bl	8003a78 <USB_EP0_OutStart>
 80015d8:	e7f6      	b.n	80015c8 <PCD_EP_OutSetupPacket_int+0x38>
 80015da:	bf00      	nop
 80015dc:	4f54300a 	.word	0x4f54300a

080015e0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80015e0:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d00d      	beq.n	8001604 <HAL_PCD_SetAddress+0x24>
{
 80015e8:	b510      	push	{r4, lr}
 80015ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80015ec:	2301      	movs	r3, #1
 80015ee:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80015f2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015f6:	6800      	ldr	r0, [r0, #0]
 80015f8:	f002 f99b 	bl	8003932 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8001602:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001604:	2002      	movs	r0, #2
}
 8001606:	4770      	bx	lr

08001608 <HAL_PCD_EP_Open>:
{
 8001608:	b538      	push	{r3, r4, r5, lr}
 800160a:	4605      	mov	r5, r0
 800160c:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800160e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001612:	d129      	bne.n	8001668 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001614:	f001 0e0f 	and.w	lr, r1, #15
 8001618:	eb0e 04ce 	add.w	r4, lr, lr, lsl #3
 800161c:	00a4      	lsls	r4, r4, #2
 800161e:	f504 741e 	add.w	r4, r4, #632	; 0x278
 8001622:	4404      	add	r4, r0
 8001624:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8001626:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 800162a:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 800162e:	2000      	movs	r0, #0
 8001630:	f88e 027d 	strb.w	r0, [lr, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001634:	f00c 0c0f 	and.w	ip, ip, #15
 8001638:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 800163c:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
 800163e:	710b      	strb	r3, [r1, #4]
  if (ep->is_in != 0U)
 8001640:	784a      	ldrb	r2, [r1, #1]
 8001642:	b10a      	cbz	r2, 8001648 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8001644:	f8a1 c008 	strh.w	ip, [r1, #8]
  if (ep_type == EP_TYPE_BULK)
 8001648:	2b02      	cmp	r3, #2
 800164a:	d01d      	beq.n	8001688 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 800164c:	f895 34bc 	ldrb.w	r3, [r5, #1212]	; 0x4bc
 8001650:	2b01      	cmp	r3, #1
 8001652:	d01c      	beq.n	800168e <HAL_PCD_EP_Open+0x86>
 8001654:	2301      	movs	r3, #1
 8001656:	f885 34bc 	strb.w	r3, [r5, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800165a:	6828      	ldr	r0, [r5, #0]
 800165c:	f001 fe03 	bl	8003266 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001660:	2000      	movs	r0, #0
 8001662:	f885 04bc 	strb.w	r0, [r5, #1212]	; 0x4bc
}
 8001666:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001668:	f001 000f 	and.w	r0, r1, #15
 800166c:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 8001670:	0089      	lsls	r1, r1, #2
 8001672:	3138      	adds	r1, #56	; 0x38
 8001674:	4429      	add	r1, r5
 8001676:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001678:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800167c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001680:	2401      	movs	r4, #1
 8001682:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8001686:	e7d5      	b.n	8001634 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	714b      	strb	r3, [r1, #5]
 800168c:	e7de      	b.n	800164c <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 800168e:	2002      	movs	r0, #2
 8001690:	e7e9      	b.n	8001666 <HAL_PCD_EP_Open+0x5e>

08001692 <HAL_PCD_EP_Close>:
{
 8001692:	b510      	push	{r4, lr}
 8001694:	4604      	mov	r4, r0
 8001696:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001698:	f011 0f80 	tst.w	r1, #128	; 0x80
 800169c:	d120      	bne.n	80016e0 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800169e:	f001 000f 	and.w	r0, r1, #15
 80016a2:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80016ac:	4423      	add	r3, r4
 80016ae:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 80016b0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80016b4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016b8:	2300      	movs	r3, #0
 80016ba:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016be:	f002 020f 	and.w	r2, r2, #15
 80016c2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80016c4:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d019      	beq.n	8001700 <HAL_PCD_EP_Close+0x6e>
 80016cc:	2301      	movs	r3, #1
 80016ce:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016d2:	6820      	ldr	r0, [r4, #0]
 80016d4:	f001 fe16 	bl	8003304 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016d8:	2000      	movs	r0, #0
 80016da:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 80016de:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e0:	f001 000f 	and.w	r0, r1, #15
 80016e4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	3338      	adds	r3, #56	; 0x38
 80016ec:	4423      	add	r3, r4
 80016ee:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80016f0:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 80016f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80016f8:	2301      	movs	r3, #1
 80016fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80016fe:	e7de      	b.n	80016be <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8001700:	2002      	movs	r0, #2
 8001702:	e7ec      	b.n	80016de <HAL_PCD_EP_Close+0x4c>

08001704 <HAL_PCD_EP_Receive>:
{
 8001704:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001706:	f001 040f 	and.w	r4, r1, #15
 800170a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800170e:	0089      	lsls	r1, r1, #2
 8001710:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8001714:	4401      	add	r1, r0
 8001716:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001718:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800171c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001720:	f8cc 228c 	str.w	r2, [ip, #652]	; 0x28c
  ep->xfer_len = len;
 8001724:	f8cc 3294 	str.w	r3, [ip, #660]	; 0x294
  ep->xfer_count = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	f8cc 329c 	str.w	r3, [ip, #668]	; 0x29c
  ep->is_in = 0U;
 800172e:	f88c 327d 	strb.w	r3, [ip, #637]	; 0x27d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001732:	f88c 427c 	strb.w	r4, [ip, #636]	; 0x27c
  if (hpcd->Init.dma_enable == 1U)
 8001736:	6903      	ldr	r3, [r0, #16]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d006      	beq.n	800174a <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800173c:	b964      	cbnz	r4, 8001758 <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800173e:	b2da      	uxtb	r2, r3
 8001740:	6800      	ldr	r0, [r0, #0]
 8001742:	f001 fe4f 	bl	80033e4 <USB_EP0StartXfer>
}
 8001746:	2000      	movs	r0, #0
 8001748:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800174a:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800174e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001752:	f8cc 2290 	str.w	r2, [ip, #656]	; 0x290
 8001756:	e7f1      	b.n	800173c <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001758:	b2da      	uxtb	r2, r3
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f001 ff4a 	bl	80035f4 <USB_EPStartXfer>
 8001760:	e7f1      	b.n	8001746 <HAL_PCD_EP_Receive+0x42>

08001762 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001762:	f001 010f 	and.w	r1, r1, #15
 8001766:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800176a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800176e:	f8d1 029c 	ldr.w	r0, [r1, #668]	; 0x29c
 8001772:	4770      	bx	lr

08001774 <HAL_PCD_EP_Transmit>:
{
 8001774:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001776:	f001 040f 	and.w	r4, r1, #15
 800177a:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 800177e:	0089      	lsls	r1, r1, #2
 8001780:	3138      	adds	r1, #56	; 0x38
 8001782:	4401      	add	r1, r0
 8001784:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8001786:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 800178a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800178e:	f8cc 204c 	str.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len = len;
 8001792:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->xfer_count = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	f8cc 305c 	str.w	r3, [ip, #92]	; 0x5c
  ep->is_in = 1U;
 800179c:	2301      	movs	r3, #1
 800179e:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a2:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80017a6:	6903      	ldr	r3, [r0, #16]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d006      	beq.n	80017ba <HAL_PCD_EP_Transmit+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017ac:	b964      	cbnz	r4, 80017c8 <HAL_PCD_EP_Transmit+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	6800      	ldr	r0, [r0, #0]
 80017b2:	f001 fe17 	bl	80033e4 <USB_EP0StartXfer>
}
 80017b6:	2000      	movs	r0, #0
 80017b8:	bd10      	pop	{r4, pc}
    ep->dma_addr = (uint32_t)pBuf;
 80017ba:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
 80017be:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80017c2:	f8cc 2050 	str.w	r2, [ip, #80]	; 0x50
 80017c6:	e7f1      	b.n	80017ac <HAL_PCD_EP_Transmit+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	6800      	ldr	r0, [r0, #0]
 80017cc:	f001 ff12 	bl	80035f4 <USB_EPStartXfer>
 80017d0:	e7f1      	b.n	80017b6 <HAL_PCD_EP_Transmit+0x42>

080017d2 <HAL_PCD_EP_SetStall>:
{
 80017d2:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017d4:	f001 050f 	and.w	r5, r1, #15
 80017d8:	6842      	ldr	r2, [r0, #4]
 80017da:	4295      	cmp	r5, r2
 80017dc:	d839      	bhi.n	8001852 <HAL_PCD_EP_SetStall+0x80>
 80017de:	4604      	mov	r4, r0
 80017e0:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80017e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80017e6:	d11f      	bne.n	8001828 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 80017e8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80017ec:	0089      	lsls	r1, r1, #2
 80017ee:	f501 711e 	add.w	r1, r1, #632	; 0x278
 80017f2:	4401      	add	r1, r0
 80017f4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80017f6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80017fa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
  ep->is_stall = 1U;
 8001804:	2301      	movs	r3, #1
 8001806:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001808:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800180a:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 800180e:	2b01      	cmp	r3, #1
 8001810:	d021      	beq.n	8001856 <HAL_PCD_EP_SetStall+0x84>
 8001812:	2301      	movs	r3, #1
 8001814:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001818:	6820      	ldr	r0, [r4, #0]
 800181a:	f002 f82f 	bl	800387c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800181e:	b18d      	cbz	r5, 8001844 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8001820:	2000      	movs	r0, #0
 8001822:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 8001826:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001828:	eb05 01c5 	add.w	r1, r5, r5, lsl #3
 800182c:	0089      	lsls	r1, r1, #2
 800182e:	3138      	adds	r1, #56	; 0x38
 8001830:	4401      	add	r1, r0
 8001832:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001834:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8001838:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800183c:	2201      	movs	r2, #1
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001842:	e7df      	b.n	8001804 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001844:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001848:	7c21      	ldrb	r1, [r4, #16]
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f002 f914 	bl	8003a78 <USB_EP0_OutStart>
 8001850:	e7e6      	b.n	8001820 <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
 8001854:	e7e7      	b.n	8001826 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001856:	2002      	movs	r0, #2
 8001858:	e7e5      	b.n	8001826 <HAL_PCD_EP_SetStall+0x54>

0800185a <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800185a:	f001 030f 	and.w	r3, r1, #15
 800185e:	6842      	ldr	r2, [r0, #4]
 8001860:	4293      	cmp	r3, r2
 8001862:	d831      	bhi.n	80018c8 <HAL_PCD_EP_ClrStall+0x6e>
{
 8001864:	b510      	push	{r4, lr}
 8001866:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8001868:	f011 0f80 	tst.w	r1, #128	; 0x80
 800186c:	d11e      	bne.n	80018ac <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8001872:	0089      	lsls	r1, r1, #2
 8001874:	f501 711e 	add.w	r1, r1, #632	; 0x278
 8001878:	4401      	add	r1, r0
 800187a:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800187c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001880:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001884:	2000      	movs	r0, #0
 8001886:	f882 027d 	strb.w	r0, [r2, #637]	; 0x27d
  ep->is_stall = 0U;
 800188a:	2200      	movs	r2, #0
 800188c:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800188e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8001890:	f894 34bc 	ldrb.w	r3, [r4, #1212]	; 0x4bc
 8001894:	2b01      	cmp	r3, #1
 8001896:	d019      	beq.n	80018cc <HAL_PCD_EP_ClrStall+0x72>
 8001898:	2301      	movs	r3, #1
 800189a:	f884 34bc 	strb.w	r3, [r4, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800189e:	6820      	ldr	r0, [r4, #0]
 80018a0:	f002 f819 	bl	80038d6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f884 04bc 	strb.w	r0, [r4, #1212]	; 0x4bc
}
 80018aa:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ac:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 80018b0:	0089      	lsls	r1, r1, #2
 80018b2:	3138      	adds	r1, #56	; 0x38
 80018b4:	4401      	add	r1, r0
 80018b6:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80018b8:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 80018bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80018c0:	2001      	movs	r0, #1
 80018c2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 80018c6:	e7e0      	b.n	800188a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
}
 80018ca:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80018cc:	2002      	movs	r0, #2
 80018ce:	e7ec      	b.n	80018aa <HAL_PCD_EP_ClrStall+0x50>

080018d0 <HAL_PCD_EP_Abort>:
{
 80018d0:	b508      	push	{r3, lr}
  if ((0x80U & ep_addr) == 0x80U)
 80018d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80018d6:	d10c      	bne.n	80018f2 <HAL_PCD_EP_Abort+0x22>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	f001 010f 	and.w	r1, r1, #15
 80018dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018e0:	0089      	lsls	r1, r1, #2
 80018e2:	f501 711e 	add.w	r1, r1, #632	; 0x278
 80018e6:	4401      	add	r1, r0
 80018e8:	3104      	adds	r1, #4
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80018ea:	6800      	ldr	r0, [r0, #0]
 80018ec:	f001 fe0c 	bl	8003508 <USB_EPStopXfer>
}
 80018f0:	bd08      	pop	{r3, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f2:	f001 010f 	and.w	r1, r1, #15
 80018f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80018fa:	0089      	lsls	r1, r1, #2
 80018fc:	3138      	adds	r1, #56	; 0x38
 80018fe:	4401      	add	r1, r0
 8001900:	3104      	adds	r1, #4
 8001902:	e7f2      	b.n	80018ea <HAL_PCD_EP_Abort+0x1a>

08001904 <HAL_PCD_IRQHandler>:
{
 8001904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001908:	b083      	sub	sp, #12
 800190a:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800190c:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800190e:	4628      	mov	r0, r5
 8001910:	f002 f86c 	bl	80039ec <USB_GetMode>
 8001914:	b110      	cbz	r0, 800191c <HAL_PCD_IRQHandler+0x18>
}
 8001916:	b003      	add	sp, #12
 8001918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800191c:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800191e:	6820      	ldr	r0, [r4, #0]
 8001920:	f002 f833 	bl	800398a <USB_ReadInterrupts>
 8001924:	2800      	cmp	r0, #0
 8001926:	d0f6      	beq.n	8001916 <HAL_PCD_IRQHandler+0x12>
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001928:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8001932:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001936:	6820      	ldr	r0, [r4, #0]
 8001938:	f002 f827 	bl	800398a <USB_ReadInterrupts>
 800193c:	f010 0f02 	tst.w	r0, #2
 8001940:	d004      	beq.n	800194c <HAL_PCD_IRQHandler+0x48>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	6953      	ldr	r3, [r2, #20]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800194c:	6820      	ldr	r0, [r4, #0]
 800194e:	f002 f81c 	bl	800398a <USB_ReadInterrupts>
 8001952:	f010 0f10 	tst.w	r0, #16
 8001956:	d013      	beq.n	8001980 <HAL_PCD_IRQHandler+0x7c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001958:	6822      	ldr	r2, [r4, #0]
 800195a:	6993      	ldr	r3, [r2, #24]
 800195c:	f023 0310 	bic.w	r3, r3, #16
 8001960:	6193      	str	r3, [r2, #24]
      RegVal = USBx->GRXSTSP;
 8001962:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001966:	f008 090f 	and.w	r9, r8, #15
      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800196a:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800196e:	2b02      	cmp	r3, #2
 8001970:	d04b      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x106>
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001972:	2b06      	cmp	r3, #6
 8001974:	d06f      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x152>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001976:	6822      	ldr	r2, [r4, #0]
 8001978:	6993      	ldr	r3, [r2, #24]
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001980:	6820      	ldr	r0, [r4, #0]
 8001982:	f002 f802 	bl	800398a <USB_ReadInterrupts>
 8001986:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800198a:	d176      	bne.n	8001a7a <HAL_PCD_IRQHandler+0x176>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800198c:	6820      	ldr	r0, [r4, #0]
 800198e:	f001 fffc 	bl	800398a <USB_ReadInterrupts>
 8001992:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001996:	f040 80e0 	bne.w	8001b5a <HAL_PCD_IRQHandler+0x256>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800199a:	6820      	ldr	r0, [r4, #0]
 800199c:	f001 fff5 	bl	800398a <USB_ReadInterrupts>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	f2c0 8163 	blt.w	8001c6c <HAL_PCD_IRQHandler+0x368>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019a6:	6820      	ldr	r0, [r4, #0]
 80019a8:	f001 ffef 	bl	800398a <USB_ReadInterrupts>
 80019ac:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80019b0:	d009      	beq.n	80019c6 <HAL_PCD_IRQHandler+0xc2>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f013 0f01 	tst.w	r3, #1
 80019b8:	f040 8170 	bne.w	8001c9c <HAL_PCD_IRQHandler+0x398>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019bc:	6822      	ldr	r2, [r4, #0]
 80019be:	6953      	ldr	r3, [r2, #20]
 80019c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c4:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	f001 ffdf 	bl	800398a <USB_ReadInterrupts>
 80019cc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80019d0:	f040 8168 	bne.w	8001ca4 <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019d4:	6820      	ldr	r0, [r4, #0]
 80019d6:	f001 ffd8 	bl	800398a <USB_ReadInterrupts>
 80019da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80019de:	f040 81b5 	bne.w	8001d4c <HAL_PCD_IRQHandler+0x448>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019e2:	6820      	ldr	r0, [r4, #0]
 80019e4:	f001 ffd1 	bl	800398a <USB_ReadInterrupts>
 80019e8:	f010 0f08 	tst.w	r0, #8
 80019ec:	f040 81c6 	bne.w	8001d7c <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	f001 ffca 	bl	800398a <USB_ReadInterrupts>
 80019f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80019fa:	f000 81d9 	beq.w	8001db0 <HAL_PCD_IRQHandler+0x4ac>
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019fe:	69ab      	ldr	r3, [r5, #24]
 8001a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a04:	61ab      	str	r3, [r5, #24]
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a06:	2601      	movs	r6, #1
 8001a08:	e1c2      	b.n	8001d90 <HAL_PCD_IRQHandler+0x48c>
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001a0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001a0e:	ea18 0f03 	tst.w	r8, r3
 8001a12:	d0b0      	beq.n	8001976 <HAL_PCD_IRQHandler+0x72>
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a14:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	eb09 0ac9 	add.w	sl, r9, r9, lsl #3
 8001a22:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001a26:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001a2a:	f8da 128c 	ldr.w	r1, [sl, #652]	; 0x28c
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f001 fefa 	bl	8003828 <USB_ReadPacket>
          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a34:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001a38:	f8da 328c 	ldr.w	r3, [sl, #652]	; 0x28c
 8001a3c:	445b      	add	r3, fp
 8001a3e:	f8ca 328c 	str.w	r3, [sl, #652]	; 0x28c
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	444b      	add	r3, r9
 8001a46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a4a:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8001a4e:	445b      	add	r3, fp
 8001a50:	f8ca 329c 	str.w	r3, [sl, #668]	; 0x29c
 8001a54:	e78f      	b.n	8001976 <HAL_PCD_IRQHandler+0x72>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a56:	2208      	movs	r2, #8
 8001a58:	f204 41c4 	addw	r1, r4, #1220	; 0x4c4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f001 fee3 	bl	8003828 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a62:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001a66:	eb09 02c9 	add.w	r2, r9, r9, lsl #3
 8001a6a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001a6e:	f8d2 329c 	ldr.w	r3, [r2, #668]	; 0x29c
 8001a72:	4443      	add	r3, r8
 8001a74:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
 8001a78:	e77d      	b.n	8001976 <HAL_PCD_IRQHandler+0x72>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	f001 ff89 	bl	8003992 <USB_ReadDevAllOutEpInterrupt>
 8001a80:	4680      	mov	r8, r0
      epnum = 0U;
 8001a82:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001a84:	e035      	b.n	8001af2 <HAL_PCD_IRQHandler+0x1ee>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a86:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a90:	4649      	mov	r1, r9
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff fcfa 	bl	800148c <PCD_EP_OutXfrComplete_int>
 8001a98:	e03c      	b.n	8001b14 <HAL_PCD_IRQHandler+0x210>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a9a:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fd72 	bl	8001590 <PCD_EP_OutSetupPacket_int>
 8001aac:	e035      	b.n	8001b1a <HAL_PCD_IRQHandler+0x216>
            if (ep->is_iso_incomplete == 1U)
 8001aae:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001ab2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001ab6:	f893 327f 	ldrb.w	r3, [r3, #639]	; 0x27f
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d041      	beq.n	8001b42 <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001abe:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ac8:	f01a 0f20 	tst.w	sl, #32
 8001acc:	d004      	beq.n	8001ad8 <HAL_PCD_IRQHandler+0x1d4>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ace:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ad8:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8001adc:	d005      	beq.n	8001aea <HAL_PCD_IRQHandler+0x1e6>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ade:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
        epnum++;
 8001aea:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001aee:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001af2:	f1b8 0f00 	cmp.w	r8, #0
 8001af6:	f43f af49 	beq.w	800198c <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U)
 8001afa:	f018 0f01 	tst.w	r8, #1
 8001afe:	d0f4      	beq.n	8001aea <HAL_PCD_IRQHandler+0x1e6>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b00:	fa5f fb89 	uxtb.w	fp, r9
 8001b04:	4659      	mov	r1, fp
 8001b06:	6820      	ldr	r0, [r4, #0]
 8001b08:	f001 ff53 	bl	80039b2 <USB_ReadDevOutEPInterrupt>
 8001b0c:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b0e:	f010 0f01 	tst.w	r0, #1
 8001b12:	d1b8      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x182>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b14:	f01a 0f08 	tst.w	sl, #8
 8001b18:	d1bf      	bne.n	8001a9a <HAL_PCD_IRQHandler+0x196>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b1a:	f01a 0f10 	tst.w	sl, #16
 8001b1e:	d004      	beq.n	8001b2a <HAL_PCD_IRQHandler+0x226>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b20:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b24:	2210      	movs	r2, #16
 8001b26:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001b2a:	f01a 0f02 	tst.w	sl, #2
 8001b2e:	d0cb      	beq.n	8001ac8 <HAL_PCD_IRQHandler+0x1c4>
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001b30:	696b      	ldr	r3, [r5, #20]
 8001b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b36:	d0ba      	beq.n	8001aae <HAL_PCD_IRQHandler+0x1aa>
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	e7b5      	b.n	8001aae <HAL_PCD_IRQHandler+0x1aa>
              ep->is_iso_incomplete = 0U;
 8001b42:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001b46:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b50:	4659      	mov	r1, fp
 8001b52:	4620      	mov	r0, r4
 8001b54:	f003 f982 	bl	8004e5c <HAL_PCD_ISOOUTIncompleteCallback>
 8001b58:	e7b1      	b.n	8001abe <HAL_PCD_IRQHandler+0x1ba>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b5a:	6820      	ldr	r0, [r4, #0]
 8001b5c:	f001 ff21 	bl	80039a2 <USB_ReadDevAllInEpInterrupt>
 8001b60:	4680      	mov	r8, r0
      epnum = 0U;
 8001b62:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001b64:	e025      	b.n	8001bb2 <HAL_PCD_IRQHandler+0x2ae>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001b66:	4659      	mov	r1, fp
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f003 f935 	bl	8004dd8 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001b6e:	f01a 0f08 	tst.w	sl, #8
 8001b72:	d004      	beq.n	8001b7e <HAL_PCD_IRQHandler+0x27a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001b74:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b78:	2208      	movs	r2, #8
 8001b7a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001b7e:	f01a 0f10 	tst.w	sl, #16
 8001b82:	d004      	beq.n	8001b8e <HAL_PCD_IRQHandler+0x28a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001b84:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b88:	2210      	movs	r2, #16
 8001b8a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b8e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001b92:	d004      	beq.n	8001b9e <HAL_PCD_IRQHandler+0x29a>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b94:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b9e:	f01a 0f02 	tst.w	sl, #2
 8001ba2:	d140      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x322>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ba4:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001ba8:	d15b      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x35e>
        epnum++;
 8001baa:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001bae:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001bb2:	f1b8 0f00 	cmp.w	r8, #0
 8001bb6:	f43f aef0 	beq.w	800199a <HAL_PCD_IRQHandler+0x96>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001bba:	f018 0f01 	tst.w	r8, #1
 8001bbe:	d0f4      	beq.n	8001baa <HAL_PCD_IRQHandler+0x2a6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bc0:	fa5f fb89 	uxtb.w	fp, r9
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	6820      	ldr	r0, [r4, #0]
 8001bc8:	f001 fefc 	bl	80039c4 <USB_ReadDevInEPInterrupt>
 8001bcc:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bce:	f010 0f01 	tst.w	r0, #1
 8001bd2:	d0cc      	beq.n	8001b6e <HAL_PCD_IRQHandler+0x26a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bd4:	f009 030f 	and.w	r3, r9, #15
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	ea23 0302 	bic.w	r3, r3, r2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001be6:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001bea:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001bee:	6923      	ldr	r3, [r4, #16]
 8001bf0:	428b      	cmp	r3, r1
 8001bf2:	d1b8      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x262>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bf4:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001bf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001bfc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c00:	440a      	add	r2, r1
 8001c02:	64da      	str	r2, [r3, #76]	; 0x4c
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c04:	f1b9 0f00 	cmp.w	r9, #0
 8001c08:	d1ad      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x262>
 8001c0a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1a6      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x262>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c18:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	f001 ff2a 	bl	8003a78 <USB_EP0_OutStart>
 8001c24:	e79f      	b.n	8001b66 <HAL_PCD_IRQHandler+0x262>
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c26:	4649      	mov	r1, r9
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f001 f9ed 	bl	8003008 <USB_FlushTxFifo>
            if (ep->is_iso_incomplete == 1U)
 8001c2e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x346>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001c3e:	eb05 1349 	add.w	r3, r5, r9, lsl #5
 8001c42:	2202      	movs	r2, #2
 8001c44:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8001c48:	e7ac      	b.n	8001ba4 <HAL_PCD_IRQHandler+0x2a0>
              ep->is_iso_incomplete = 0U;
 8001c4a:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
 8001c4e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c58:	4659      	mov	r1, fp
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f003 f904 	bl	8004e68 <HAL_PCD_ISOINIncompleteCallback>
 8001c60:	e7ed      	b.n	8001c3e <HAL_PCD_IRQHandler+0x33a>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001c62:	4649      	mov	r1, r9
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff faf1 	bl	800124c <PCD_WriteEmptyTxFifo>
 8001c6a:	e79e      	b.n	8001baa <HAL_PCD_IRQHandler+0x2a6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	607b      	str	r3, [r7, #4]
      if (hpcd->LPM_State == LPM_L1)
 8001c74:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d008      	beq.n	8001c8e <HAL_PCD_IRQHandler+0x38a>
        HAL_PCD_ResumeCallback(hpcd);
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f003 f8e7 	bl	8004e50 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	6953      	ldr	r3, [r2, #20]
 8001c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c8a:	6153      	str	r3, [r2, #20]
 8001c8c:	e68b      	b.n	80019a6 <HAL_PCD_IRQHandler+0xa2>
        hpcd->LPM_State = LPM_L0;
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f884 14f4 	strb.w	r1, [r4, #1268]	; 0x4f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001c94:	4620      	mov	r0, r4
 8001c96:	f000 f941 	bl	8001f1c <HAL_PCDEx_LPM_Callback>
 8001c9a:	e7f2      	b.n	8001c82 <HAL_PCD_IRQHandler+0x37e>
        HAL_PCD_SuspendCallback(hpcd);
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f003 f8bf 	bl	8004e20 <HAL_PCD_SuspendCallback>
 8001ca2:	e68b      	b.n	80019bc <HAL_PCD_IRQHandler+0xb8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001cac:	2110      	movs	r1, #16
 8001cae:	6820      	ldr	r0, [r4, #0]
 8001cb0:	f001 f9aa 	bl	8003008 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb4:	e01a      	b.n	8001cec <HAL_PCD_IRQHandler+0x3e8>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001cb6:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001cba:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001cbe:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001cc2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001cc6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cca:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cce:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cd2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001cd6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cda:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cde:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001ce2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001ce6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cea:	3601      	adds	r6, #1
 8001cec:	6863      	ldr	r3, [r4, #4]
 8001cee:	42b3      	cmp	r3, r6
 8001cf0:	d8e1      	bhi.n	8001cb6 <HAL_PCD_IRQHandler+0x3b2>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cf8:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cfc:	b1db      	cbz	r3, 8001d36 <HAL_PCD_IRQHandler+0x432>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d02:	f043 030b 	orr.w	r3, r3, #11
 8001d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0c:	f043 030b 	orr.w	r3, r3, #11
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d12:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001d16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d1a:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d1e:	f204 42c4 	addw	r2, r4, #1220	; 0x4c4
 8001d22:	7c21      	ldrb	r1, [r4, #16]
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	f001 fea7 	bl	8003a78 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	6953      	ldr	r3, [r2, #20]
 8001d2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d32:	6153      	str	r3, [r2, #20]
 8001d34:	e64e      	b.n	80019d4 <HAL_PCD_IRQHandler+0xd0>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001d40:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f043 030b 	orr.w	r3, r3, #11
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e7e2      	b.n	8001d12 <HAL_PCD_IRQHandler+0x40e>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d4c:	6820      	ldr	r0, [r4, #0]
 8001d4e:	f001 fe82 	bl	8003a56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d52:	6820      	ldr	r0, [r4, #0]
 8001d54:	f001 fa76 	bl	8003244 <USB_GetDevSpeed>
 8001d58:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d5a:	6826      	ldr	r6, [r4, #0]
 8001d5c:	f000 fbde 	bl	800251c <HAL_RCC_GetHCLKFreq>
 8001d60:	4601      	mov	r1, r0
 8001d62:	7b22      	ldrb	r2, [r4, #12]
 8001d64:	4630      	mov	r0, r6
 8001d66:	f001 f8d1 	bl	8002f0c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f003 f845 	bl	8004dfa <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d70:	6822      	ldr	r2, [r4, #0]
 8001d72:	6953      	ldr	r3, [r2, #20]
 8001d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d78:	6153      	str	r3, [r2, #20]
 8001d7a:	e632      	b.n	80019e2 <HAL_PCD_IRQHandler+0xde>
      HAL_PCD_SOFCallback(hpcd);
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	f003 f836 	bl	8004dee <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d82:	6822      	ldr	r2, [r4, #0]
 8001d84:	6953      	ldr	r3, [r2, #20]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	6153      	str	r3, [r2, #20]
 8001d8c:	e630      	b.n	80019f0 <HAL_PCD_IRQHandler+0xec>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d8e:	3601      	adds	r6, #1
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	42b3      	cmp	r3, r6
 8001d94:	d90c      	bls.n	8001db0 <HAL_PCD_IRQHandler+0x4ac>
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d96:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001d9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001d9e:	f893 327f 	ldrb.w	r3, [r3, #639]	; 0x27f
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d1f3      	bne.n	8001d8e <HAL_PCD_IRQHandler+0x48a>
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001da6:	b2f1      	uxtb	r1, r6
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff fd91 	bl	80018d0 <HAL_PCD_EP_Abort>
 8001dae:	e7ee      	b.n	8001d8e <HAL_PCD_IRQHandler+0x48a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001db0:	6820      	ldr	r0, [r4, #0]
 8001db2:	f001 fdea 	bl	800398a <USB_ReadInterrupts>
 8001db6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001dba:	d127      	bne.n	8001e0c <HAL_PCD_IRQHandler+0x508>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dbc:	6820      	ldr	r0, [r4, #0]
 8001dbe:	f001 fde4 	bl	800398a <USB_ReadInterrupts>
 8001dc2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001dc6:	d05b      	beq.n	8001e80 <HAL_PCD_IRQHandler+0x57c>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e028      	b.n	8001e1e <HAL_PCD_IRQHandler+0x51a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dcc:	3601      	adds	r6, #1
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	42b3      	cmp	r3, r6
 8001dd2:	d91d      	bls.n	8001e10 <HAL_PCD_IRQHandler+0x50c>
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dd4:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001dd8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ddc:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001de0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d1ef      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x4c8>
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	daed      	bge.n	8001dcc <HAL_PCD_IRQHandler+0x4c8>
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001df0:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
 8001df4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001dfe:	f066 017f 	orn	r1, r6, #127	; 0x7f
 8001e02:	b2c9      	uxtb	r1, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff fd63 	bl	80018d0 <HAL_PCD_EP_Abort>
 8001e0a:	e7df      	b.n	8001dcc <HAL_PCD_IRQHandler+0x4c8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e0c:	2601      	movs	r6, #1
 8001e0e:	e7de      	b.n	8001dce <HAL_PCD_IRQHandler+0x4ca>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	6953      	ldr	r3, [r2, #20]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	6153      	str	r3, [r2, #20]
 8001e1a:	e7cf      	b.n	8001dbc <HAL_PCD_IRQHandler+0x4b8>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	6862      	ldr	r2, [r4, #4]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d928      	bls.n	8001e76 <HAL_PCD_IRQHandler+0x572>
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e24:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8001e28:	f8d2 1b00 	ldr.w	r1, [r2, #2816]	; 0xb00
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e2c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001e30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e34:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
 8001e38:	2a01      	cmp	r2, #1
 8001e3a:	d1ef      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x518>
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	daed      	bge.n	8001e1c <HAL_PCD_IRQHandler+0x518>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e40:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
 8001e44:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 8001e48:	f002 0201 	and.w	r2, r2, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e4c:	4291      	cmp	r1, r2
 8001e4e:	d1e5      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x518>
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e50:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001e54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e58:	2101      	movs	r1, #1
 8001e5a:	f882 127f 	strb.w	r1, [r2, #639]	; 0x27f
          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e5e:	69aa      	ldr	r2, [r5, #24]
 8001e60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e64:	61aa      	str	r2, [r5, #24]
          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e66:	696a      	ldr	r2, [r5, #20]
 8001e68:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e6c:	d1d6      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x518>
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	607b      	str	r3, [r7, #4]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6953      	ldr	r3, [r2, #20]
 8001e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7e:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e80:	6820      	ldr	r0, [r4, #0]
 8001e82:	f001 fd82 	bl	800398a <USB_ReadInterrupts>
 8001e86:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001e8a:	d110      	bne.n	8001eae <HAL_PCD_IRQHandler+0x5aa>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e8c:	6820      	ldr	r0, [r4, #0]
 8001e8e:	f001 fd7c 	bl	800398a <USB_ReadInterrupts>
 8001e92:	f010 0f04 	tst.w	r0, #4
 8001e96:	f43f ad3e 	beq.w	8001916 <HAL_PCD_IRQHandler+0x12>
      RegVal = hpcd->Instance->GOTGINT;
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	685d      	ldr	r5, [r3, #4]
      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e9e:	f015 0f04 	tst.w	r5, #4
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x5bc>
      hpcd->Instance->GOTGINT |= RegVal;
 8001ea4:	6822      	ldr	r2, [r4, #0]
 8001ea6:	6853      	ldr	r3, [r2, #4]
 8001ea8:	432b      	orrs	r3, r5
 8001eaa:	6053      	str	r3, [r2, #4]
 8001eac:	e533      	b.n	8001916 <HAL_PCD_IRQHandler+0x12>
      HAL_PCD_ConnectCallback(hpcd);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f002 ffe0 	bl	8004e74 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6953      	ldr	r3, [r2, #20]
 8001eb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ebc:	6153      	str	r3, [r2, #20]
 8001ebe:	e7e5      	b.n	8001e8c <HAL_PCD_IRQHandler+0x588>
        HAL_PCD_DisconnectCallback(hpcd);
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f002 ffdd 	bl	8004e80 <HAL_PCD_DisconnectCallback>
 8001ec6:	e7ed      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x5a0>

08001ec8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001ec8:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001eca:	6804      	ldr	r4, [r0, #0]
 8001ecc:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001ece:	b931      	cbnz	r1, 8001ede <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001ed0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001ed4:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ee0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ee2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e008      	b.n	8001efc <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eea:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001eee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001ef2:	6849      	ldr	r1, [r1, #4]
 8001ef4:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d3f2      	bcc.n	8001eea <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f04:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f08:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 8001f0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f10:	6048      	str	r0, [r1, #4]
 8001f12:	e7e0      	b.n	8001ed6 <HAL_PCDEx_SetTxFiFo+0xe>

08001f14 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f14:	6803      	ldr	r3, [r0, #0]
 8001f16:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001f18:	2000      	movs	r0, #0
 8001f1a:	4770      	bx	lr

08001f1c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f20:	2800      	cmp	r0, #0
 8001f22:	f000 81e0 	beq.w	80022e6 <HAL_RCC_OscConfig+0x3c6>
{
 8001f26:	b570      	push	{r4, r5, r6, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2c:	6803      	ldr	r3, [r0, #0]
 8001f2e:	f013 0f01 	tst.w	r3, #1
 8001f32:	d03b      	beq.n	8001fac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f34:	4b9f      	ldr	r3, [pc, #636]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d02c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f40:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d021      	beq.n	8001f90 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f52:	d04f      	beq.n	8001ff4 <HAL_RCC_OscConfig+0xd4>
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d052      	beq.n	8002000 <HAL_RCC_OscConfig+0xe0>
 8001f5a:	4b96      	ldr	r3, [pc, #600]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	6863      	ldr	r3, [r4, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d050      	beq.n	8002014 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7fe ffff 	bl	8000f74 <HAL_GetTick>
 8001f76:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f78:	4b8e      	ldr	r3, [pc, #568]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f80:	d114      	bne.n	8001fac <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f82:	f7fe fff7 	bl	8000f74 <HAL_GetTick>
 8001f86:	1b40      	subs	r0, r0, r5
 8001f88:	2864      	cmp	r0, #100	; 0x64
 8001f8a:	d9f5      	bls.n	8001f78 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	e1b1      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f98:	d0d8      	beq.n	8001f4c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9a:	4b86      	ldr	r3, [pc, #536]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001fa2:	d003      	beq.n	8001fac <HAL_RCC_OscConfig+0x8c>
 8001fa4:	6863      	ldr	r3, [r4, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 819f 	beq.w	80022ea <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f013 0f02 	tst.w	r3, #2
 8001fb2:	d054      	beq.n	800205e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f013 0f0c 	tst.w	r3, #12
 8001fbc:	d03e      	beq.n	800203c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b7d      	ldr	r3, [pc, #500]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d033      	beq.n	8002032 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fca:	68e3      	ldr	r3, [r4, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d068      	beq.n	80020a2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <HAL_RCC_OscConfig+0x298>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7fe ffcd 	bl	8000f74 <HAL_GetTick>
 8001fda:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f013 0f02 	tst.w	r3, #2
 8001fe4:	d154      	bne.n	8002090 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7fe ffc5 	bl	8000f74 <HAL_GetTick>
 8001fea:	1b40      	subs	r0, r0, r5
 8001fec:	2802      	cmp	r0, #2
 8001fee:	d9f5      	bls.n	8001fdc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	e17f      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff4:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e7b5      	b.n	8001f6c <HAL_RCC_OscConfig+0x4c>
 8002000:	4b6c      	ldr	r3, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e7ab      	b.n	8001f6c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002014:	f7fe ffae 	bl	8000f74 <HAL_GetTick>
 8002018:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201a:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002022:	d0c3      	beq.n	8001fac <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7fe ffa6 	bl	8000f74 <HAL_GetTick>
 8002028:	1b40      	subs	r0, r0, r5
 800202a:	2864      	cmp	r0, #100	; 0x64
 800202c:	d9f5      	bls.n	800201a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800202e:	2003      	movs	r0, #3
 8002030:	e160      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002032:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800203a:	d1c6      	bne.n	8001fca <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203c:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f013 0f02 	tst.w	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_OscConfig+0x12e>
 8002046:	68e3      	ldr	r3, [r4, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	f040 8150 	bne.w	80022ee <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4a59      	ldr	r2, [pc, #356]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002056:	6921      	ldr	r1, [r4, #16]
 8002058:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800205c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	f013 0f08 	tst.w	r3, #8
 8002064:	d042      	beq.n	80020ec <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002066:	6963      	ldr	r3, [r4, #20]
 8002068:	b36b      	cbz	r3, 80020c6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_OscConfig+0x298>)
 800206c:	2201      	movs	r2, #1
 800206e:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ff7f 	bl	8000f74 <HAL_GetTick>
 8002076:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002078:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 800207a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207c:	f013 0f02 	tst.w	r3, #2
 8002080:	d134      	bne.n	80020ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe ff77 	bl	8000f74 <HAL_GetTick>
 8002086:	1b40      	subs	r0, r0, r5
 8002088:	2802      	cmp	r0, #2
 800208a:	d9f5      	bls.n	8002078 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800208c:	2003      	movs	r0, #3
 800208e:	e131      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4a48      	ldr	r2, [pc, #288]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002098:	6921      	ldr	r1, [r4, #16]
 800209a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e7dd      	b.n	800205e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <HAL_RCC_OscConfig+0x298>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff64 	bl	8000f74 <HAL_GetTick>
 80020ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f013 0f02 	tst.w	r3, #2
 80020b6:	d0d2      	beq.n	800205e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff5c 	bl	8000f74 <HAL_GetTick>
 80020bc:	1b40      	subs	r0, r0, r5
 80020be:	2802      	cmp	r0, #2
 80020c0:	d9f5      	bls.n	80020ae <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e116      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <HAL_RCC_OscConfig+0x298>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff51 	bl	8000f74 <HAL_GetTick>
 80020d2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 80020d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d8:	f013 0f02 	tst.w	r3, #2
 80020dc:	d006      	beq.n	80020ec <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020de:	f7fe ff49 	bl	8000f74 <HAL_GetTick>
 80020e2:	1b40      	subs	r0, r0, r5
 80020e4:	2802      	cmp	r0, #2
 80020e6:	d9f5      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
 80020ea:	e103      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f013 0f04 	tst.w	r3, #4
 80020f2:	d077      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f4:	4b2f      	ldr	r3, [pc, #188]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020fc:	d133      	bne.n	8002166 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002106:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002116:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_RCC_OscConfig+0x29c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002120:	d023      	beq.n	800216a <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002122:	68a3      	ldr	r3, [r4, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d034      	beq.n	8002192 <HAL_RCC_OscConfig+0x272>
 8002128:	2b05      	cmp	r3, #5
 800212a:	d038      	beq.n	800219e <HAL_RCC_OscConfig+0x27e>
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 800212e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	671a      	str	r2, [r3, #112]	; 0x70
 8002136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002138:	f022 0204 	bic.w	r2, r2, #4
 800213c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800213e:	68a3      	ldr	r3, [r4, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03d      	beq.n	80021c0 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe ff16 	bl	8000f74 <HAL_GetTick>
 8002148:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	f013 0f02 	tst.w	r3, #2
 8002152:	d146      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe ff0e 	bl	8000f74 <HAL_GetTick>
 8002158:	1b80      	subs	r0, r0, r6
 800215a:	f241 3388 	movw	r3, #5000	; 0x1388
 800215e:	4298      	cmp	r0, r3
 8002160:	d9f3      	bls.n	800214a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002162:	2003      	movs	r0, #3
 8002164:	e0c6      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002166:	2500      	movs	r5, #0
 8002168:	e7d6      	b.n	8002118 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_RCC_OscConfig+0x29c>)
 800216c:	6813      	ldr	r3, [r2, #0]
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002174:	f7fe fefe 	bl	8000f74 <HAL_GetTick>
 8002178:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_RCC_OscConfig+0x29c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002182:	d1ce      	bne.n	8002122 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fef6 	bl	8000f74 <HAL_GetTick>
 8002188:	1b80      	subs	r0, r0, r6
 800218a:	2802      	cmp	r0, #2
 800218c:	d9f5      	bls.n	800217a <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 800218e:	2003      	movs	r0, #3
 8002190:	e0b0      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 8002194:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
 800219c:	e7cf      	b.n	800213e <HAL_RCC_OscConfig+0x21e>
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_OscConfig+0x294>)
 80021a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a2:	f042 0204 	orr.w	r2, r2, #4
 80021a6:	671a      	str	r2, [r3, #112]	; 0x70
 80021a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	671a      	str	r2, [r3, #112]	; 0x70
 80021b0:	e7c5      	b.n	800213e <HAL_RCC_OscConfig+0x21e>
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7fe fed8 	bl	8000f74 <HAL_GetTick>
 80021c4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	f013 0f02 	tst.w	r3, #2
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fed0 	bl	8000f74 <HAL_GetTick>
 80021d4:	1b80      	subs	r0, r0, r6
 80021d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80021da:	4298      	cmp	r0, r3
 80021dc:	d9f3      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 80021de:	2003      	movs	r0, #3
 80021e0:	e088      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	b9ed      	cbnz	r5, 8002220 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	69a3      	ldr	r3, [r4, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8083 	beq.w	80022f2 <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ec:	4a48      	ldr	r2, [pc, #288]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 80021ee:	6892      	ldr	r2, [r2, #8]
 80021f0:	f002 020c 	and.w	r2, r2, #12
 80021f4:	2a08      	cmp	r2, #8
 80021f6:	d051      	beq.n	800229c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d017      	beq.n	800222c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_RCC_OscConfig+0x3f4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe feb7 	bl	8000f74 <HAL_GetTick>
 8002206:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002210:	d042      	beq.n	8002298 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe feaf 	bl	8000f74 <HAL_GetTick>
 8002216:	1b00      	subs	r0, r0, r4
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f5      	bls.n	8002208 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
 800221e:	e069      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 8002222:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	e7db      	b.n	80021e4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x3f4>)
 800222e:	2200      	movs	r2, #0
 8002230:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002232:	f7fe fe9f 	bl	8000f74 <HAL_GetTick>
 8002236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002240:	d006      	beq.n	8002250 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fe97 	bl	8000f74 <HAL_GetTick>
 8002246:	1b40      	subs	r0, r0, r5
 8002248:	2802      	cmp	r0, #2
 800224a:	d9f5      	bls.n	8002238 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800224c:	2003      	movs	r0, #3
 800224e:	e051      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002250:	69e3      	ldr	r3, [r4, #28]
 8002252:	6a22      	ldr	r2, [r4, #32]
 8002254:	4313      	orrs	r3, r2
 8002256:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002258:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800225c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	3a01      	subs	r2, #1
 8002262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002268:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 800226e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_RCC_OscConfig+0x3f4>)
 8002272:	2201      	movs	r2, #1
 8002274:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002276:	f7fe fe7d 	bl	8000f74 <HAL_GetTick>
 800227a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002286:	f7fe fe75 	bl	8000f74 <HAL_GetTick>
 800228a:	1b00      	subs	r0, r0, r4
 800228c:	2802      	cmp	r0, #2
 800228e:	d9f5      	bls.n	800227c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002290:	2003      	movs	r0, #3
 8002292:	e02f      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2000      	movs	r0, #0
 8002296:	e02d      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 8002298:	2000      	movs	r0, #0
 800229a:	e02b      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229c:	2b01      	cmp	r3, #1
 800229e:	d02b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x3f0>)
 80022a2:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80022a8:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022aa:	4291      	cmp	r1, r2
 80022ac:	d126      	bne.n	80022fc <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b2:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b4:	428a      	cmp	r2, r1
 80022b6:	d123      	bne.n	8002300 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ba:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80022be:	401a      	ands	r2, r3
 80022c0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80022c4:	d11e      	bne.n	8002304 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80022ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022cc:	0852      	lsrs	r2, r2, #1
 80022ce:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80022d4:	d118      	bne.n	8002308 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022d6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80022da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022dc:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80022e0:	d114      	bne.n	800230c <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 80022e2:	2000      	movs	r0, #0
 80022e4:	e006      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
}
 80022e8:	4770      	bx	lr
        return HAL_ERROR;
 80022ea:	2001      	movs	r0, #1
 80022ec:	e002      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 80022f2:	2000      	movs	r0, #0
}
 80022f4:	b002      	add	sp, #8
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	e7fb      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80022fc:	2001      	movs	r0, #1
 80022fe:	e7f9      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 8002300:	2001      	movs	r0, #1
 8002302:	e7f7      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 8002304:	2001      	movs	r0, #1
 8002306:	e7f5      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 8002308:	2001      	movs	r0, #1
 800230a:	e7f3      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 800230c:	2001      	movs	r0, #1
 800230e:	e7f1      	b.n	80022f4 <HAL_RCC_OscConfig+0x3d4>
 8002310:	40023800 	.word	0x40023800
 8002314:	42470000 	.word	0x42470000

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231a:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b04      	cmp	r3, #4
 8002324:	d03f      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x8e>
 8002326:	2b08      	cmp	r3, #8
 8002328:	d13f      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002338:	d012      	beq.n	8002360 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800233c:	6859      	ldr	r1, [r3, #4]
 800233e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002342:	481c      	ldr	r0, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002344:	2300      	movs	r3, #0
 8002346:	fba1 0100 	umull	r0, r1, r1, r0
 800234a:	f7fd ff99 	bl	8000280 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800235a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800235e:	e025      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002368:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800236c:	ebb1 000c 	subs.w	r0, r1, ip
 8002370:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002374:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002378:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800237c:	0181      	lsls	r1, r0, #6
 800237e:	1a09      	subs	r1, r1, r0
 8002380:	eb63 030e 	sbc.w	r3, r3, lr
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238a:	00c9      	lsls	r1, r1, #3
 800238c:	eb11 0c0c 	adds.w	ip, r1, ip
 8002390:	f143 0300 	adc.w	r3, r3, #0
 8002394:	0299      	lsls	r1, r3, #10
 8002396:	2300      	movs	r3, #0
 8002398:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800239c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80023a0:	f7fd ff6e 	bl	8000280 <__aeabi_uldivmod>
 80023a4:	e7d3      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a8:	e000      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023aa:	4803      	ldr	r0, [pc, #12]	; (80023b8 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	00b71b00 	.word	0x00b71b00
 80023b8:	00f42400 	.word	0x00f42400

080023bc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80023bc:	2800      	cmp	r0, #0
 80023be:	f000 809b 	beq.w	80024f8 <HAL_RCC_ClockConfig+0x13c>
{
 80023c2:	b570      	push	{r4, r5, r6, lr}
 80023c4:	460d      	mov	r5, r1
 80023c6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_RCC_ClockConfig+0x14c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d208      	bcs.n	80023e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d4:	b2cb      	uxtb	r3, r1
 80023d6:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_RCC_ClockConfig+0x14c>)
 80023d8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	428b      	cmp	r3, r1
 80023e2:	f040 808b 	bne.w	80024fc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	f013 0f02 	tst.w	r3, #2
 80023ec:	d017      	beq.n	800241e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ee:	f013 0f04 	tst.w	r3, #4
 80023f2:	d004      	beq.n	80023fe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4a45      	ldr	r2, [pc, #276]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 80023f6:	6893      	ldr	r3, [r2, #8]
 80023f8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023fc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f013 0f08 	tst.w	r3, #8
 8002404:	d004      	beq.n	8002410 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002406:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002408:	6893      	ldr	r3, [r2, #8]
 800240a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4a3e      	ldr	r2, [pc, #248]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002412:	6893      	ldr	r3, [r2, #8]
 8002414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002418:	68a1      	ldr	r1, [r4, #8]
 800241a:	430b      	orrs	r3, r1
 800241c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f013 0f01 	tst.w	r3, #1
 8002424:	d032      	beq.n	800248c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	6863      	ldr	r3, [r4, #4]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d021      	beq.n	8002470 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242c:	1e9a      	subs	r2, r3, #2
 800242e:	2a01      	cmp	r2, #1
 8002430:	d925      	bls.n	800247e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	f012 0f02 	tst.w	r2, #2
 800243a:	d061      	beq.n	8002500 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243c:	4933      	ldr	r1, [pc, #204]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 800243e:	688a      	ldr	r2, [r1, #8]
 8002440:	f022 0203 	bic.w	r2, r2, #3
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002448:	f7fe fd94 	bl	8000f74 <HAL_GetTick>
 800244c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	6862      	ldr	r2, [r4, #4]
 8002458:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800245c:	d016      	beq.n	800248c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245e:	f7fe fd89 	bl	8000f74 <HAL_GetTick>
 8002462:	1b80      	subs	r0, r0, r6
 8002464:	f241 3388 	movw	r3, #5000	; 0x1388
 8002468:	4298      	cmp	r0, r3
 800246a:	d9f0      	bls.n	800244e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e042      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002478:	d1e0      	bne.n	800243c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800247a:	2001      	movs	r0, #1
 800247c:	e03b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002486:	d1d9      	bne.n	800243c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002488:	2001      	movs	r0, #1
 800248a:	e034      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_RCC_ClockConfig+0x14c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	42ab      	cmp	r3, r5
 8002496:	d907      	bls.n	80024a8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002498:	b2ea      	uxtb	r2, r5
 800249a:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <HAL_RCC_ClockConfig+0x14c>)
 800249c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	42ab      	cmp	r3, r5
 80024a6:	d12d      	bne.n	8002504 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	f013 0f04 	tst.w	r3, #4
 80024ae:	d006      	beq.n	80024be <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4a16      	ldr	r2, [pc, #88]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 80024b2:	6893      	ldr	r3, [r2, #8]
 80024b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80024b8:	68e1      	ldr	r1, [r4, #12]
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	f013 0f08 	tst.w	r3, #8
 80024c4:	d007      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80024ce:	6921      	ldr	r1, [r4, #16]
 80024d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80024d4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d6:	f7ff ff1f 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_RCC_ClockConfig+0x150>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_RCC_ClockConfig+0x154>)
 80024e4:	5cd3      	ldrb	r3, [r2, r3]
 80024e6:	40d8      	lsrs	r0, r3
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x158>)
 80024ea:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x15c>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	f7fe fcf4 	bl	8000edc <HAL_InitTick>
  return HAL_OK;
 80024f4:	2000      	movs	r0, #0
}
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80024f8:	2001      	movs	r0, #1
}
 80024fa:	4770      	bx	lr
      return HAL_ERROR;
 80024fc:	2001      	movs	r0, #1
 80024fe:	e7fa      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002500:	2001      	movs	r0, #1
 8002502:	e7f8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002504:	2001      	movs	r0, #1
 8002506:	e7f6      	b.n	80024f6 <HAL_RCC_ClockConfig+0x13a>
 8002508:	40023c00 	.word	0x40023c00
 800250c:	40023800 	.word	0x40023800
 8002510:	08006134 	.word	0x08006134
 8002514:	200000a0 	.word	0x200000a0
 8002518:	200000a8 	.word	0x200000a8

0800251c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800251c:	4b01      	ldr	r3, [pc, #4]	; (8002524 <HAL_RCC_GetHCLKFreq+0x8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200000a0 	.word	0x200000a0

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800252a:	f7ff fff7 	bl	800251c <HAL_RCC_GetHCLKFreq>
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
}
 800253a:	40d8      	lsrs	r0, r3
 800253c:	bd08      	pop	{r3, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	08006144 	.word	0x08006144

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800254a:	f7ff ffe7 	bl	800251c <HAL_RCC_GetHCLKFreq>
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002556:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
}
 800255a:	40d8      	lsrs	r0, r3
 800255c:	bd08      	pop	{r3, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	08006144 	.word	0x08006144

08002568 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	4605      	mov	r5, r0
 8002570:	4688      	mov	r8, r1
 8002572:	4617      	mov	r7, r2
 8002574:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002576:	f7fe fcfd 	bl	8000f74 <HAL_GetTick>
 800257a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800257c:	1a1b      	subs	r3, r3, r0
 800257e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8002582:	f7fe fcf7 	bl	8000f74 <HAL_GetTick>
 8002586:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002590:	fb09 f303 	mul.w	r3, r9, r3
 8002594:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	689c      	ldr	r4, [r3, #8]
 800259a:	ea38 0304 	bics.w	r3, r8, r4
 800259e:	bf0c      	ite	eq
 80025a0:	f04f 0c01 	moveq.w	ip, #1
 80025a4:	f04f 0c00 	movne.w	ip, #0
 80025a8:	45bc      	cmp	ip, r7
 80025aa:	d040      	beq.n	800262e <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025ac:	f1b6 3fff 	cmp.w	r6, #4294967295
 80025b0:	d0f1      	beq.n	8002596 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025b2:	f7fe fcdf 	bl	8000f74 <HAL_GetTick>
 80025b6:	eba0 000a 	sub.w	r0, r0, sl
 80025ba:	4548      	cmp	r0, r9
 80025bc:	d20a      	bcs.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0x6c>
 80025be:	f1b9 0f00 	cmp.w	r9, #0
 80025c2:	d007      	beq.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025c4:	9a01      	ldr	r2, [sp, #4]
 80025c6:	b102      	cbz	r2, 80025ca <SPI_WaitFlagStateUntilTimeout+0x62>
 80025c8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	4691      	mov	r9, r2
 80025d2:	e7e0      	b.n	8002596 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025d4:	682a      	ldr	r2, [r5, #0]
 80025d6:	6853      	ldr	r3, [r2, #4]
 80025d8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80025dc:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025de:	686b      	ldr	r3, [r5, #4]
 80025e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e4:	d00b      	beq.n	80025fe <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ec:	d014      	beq.n	8002618 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80025f4:	2300      	movs	r3, #0
 80025f6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80025fa:	2003      	movs	r0, #3
 80025fc:	e018      	b.n	8002630 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025fe:	68ab      	ldr	r3, [r5, #8]
 8002600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002604:	d002      	beq.n	800260c <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800260a:	d1ec      	bne.n	80025e6 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 800260c:	682a      	ldr	r2, [r5, #0]
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e7e6      	b.n	80025e6 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8002618:	682a      	ldr	r2, [r5, #0]
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	682a      	ldr	r2, [r5, #0]
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e7df      	b.n	80025ee <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 800262e:	2000      	movs	r0, #0
}
 8002630:	b002      	add	sp, #8
 8002632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002636:	bf00      	nop
 8002638:	200000a0 	.word	0x200000a0

0800263c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b510      	push	{r4, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <SPI_EndRxTxTransaction+0x60>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <SPI_EndRxTxTransaction+0x64>)
 8002648:	fba3 3000 	umull	r3, r0, r3, r0
 800264c:	0d40      	lsrs	r0, r0, #21
 800264e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002652:	fb03 f000 	mul.w	r0, r3, r0
 8002656:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002658:	6863      	ldr	r3, [r4, #4]
 800265a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265e:	d00b      	beq.n	8002678 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002660:	9b03      	ldr	r3, [sp, #12]
 8002662:	b1bb      	cbz	r3, 8002694 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8002664:	9b03      	ldr	r3, [sp, #12]
 8002666:	3b01      	subs	r3, #1
 8002668:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002672:	d1f5      	bne.n	8002660 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8002674:	2000      	movs	r0, #0
 8002676:	e00e      	b.n	8002696 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	460b      	mov	r3, r1
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	4620      	mov	r0, r4
 8002682:	f7ff ff71 	bl	8002568 <SPI_WaitFlagStateUntilTimeout>
 8002686:	b130      	cbz	r0, 8002696 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002688:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800268a:	f043 0320 	orr.w	r3, r3, #32
 800268e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002690:	2003      	movs	r0, #3
 8002692:	e000      	b.n	8002696 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8002694:	2000      	movs	r0, #0
}
 8002696:	b004      	add	sp, #16
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	200000a0 	.word	0x200000a0
 80026a0:	165e9f81 	.word	0x165e9f81

080026a4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d05a      	beq.n	800275e <HAL_SPI_Init+0xba>
{
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ae:	b933      	cbnz	r3, 80026be <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026b0:	6843      	ldr	r3, [r0, #4]
 80026b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026b6:	d005      	beq.n	80026c4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61c3      	str	r3, [r0, #28]
 80026bc:	e002      	b.n	80026c4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026c2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d040      	beq.n	8002752 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026de:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026e0:	6863      	ldr	r3, [r4, #4]
 80026e2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80026e6:	68a2      	ldr	r2, [r4, #8]
 80026e8:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80026ec:	4313      	orrs	r3, r2
 80026ee:	68e2      	ldr	r2, [r4, #12]
 80026f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026f4:	4313      	orrs	r3, r2
 80026f6:	6922      	ldr	r2, [r4, #16]
 80026f8:	f002 0202 	and.w	r2, r2, #2
 80026fc:	4313      	orrs	r3, r2
 80026fe:	6962      	ldr	r2, [r4, #20]
 8002700:	f002 0201 	and.w	r2, r2, #1
 8002704:	4313      	orrs	r3, r2
 8002706:	69a2      	ldr	r2, [r4, #24]
 8002708:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800270c:	4313      	orrs	r3, r2
 800270e:	69e2      	ldr	r2, [r4, #28]
 8002710:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002714:	4313      	orrs	r3, r2
 8002716:	6a22      	ldr	r2, [r4, #32]
 8002718:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800271c:	4313      	orrs	r3, r2
 800271e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002720:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002724:	6821      	ldr	r1, [r4, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800272a:	8b63      	ldrh	r3, [r4, #26]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002732:	f002 0210 	and.w	r2, r2, #16
 8002736:	6821      	ldr	r1, [r4, #0]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800273c:	6822      	ldr	r2, [r4, #0]
 800273e:	69d3      	ldr	r3, [r2, #28]
 8002740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002744:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002746:	2000      	movs	r0, #0
 8002748:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800274a:	2301      	movs	r3, #1
 800274c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002750:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002752:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002756:	4620      	mov	r0, r4
 8002758:	f7fe faba 	bl	8000cd0 <HAL_SPI_MspInit>
 800275c:	e7b8      	b.n	80026d0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
}
 8002760:	4770      	bx	lr

08002762 <HAL_SPI_Transmit>:
{
 8002762:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002766:	b083      	sub	sp, #12
 8002768:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800276a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	f000 80d1 	beq.w	8002916 <HAL_SPI_Transmit+0x1b4>
 8002774:	4604      	mov	r4, r0
 8002776:	4688      	mov	r8, r1
 8002778:	4691      	mov	r9, r2
 800277a:	2301      	movs	r3, #1
 800277c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002780:	f7fe fbf8 	bl	8000f74 <HAL_GetTick>
 8002784:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002786:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 800278a:	b2f6      	uxtb	r6, r6
 800278c:	2e01      	cmp	r6, #1
 800278e:	f040 80af 	bne.w	80028f0 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 8002792:	f1b8 0f00 	cmp.w	r8, #0
 8002796:	f000 80ac 	beq.w	80028f2 <HAL_SPI_Transmit+0x190>
 800279a:	f1b9 0f00 	cmp.w	r9, #0
 800279e:	f000 80a8 	beq.w	80028f2 <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ac:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027b0:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027b4:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027b8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027ba:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027be:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027c0:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c2:	68a3      	ldr	r3, [r4, #8]
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	d01e      	beq.n	8002808 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027ca:	6823      	ldr	r3, [r4, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80027d2:	d103      	bne.n	80027dc <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027dc:	68e3      	ldr	r3, [r4, #12]
 80027de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e2:	d01c      	beq.n	800281e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e4:	6863      	ldr	r3, [r4, #4]
 80027e6:	b113      	cbz	r3, 80027ee <HAL_SPI_Transmit+0x8c>
 80027e8:	f1b9 0f01 	cmp.w	r9, #1
 80027ec:	d152      	bne.n	8002894 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	7812      	ldrb	r2, [r2, #0]
 80027f4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027f8:	3301      	adds	r3, #1
 80027fa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80027fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b01      	subs	r3, #1
 8002802:	b29b      	uxth	r3, r3
 8002804:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002806:	e045      	b.n	8002894 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	6813      	ldr	r3, [r2, #0]
 800280c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002810:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	6813      	ldr	r3, [r2, #0]
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	e7d5      	b.n	80027ca <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281e:	6863      	ldr	r3, [r4, #4]
 8002820:	b113      	cbz	r3, 8002828 <HAL_SPI_Transmit+0xc6>
 8002822:	f1b9 0f01 	cmp.w	r9, #1
 8002826:	d116      	bne.n	8002856 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002828:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002830:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002832:	3302      	adds	r3, #2
 8002834:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002836:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002840:	e009      	b.n	8002856 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002842:	f7fe fb97 	bl	8000f74 <HAL_GetTick>
 8002846:	1bc0      	subs	r0, r0, r7
 8002848:	42a8      	cmp	r0, r5
 800284a:	d302      	bcc.n	8002852 <HAL_SPI_Transmit+0xf0>
 800284c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002850:	d159      	bne.n	8002906 <HAL_SPI_Transmit+0x1a4>
 8002852:	2d00      	cmp	r5, #0
 8002854:	d059      	beq.n	800290a <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 8002856:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d033      	beq.n	80028c6 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	f012 0f02 	tst.w	r2, #2
 8002866:	d0ec      	beq.n	8002842 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002868:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800286a:	8812      	ldrh	r2, [r2, #0]
 800286c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800286e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002870:	3302      	adds	r3, #2
 8002872:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29b      	uxth	r3, r3
 800287c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800287e:	e7ea      	b.n	8002856 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002880:	f7fe fb78 	bl	8000f74 <HAL_GetTick>
 8002884:	1bc0      	subs	r0, r0, r7
 8002886:	42a8      	cmp	r0, r5
 8002888:	d302      	bcc.n	8002890 <HAL_SPI_Transmit+0x12e>
 800288a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800288e:	d13e      	bne.n	800290e <HAL_SPI_Transmit+0x1ac>
 8002890:	2d00      	cmp	r5, #0
 8002892:	d03e      	beq.n	8002912 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8002894:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	b1ab      	cbz	r3, 80028c6 <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	f012 0f02 	tst.w	r2, #2
 80028a2:	d0ed      	beq.n	8002880 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028ac:	3301      	adds	r3, #1
 80028ae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80028b0:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80028b4:	fa1f fc8c 	uxth.w	ip, ip
 80028b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80028bc:	fa1f fc8c 	uxth.w	ip, ip
 80028c0:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80028c4:	e7e6      	b.n	8002894 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c6:	463a      	mov	r2, r7
 80028c8:	4629      	mov	r1, r5
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff feb6 	bl	800263c <SPI_EndRxTxTransaction>
 80028d0:	b108      	cbz	r0, 80028d6 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028d2:	2320      	movs	r3, #32
 80028d4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028d6:	68a3      	ldr	r3, [r4, #8]
 80028d8:	b933      	cbnz	r3, 80028e8 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	9201      	str	r2, [sp, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ea:	b913      	cbnz	r3, 80028f2 <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028ec:	2600      	movs	r6, #0
 80028ee:	e000      	b.n	80028f2 <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 80028f0:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80028fe:	4630      	mov	r0, r6
 8002900:	b003      	add	sp, #12
 8002902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8002906:	2603      	movs	r6, #3
 8002908:	e7f3      	b.n	80028f2 <HAL_SPI_Transmit+0x190>
 800290a:	2603      	movs	r6, #3
 800290c:	e7f1      	b.n	80028f2 <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 800290e:	2603      	movs	r6, #3
 8002910:	e7ef      	b.n	80028f2 <HAL_SPI_Transmit+0x190>
 8002912:	2603      	movs	r6, #3
 8002914:	e7ed      	b.n	80028f2 <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 8002916:	2602      	movs	r6, #2
 8002918:	e7f1      	b.n	80028fe <HAL_SPI_Transmit+0x19c>

0800291a <HAL_SPI_TransmitReceive>:
{
 800291a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	461f      	mov	r7, r3
 8002922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8002924:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002928:	2b01      	cmp	r3, #1
 800292a:	f000 8110 	beq.w	8002b4e <HAL_SPI_TransmitReceive+0x234>
 800292e:	4604      	mov	r4, r0
 8002930:	4688      	mov	r8, r1
 8002932:	4691      	mov	r9, r2
 8002934:	2301      	movs	r3, #1
 8002936:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800293a:	f7fe fb1b 	bl	8000f74 <HAL_GetTick>
 800293e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8002940:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002944:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8002946:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002948:	2b01      	cmp	r3, #1
 800294a:	d00a      	beq.n	8002962 <HAL_SPI_TransmitReceive+0x48>
 800294c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002950:	f040 80e3 	bne.w	8002b1a <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002954:	68a2      	ldr	r2, [r4, #8]
 8002956:	2a00      	cmp	r2, #0
 8002958:	f040 80e9 	bne.w	8002b2e <HAL_SPI_TransmitReceive+0x214>
 800295c:	2b04      	cmp	r3, #4
 800295e:	f040 80e8 	bne.w	8002b32 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002962:	f1b8 0f00 	cmp.w	r8, #0
 8002966:	f000 80e6 	beq.w	8002b36 <HAL_SPI_TransmitReceive+0x21c>
 800296a:	f1b9 0f00 	cmp.w	r9, #0
 800296e:	f000 80e4 	beq.w	8002b3a <HAL_SPI_TransmitReceive+0x220>
 8002972:	2f00      	cmp	r7, #0
 8002974:	f000 80e3 	beq.w	8002b3e <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002978:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002982:	2305      	movs	r3, #5
 8002984:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002988:	2300      	movs	r3, #0
 800298a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800298c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002990:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002992:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002994:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002998:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800299a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800299c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800299e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80029a8:	d103      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029b0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029b2:	68e3      	ldr	r3, [r4, #12]
 80029b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029b8:	d011      	beq.n	80029de <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ba:	6863      	ldr	r3, [r4, #4]
 80029bc:	b10b      	cbz	r3, 80029c2 <HAL_SPI_TransmitReceive+0xa8>
 80029be:	2f01      	cmp	r7, #1
 80029c0:	d10b      	bne.n	80029da <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	7812      	ldrb	r2, [r2, #0]
 80029c8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029cc:	3301      	adds	r3, #1
 80029ce:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029da:	2701      	movs	r7, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029de:	6863      	ldr	r3, [r4, #4]
 80029e0:	b10b      	cbz	r3, 80029e6 <HAL_SPI_TransmitReceive+0xcc>
 80029e2:	2f01      	cmp	r7, #1
 80029e4:	d10b      	bne.n	80029fe <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80029f0:	3302      	adds	r3, #2
 80029f2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80029f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80029fe:	2701      	movs	r7, #1
 8002a00:	e01c      	b.n	8002a3c <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	f012 0f01 	tst.w	r2, #1
 8002a0a:	d00e      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x110>
 8002a0c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	b15a      	cbz	r2, 8002a2a <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002a1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a28:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a2a:	f7fe faa3 	bl	8000f74 <HAL_GetTick>
 8002a2e:	1b80      	subs	r0, r0, r6
 8002a30:	42a8      	cmp	r0, r5
 8002a32:	d303      	bcc.n	8002a3c <HAL_SPI_TransmitReceive+0x122>
 8002a34:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002a38:	f040 8083 	bne.w	8002b42 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	b91b      	cbnz	r3, 8002a4a <HAL_SPI_TransmitReceive+0x130>
 8002a42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d053      	beq.n	8002af2 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	f012 0f02 	tst.w	r2, #2
 8002a52:	d0d6      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0xe8>
 8002a54:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002a56:	b292      	uxth	r2, r2
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	d0d2      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0xe8>
 8002a5c:	2f00      	cmp	r7, #0
 8002a5e:	d0d0      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a60:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a68:	3302      	adds	r3, #2
 8002a6a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002a6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002a76:	2700      	movs	r7, #0
 8002a78:	e7c3      	b.n	8002a02 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	f012 0f01 	tst.w	r2, #1
 8002a82:	d00e      	beq.n	8002aa2 <HAL_SPI_TransmitReceive+0x188>
 8002a84:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002a86:	b292      	uxth	r2, r2
 8002a88:	b15a      	cbz	r2, 8002aa2 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a92:	3301      	adds	r3, #1
 8002a94:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002a96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002aa0:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aa2:	f7fe fa67 	bl	8000f74 <HAL_GetTick>
 8002aa6:	1b83      	subs	r3, r0, r6
 8002aa8:	42ab      	cmp	r3, r5
 8002aaa:	d302      	bcc.n	8002ab2 <HAL_SPI_TransmitReceive+0x198>
 8002aac:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002ab0:	d149      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x22c>
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	d049      	beq.n	8002b4a <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b913      	cbnz	r3, 8002ac2 <HAL_SPI_TransmitReceive+0x1a8>
 8002abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b1bb      	cbz	r3, 8002af2 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	f012 0f02 	tst.w	r2, #2
 8002aca:	d0d6      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x160>
 8002acc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002ace:	b292      	uxth	r2, r2
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	d0d2      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x160>
 8002ad4:	2f00      	cmp	r7, #0
 8002ad6:	d0d0      	beq.n	8002a7a <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ad8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ada:	7812      	ldrb	r2, [r2, #0]
 8002adc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002ade:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ae4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002aee:	2700      	movs	r7, #0
 8002af0:	e7c3      	b.n	8002a7a <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af2:	4632      	mov	r2, r6
 8002af4:	4629      	mov	r1, r5
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7ff fda0 	bl	800263c <SPI_EndRxTxTransaction>
 8002afc:	b948      	cbnz	r0, 8002b12 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002afe:	68a3      	ldr	r3, [r4, #8]
 8002b00:	b963      	cbnz	r3, 8002b1c <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	9b01      	ldr	r3, [sp, #4]
 8002b10:	e004      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b12:	2320      	movs	r3, #32
 8002b14:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002b16:	2001      	movs	r0, #1
    goto error;
 8002b18:	e000      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8002b1a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b22:	2300      	movs	r3, #0
 8002b24:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b28:	b003      	add	sp, #12
 8002b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8002b2e:	2002      	movs	r0, #2
 8002b30:	e7f4      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
 8002b32:	2002      	movs	r0, #2
 8002b34:	e7f2      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e7f0      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e7ee      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7ec      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002b42:	2003      	movs	r0, #3
 8002b44:	e7ea      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8002b46:	2003      	movs	r0, #3
 8002b48:	e7e8      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	e7e6      	b.n	8002b1c <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8002b4e:	2002      	movs	r0, #2
 8002b50:	e7ea      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x20e>
	...

08002b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b58:	6802      	ldr	r2, [r0, #0]
 8002b5a:	6913      	ldr	r3, [r2, #16]
 8002b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b60:	68c1      	ldr	r1, [r0, #12]
 8002b62:	430b      	orrs	r3, r1
 8002b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b66:	6883      	ldr	r3, [r0, #8]
 8002b68:	6902      	ldr	r2, [r0, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	6942      	ldr	r2, [r0, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	69c2      	ldr	r2, [r0, #28]
 8002b72:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	6801      	ldr	r1, [r0, #0]
 8002b76:	68cb      	ldr	r3, [r1, #12]
 8002b78:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b7c:	f023 030c 	bic.w	r3, r3, #12
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b84:	6802      	ldr	r2, [r0, #0]
 8002b86:	6953      	ldr	r3, [r2, #20]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	6981      	ldr	r1, [r0, #24]
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b92:	6803      	ldr	r3, [r0, #0]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <UART_SetConfig+0x108>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d006      	beq.n	8002ba8 <UART_SetConfig+0x54>
 8002b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d002      	beq.n	8002ba8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ba2:	f7ff fcc1 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8002ba6:	e001      	b.n	8002bac <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff fcce 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bac:	69e3      	ldr	r3, [r4, #28]
 8002bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb2:	d029      	beq.n	8002c08 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	1803      	adds	r3, r0, r0
 8002bb8:	4149      	adcs	r1, r1
 8002bba:	181b      	adds	r3, r3, r0
 8002bbc:	f141 0100 	adc.w	r1, r1, #0
 8002bc0:	00c9      	lsls	r1, r1, #3
 8002bc2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	1818      	adds	r0, r3, r0
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002bd0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002bd4:	f141 0100 	adc.w	r1, r1, #0
 8002bd8:	f7fd fb52 	bl	8000280 <__aeabi_uldivmod>
 8002bdc:	4d20      	ldr	r5, [pc, #128]	; (8002c60 <UART_SetConfig+0x10c>)
 8002bde:	fba5 3200 	umull	r3, r2, r5, r0
 8002be2:	0951      	lsrs	r1, r2, #5
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	fb03 0311 	mls	r3, r3, r1, r0
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3332      	adds	r3, #50	; 0x32
 8002bee:	fba5 2303 	umull	r2, r3, r5, r3
 8002bf2:	095b      	lsrs	r3, r3, #5
 8002bf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bf8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	6821      	ldr	r1, [r4, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }
}
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	1802      	adds	r2, r0, r0
 8002c0c:	eb43 0103 	adc.w	r1, r3, r3
 8002c10:	1812      	adds	r2, r2, r0
 8002c12:	f141 0100 	adc.w	r1, r1, #0
 8002c16:	00c9      	lsls	r1, r1, #3
 8002c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	1810      	adds	r0, r2, r0
 8002c20:	f141 0100 	adc.w	r1, r1, #0
 8002c24:	6862      	ldr	r2, [r4, #4]
 8002c26:	1892      	adds	r2, r2, r2
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	f7fd fb29 	bl	8000280 <__aeabi_uldivmod>
 8002c2e:	4d0c      	ldr	r5, [pc, #48]	; (8002c60 <UART_SetConfig+0x10c>)
 8002c30:	fba5 3200 	umull	r3, r2, r5, r0
 8002c34:	0951      	lsrs	r1, r2, #5
 8002c36:	2364      	movs	r3, #100	; 0x64
 8002c38:	fb03 0311 	mls	r3, r3, r1, r0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	3332      	adds	r3, #50	; 0x32
 8002c40:	fba5 2303 	umull	r2, r3, r5, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	005a      	lsls	r2, r3, #1
 8002c48:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002c4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	6821      	ldr	r1, [r4, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
 8002c5a:	e7d4      	b.n	8002c06 <UART_SetConfig+0xb2>
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	51eb851f 	.word	0x51eb851f

08002c64 <UART_WaitOnFlagUntilTimeout>:
{
 8002c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c68:	4605      	mov	r5, r0
 8002c6a:	460f      	mov	r7, r1
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	4699      	mov	r9, r3
 8002c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c74:	682c      	ldr	r4, [r5, #0]
 8002c76:	6824      	ldr	r4, [r4, #0]
 8002c78:	ea37 0304 	bics.w	r3, r7, r4
 8002c7c:	bf0c      	ite	eq
 8002c7e:	f04f 0c01 	moveq.w	ip, #1
 8002c82:	f04f 0c00 	movne.w	ip, #0
 8002c86:	45b4      	cmp	ip, r6
 8002c88:	d12d      	bne.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x82>
    if (Timeout != HAL_MAX_DELAY)
 8002c8a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002c8e:	d0f1      	beq.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c90:	f1b8 0f00 	cmp.w	r8, #0
 8002c94:	d005      	beq.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002c96:	f7fe f96d 	bl	8000f74 <HAL_GetTick>
 8002c9a:	eba0 0009 	sub.w	r0, r0, r9
 8002c9e:	4540      	cmp	r0, r8
 8002ca0:	d9e8      	bls.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca2:	682a      	ldr	r2, [r5, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca4:	f102 030c 	add.w	r3, r2, #12
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	320c      	adds	r2, #12
 8002cb2:	e842 3100 	strex	r1, r3, [r2]
 8002cb6:	2900      	cmp	r1, #0
 8002cb8:	d1f3      	bne.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0x3e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cba:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbc:	f102 0314 	add.w	r3, r2, #20
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	3214      	adds	r2, #20
 8002cca:	e842 3100 	strex	r1, r3, [r2]
 8002cce:	2900      	cmp	r1, #0
 8002cd0:	d1f3      	bne.n	8002cba <UART_WaitOnFlagUntilTimeout+0x56>
        huart->gState  = HAL_UART_STATE_READY;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002ce2:	2003      	movs	r0, #3
 8002ce4:	e000      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x84>
  return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
}
 8002ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002cec <HAL_UART_Init>:
  if (huart == NULL)
 8002cec:	b358      	cbz	r0, 8002d46 <HAL_UART_Init+0x5a>
{
 8002cee:	b510      	push	{r4, lr}
 8002cf0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002cf6:	b30b      	cbz	r3, 8002d3c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	2324      	movs	r3, #36	; 0x24
 8002cfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	68d3      	ldr	r3, [r2, #12]
 8002d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d06:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff ff23 	bl	8002b54 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	6913      	ldr	r3, [r2, #16]
 8002d12:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d16:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d18:	6822      	ldr	r2, [r4, #0]
 8002d1a:	6953      	ldr	r3, [r2, #20]
 8002d1c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002d20:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	68d3      	ldr	r3, [r2, #12]
 8002d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	2320      	movs	r3, #32
 8002d32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002d3a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d3c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002d40:	f7fd fffe 	bl	8000d40 <HAL_UART_MspInit>
 8002d44:	e7d8      	b.n	8002cf8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
}
 8002d48:	4770      	bx	lr

08002d4a <HAL_UART_Receive>:
{
 8002d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d52:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d15c      	bne.n	8002e16 <HAL_UART_Receive+0xcc>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002d62:	2900      	cmp	r1, #0
 8002d64:	d05b      	beq.n	8002e1e <HAL_UART_Receive+0xd4>
 8002d66:	2a00      	cmp	r2, #0
 8002d68:	d05b      	beq.n	8002e22 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8002d6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d059      	beq.n	8002e26 <HAL_UART_Receive+0xdc>
 8002d72:	2301      	movs	r3, #1
 8002d74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6403      	str	r3, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d7c:	2222      	movs	r2, #34	; 0x22
 8002d7e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d82:	6303      	str	r3, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8002d84:	f7fe f8f6 	bl	8000f74 <HAL_GetTick>
 8002d88:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8002d8a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002d8e:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d92:	68a3      	ldr	r3, [r4, #8]
 8002d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d98:	d005      	beq.n	8002da6 <HAL_UART_Receive+0x5c>
      pdata16bits = NULL;
 8002d9a:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8002da4:	e017      	b.n	8002dd6 <HAL_UART_Receive+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da6:	6923      	ldr	r3, [r4, #16]
 8002da8:	b113      	cbz	r3, 8002db0 <HAL_UART_Receive+0x66>
      pdata16bits = NULL;
 8002daa:	f04f 0800 	mov.w	r8, #0
 8002dae:	e7f6      	b.n	8002d9e <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8002db0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002db2:	2500      	movs	r5, #0
 8002db4:	e7f3      	b.n	8002d9e <HAL_UART_Receive+0x54>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8002dc2:	e003      	b.n	8002dcc <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8002dca:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8002dcc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8002dce:	b292      	uxth	r2, r2
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002dd6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b1bb      	cbz	r3, 8002e0c <HAL_UART_Receive+0xc2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ddc:	9600      	str	r6, [sp, #0]
 8002dde:	463b      	mov	r3, r7
 8002de0:	2200      	movs	r2, #0
 8002de2:	2120      	movs	r1, #32
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff ff3d 	bl	8002c64 <UART_WaitOnFlagUntilTimeout>
 8002dea:	b9f0      	cbnz	r0, 8002e2a <HAL_UART_Receive+0xe0>
      if (pdata8bits == NULL)
 8002dec:	2d00      	cmp	r5, #0
 8002dee:	d0e2      	beq.n	8002db6 <HAL_UART_Receive+0x6c>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002df0:	68a3      	ldr	r3, [r4, #8]
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	d0e5      	beq.n	8002dc4 <HAL_UART_Receive+0x7a>
 8002df8:	b913      	cbnz	r3, 8002e00 <HAL_UART_Receive+0xb6>
 8002dfa:	6923      	ldr	r3, [r4, #16]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0e1      	beq.n	8002dc4 <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e08:	702b      	strb	r3, [r5, #0]
 8002e0a:	e7de      	b.n	8002dca <HAL_UART_Receive+0x80>
    huart->RxState = HAL_UART_STATE_READY;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 8002e16:	2002      	movs	r0, #2
}
 8002e18:	b002      	add	sp, #8
 8002e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e7fa      	b.n	8002e18 <HAL_UART_Receive+0xce>
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7f8      	b.n	8002e18 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 8002e26:	2002      	movs	r0, #2
 8002e28:	e7f6      	b.n	8002e18 <HAL_UART_Receive+0xce>
        return HAL_TIMEOUT;
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	e7f4      	b.n	8002e18 <HAL_UART_Receive+0xce>
	...

08002e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002e30:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002e36:	9b01      	ldr	r3, [sp, #4]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8002e3c:	9a01      	ldr	r2, [sp, #4]
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <USB_CoreReset+0x4c>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d815      	bhi.n	8002e70 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e44:	6903      	ldr	r3, [r0, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	daf5      	bge.n	8002e36 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002e4e:	6903      	ldr	r3, [r0, #16]
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8002e56:	9b01      	ldr	r3, [sp, #4]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 8002e5c:	9a01      	ldr	r2, [sp, #4]
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <USB_CoreReset+0x4c>)
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d808      	bhi.n	8002e76 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e64:	6903      	ldr	r3, [r0, #16]
 8002e66:	f013 0f01 	tst.w	r3, #1
 8002e6a:	d1f4      	bne.n	8002e56 <USB_CoreReset+0x26>

  return HAL_OK;
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e000      	b.n	8002e72 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002e70:	2003      	movs	r0, #3
}
 8002e72:	b002      	add	sp, #8
 8002e74:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002e76:	2003      	movs	r0, #3
 8002e78:	e7fb      	b.n	8002e72 <USB_CoreReset+0x42>
 8002e7a:	bf00      	nop
 8002e7c:	00030d40 	.word	0x00030d40

08002e80 <USB_CoreInit>:
{
 8002e80:	b084      	sub	sp, #16
 8002e82:	b510      	push	{r4, lr}
 8002e84:	4604      	mov	r4, r0
 8002e86:	a803      	add	r0, sp, #12
 8002e88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e8c:	9b08      	ldr	r3, [sp, #32]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d11f      	bne.n	8002ed2 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e98:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e9a:	68e3      	ldr	r3, [r4, #12]
 8002e9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ea6:	68e3      	ldr	r3, [r4, #12]
 8002ea8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002eac:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002eae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d009      	beq.n	8002ec8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f7ff ffbb 	bl	8002e30 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002eba:	9b06      	ldr	r3, [sp, #24]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d01b      	beq.n	8002ef8 <USB_CoreInit+0x78>
}
 8002ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec4:	b004      	add	sp, #16
 8002ec6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ec8:	68e3      	ldr	r3, [r4, #12]
 8002eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ece:	60e3      	str	r3, [r4, #12]
 8002ed0:	e7f0      	b.n	8002eb4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ed2:	68e3      	ldr	r3, [r4, #12]
 8002ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ed8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff ffa8 	bl	8002e30 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ee2:	b923      	cbnz	r3, 8002eee <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	63a3      	str	r3, [r4, #56]	; 0x38
 8002eec:	e7e5      	b.n	8002eba <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ef6:	e7e0      	b.n	8002eba <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ef8:	68a3      	ldr	r3, [r4, #8]
 8002efa:	f043 0306 	orr.w	r3, r3, #6
 8002efe:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f00:	68a3      	ldr	r3, [r4, #8]
 8002f02:	f043 0320 	orr.w	r3, r3, #32
 8002f06:	60a3      	str	r3, [r4, #8]
 8002f08:	e7da      	b.n	8002ec0 <USB_CoreInit+0x40>
	...

08002f0c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8002f0c:	2a02      	cmp	r2, #2
 8002f0e:	d00a      	beq.n	8002f26 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f10:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f12:	68c2      	ldr	r2, [r0, #12]
 8002f14:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002f18:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f1a:	68c3      	ldr	r3, [r0, #12]
 8002f1c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002f20:	60c3      	str	r3, [r0, #12]
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <USB_SetTurnaroundTime+0xa8>)
 8002f28:	440b      	add	r3, r1
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <USB_SetTurnaroundTime+0xac>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d92f      	bls.n	8002f90 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <USB_SetTurnaroundTime+0xb0>)
 8002f32:	440b      	add	r3, r1
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <USB_SetTurnaroundTime+0xb4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d92c      	bls.n	8002f94 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f3a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8002f3e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <USB_SetTurnaroundTime+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d927      	bls.n	8002f98 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f48:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8002f4c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8002f50:	4a1d      	ldr	r2, [pc, #116]	; (8002fc8 <USB_SetTurnaroundTime+0xbc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d322      	bcc.n	8002f9c <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <USB_SetTurnaroundTime+0xc0>)
 8002f58:	440b      	add	r3, r1
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <USB_SetTurnaroundTime+0xc4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d91f      	bls.n	8002fa0 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <USB_SetTurnaroundTime+0xc8>)
 8002f62:	440b      	add	r3, r1
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <USB_SetTurnaroundTime+0xcc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d31c      	bcc.n	8002fa4 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <USB_SetTurnaroundTime+0xd0>)
 8002f6c:	440b      	add	r3, r1
 8002f6e:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <USB_SetTurnaroundTime+0xd4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d319      	bcc.n	8002fa8 <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f74:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002f78:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002f7c:	4a19      	ldr	r2, [pc, #100]	; (8002fe4 <USB_SetTurnaroundTime+0xd8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d314      	bcc.n	8002fac <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <USB_SetTurnaroundTime+0xdc>)
 8002f84:	440b      	add	r3, r1
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <USB_SetTurnaroundTime+0xe0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d211      	bcs.n	8002fb0 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 8002f8c:	2107      	movs	r1, #7
 8002f8e:	e7c0      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002f90:	210f      	movs	r1, #15
 8002f92:	e7be      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002f94:	210e      	movs	r1, #14
 8002f96:	e7bc      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002f98:	210d      	movs	r1, #13
 8002f9a:	e7ba      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002f9c:	210c      	movs	r1, #12
 8002f9e:	e7b8      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002fa0:	210b      	movs	r1, #11
 8002fa2:	e7b6      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002fa4:	210a      	movs	r1, #10
 8002fa6:	e7b4      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002fa8:	2109      	movs	r1, #9
 8002faa:	e7b2      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002fac:	2108      	movs	r1, #8
 8002fae:	e7b0      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 8002fb0:	2106      	movs	r1, #6
 8002fb2:	e7ae      	b.n	8002f12 <USB_SetTurnaroundTime+0x6>
 8002fb4:	ff275340 	.word	0xff275340
 8002fb8:	000c34ff 	.word	0x000c34ff
 8002fbc:	ff1b1e40 	.word	0xff1b1e40
 8002fc0:	000f423f 	.word	0x000f423f
 8002fc4:	00124f7f 	.word	0x00124f7f
 8002fc8:	0013d620 	.word	0x0013d620
 8002fcc:	fee5b660 	.word	0xfee5b660
 8002fd0:	0016e35f 	.word	0x0016e35f
 8002fd4:	feced300 	.word	0xfeced300
 8002fd8:	001b7740 	.word	0x001b7740
 8002fdc:	feb35bc0 	.word	0xfeb35bc0
 8002fe0:	002191c0 	.word	0x002191c0
 8002fe4:	00387520 	.word	0x00387520
 8002fe8:	fe5954e0 	.word	0xfe5954e0
 8002fec:	00419ce0 	.word	0x00419ce0

08002ff0 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ff0:	6883      	ldr	r3, [r0, #8]
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6083      	str	r3, [r0, #8]
}
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	4770      	bx	lr

08002ffc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ffc:	6883      	ldr	r3, [r0, #8]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6083      	str	r3, [r0, #8]
}
 8003004:	2000      	movs	r0, #0
 8003006:	4770      	bx	lr

08003008 <USB_FlushTxFifo>:
{
 8003008:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	9301      	str	r3, [sp, #4]
    count++;
 800300e:	9b01      	ldr	r3, [sp, #4]
 8003010:	3301      	adds	r3, #1
 8003012:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003014:	9a01      	ldr	r2, [sp, #4]
 8003016:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <USB_FlushTxFifo+0x4c>)
 8003018:	429a      	cmp	r2, r3
 800301a:	d815      	bhi.n	8003048 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800301c:	6903      	ldr	r3, [r0, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	daf5      	bge.n	800300e <USB_FlushTxFifo+0x6>
  count = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003026:	0189      	lsls	r1, r1, #6
 8003028:	f041 0120 	orr.w	r1, r1, #32
 800302c:	6101      	str	r1, [r0, #16]
    count++;
 800302e:	9b01      	ldr	r3, [sp, #4]
 8003030:	3301      	adds	r3, #1
 8003032:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003034:	9a01      	ldr	r2, [sp, #4]
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <USB_FlushTxFifo+0x4c>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d808      	bhi.n	800304e <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800303c:	6903      	ldr	r3, [r0, #16]
 800303e:	f013 0f20 	tst.w	r3, #32
 8003042:	d1f4      	bne.n	800302e <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003044:	2000      	movs	r0, #0
 8003046:	e000      	b.n	800304a <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003048:	2003      	movs	r0, #3
}
 800304a:	b002      	add	sp, #8
 800304c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800304e:	2003      	movs	r0, #3
 8003050:	e7fb      	b.n	800304a <USB_FlushTxFifo+0x42>
 8003052:	bf00      	nop
 8003054:	00030d40 	.word	0x00030d40

08003058 <USB_FlushRxFifo>:
{
 8003058:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	9301      	str	r3, [sp, #4]
    count++;
 800305e:	9b01      	ldr	r3, [sp, #4]
 8003060:	3301      	adds	r3, #1
 8003062:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003064:	9a01      	ldr	r2, [sp, #4]
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <USB_FlushRxFifo+0x48>)
 8003068:	429a      	cmp	r2, r3
 800306a:	d813      	bhi.n	8003094 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800306c:	6903      	ldr	r3, [r0, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	daf5      	bge.n	800305e <USB_FlushRxFifo+0x6>
  count = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003076:	2310      	movs	r3, #16
 8003078:	6103      	str	r3, [r0, #16]
    count++;
 800307a:	9b01      	ldr	r3, [sp, #4]
 800307c:	3301      	adds	r3, #1
 800307e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003080:	9a01      	ldr	r2, [sp, #4]
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <USB_FlushRxFifo+0x48>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d808      	bhi.n	800309a <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003088:	6903      	ldr	r3, [r0, #16]
 800308a:	f013 0f10 	tst.w	r3, #16
 800308e:	d1f4      	bne.n	800307a <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8003090:	2000      	movs	r0, #0
 8003092:	e000      	b.n	8003096 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8003094:	2003      	movs	r0, #3
}
 8003096:	b002      	add	sp, #8
 8003098:	4770      	bx	lr
      return HAL_TIMEOUT;
 800309a:	2003      	movs	r0, #3
 800309c:	e7fb      	b.n	8003096 <USB_FlushRxFifo+0x3e>
 800309e:	bf00      	nop
 80030a0:	00030d40 	.word	0x00030d40

080030a4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80030a4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80030a8:	4319      	orrs	r1, r3
 80030aa:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80030ae:	2000      	movs	r0, #0
 80030b0:	4770      	bx	lr
	...

080030b4 <USB_DevInit>:
{
 80030b4:	b084      	sub	sp, #16
 80030b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ba:	4604      	mov	r4, r0
 80030bc:	a807      	add	r0, sp, #28
 80030be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	e006      	b.n	80030d4 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 80030c6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80030ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80030ce:	2100      	movs	r1, #0
 80030d0:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80030d2:	3301      	adds	r3, #1
 80030d4:	2b0e      	cmp	r3, #14
 80030d6:	d9f6      	bls.n	80030c6 <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 80030d8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80030da:	bb27      	cbnz	r7, 8003126 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030dc:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ee:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80030f6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003106:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 800310a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800310e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003114:	2b01      	cmp	r3, #1
 8003116:	d114      	bne.n	8003142 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8003118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800311a:	b96b      	cbnz	r3, 8003138 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800311c:	2100      	movs	r1, #0
 800311e:	4620      	mov	r0, r4
 8003120:	f7ff ffc0 	bl	80030a4 <USB_SetDevSpeed>
 8003124:	e011      	b.n	800314a <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800312c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800312e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003134:	63a3      	str	r3, [r4, #56]	; 0x38
 8003136:	e7e3      	b.n	8003100 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003138:	2101      	movs	r1, #1
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff ffb2 	bl	80030a4 <USB_SetDevSpeed>
 8003140:	e003      	b.n	800314a <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003142:	2103      	movs	r1, #3
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff ffad 	bl	80030a4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800314a:	2110      	movs	r1, #16
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ff5b 	bl	8003008 <USB_FlushTxFifo>
 8003152:	4680      	mov	r8, r0
 8003154:	b108      	cbz	r0, 800315a <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8003156:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800315a:	4620      	mov	r0, r4
 800315c:	f7ff ff7c 	bl	8003058 <USB_FlushRxFifo>
 8003160:	b108      	cbz	r0, 8003166 <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 8003162:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800316a:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800316c:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800316e:	e00a      	b.n	8003186 <USB_DevInit+0xd2>
      if (i == 0U)
 8003170:	b9c3      	cbnz	r3, 80031a4 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003172:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8003176:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800317a:	2200      	movs	r2, #0
 800317c:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800317e:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8003182:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003184:	3301      	adds	r3, #1
 8003186:	9907      	ldr	r1, [sp, #28]
 8003188:	4299      	cmp	r1, r3
 800318a:	d910      	bls.n	80031ae <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800318c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003190:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8003194:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8003198:	2800      	cmp	r0, #0
 800319a:	dbe9      	blt.n	8003170 <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 800319c:	2000      	movs	r0, #0
 800319e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80031a2:	e7ea      	b.n	800317a <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80031ac:	e7e5      	b.n	800317a <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	e00a      	b.n	80031c8 <USB_DevInit+0x114>
      if (i == 0U)
 80031b2:	b1c3      	cbz	r3, 80031e6 <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031b4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 80031b8:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031bc:	2200      	movs	r2, #0
 80031be:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031c0:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80031c4:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c6:	3301      	adds	r3, #1
 80031c8:	4299      	cmp	r1, r3
 80031ca:	d911      	bls.n	80031f0 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031cc:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 80031d0:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 80031d4:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 80031d8:	2e00      	cmp	r6, #0
 80031da:	dbea      	blt.n	80031b2 <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031dc:	f04f 0c00 	mov.w	ip, #0
 80031e0:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 80031e4:	e7ea      	b.n	80031bc <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031e6:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80031ea:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 80031ee:	e7e5      	b.n	80031bc <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031f0:	692b      	ldr	r3, [r5, #16]
 80031f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f6:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031fc:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8003200:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8003202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003204:	b91b      	cbnz	r3, 800320e <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003206:	69a3      	ldr	r3, [r4, #24]
 8003208:	f043 0310 	orr.w	r3, r3, #16
 800320c:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800320e:	69a2      	ldr	r2, [r4, #24]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <USB_DevInit+0x18c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003218:	b11b      	cbz	r3, 8003222 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800321a:	69a3      	ldr	r3, [r4, #24]
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003222:	2f01      	cmp	r7, #1
 8003224:	d004      	beq.n	8003230 <USB_DevInit+0x17c>
}
 8003226:	4640      	mov	r0, r8
 8003228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800322c:	b004      	add	sp, #16
 800322e:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003230:	69a3      	ldr	r3, [r4, #24]
 8003232:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	61a3      	str	r3, [r4, #24]
 800323c:	e7f3      	b.n	8003226 <USB_DevInit+0x172>
 800323e:	bf00      	nop
 8003240:	803c3800 	.word	0x803c3800

08003244 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003244:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003248:	f013 0306 	ands.w	r3, r3, #6
 800324c:	d007      	beq.n	800325e <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800324e:	2b02      	cmp	r3, #2
 8003250:	d007      	beq.n	8003262 <USB_GetDevSpeed+0x1e>
 8003252:	2b06      	cmp	r3, #6
 8003254:	d001      	beq.n	800325a <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 8003256:	200f      	movs	r0, #15
}
 8003258:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800325a:	2002      	movs	r0, #2
 800325c:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 800325e:	2000      	movs	r0, #0
 8003260:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 8003262:	2002      	movs	r0, #2
 8003264:	4770      	bx	lr

08003266 <USB_ActivateEndpoint>:
{
 8003266:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003268:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800326c:	784b      	ldrb	r3, [r1, #1]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d023      	beq.n	80032ba <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003272:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 8003276:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800327a:	f00c 040f 	and.w	r4, ip, #15
 800327e:	2201      	movs	r2, #1
 8003280:	40a2      	lsls	r2, r4
 8003282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003286:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800328a:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800328e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003292:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003296:	d10e      	bne.n	80032b6 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003298:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800329c:	68ca      	ldr	r2, [r1, #12]
 800329e:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80032a2:	7909      	ldrb	r1, [r1, #4]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032a4:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032ba:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80032be:	f00c 0e0f 	and.w	lr, ip, #15
 80032c2:	fa03 f30e 	lsl.w	r3, r3, lr
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032ce:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 80032d2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80032d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80032da:	d1ec      	bne.n	80032b6 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032dc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80032e0:	68ca      	ldr	r2, [r1, #12]
 80032e2:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032e6:	7909      	ldrb	r1, [r1, #4]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032e8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032ec:	ea42 5c8c 	orr.w	ip, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032f0:	ea43 030c 	orr.w	r3, r3, ip
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003300:	e7d9      	b.n	80032b6 <USB_ActivateEndpoint+0x50>
	...

08003304 <USB_DeactivateEndpoint>:
{
 8003304:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8003306:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003308:	784a      	ldrb	r2, [r1, #1]
 800330a:	2a01      	cmp	r2, #1
 800330c:	d026      	beq.n	800335c <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800330e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003312:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003316:	2a00      	cmp	r2, #0
 8003318:	db52      	blt.n	80033c0 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800331a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800331e:	780a      	ldrb	r2, [r1, #0]
 8003320:	f002 020f 	and.w	r2, r2, #15
 8003324:	f04f 0c01 	mov.w	ip, #1
 8003328:	fa0c f202 	lsl.w	r2, ip, r2
 800332c:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 8003330:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003334:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003338:	7809      	ldrb	r1, [r1, #0]
 800333a:	f001 010f 	and.w	r1, r1, #15
 800333e:	fa0c fc01 	lsl.w	ip, ip, r1
 8003342:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 8003346:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800334a:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800334e:	4a23      	ldr	r2, [pc, #140]	; (80033dc <USB_DeactivateEndpoint+0xd8>)
 8003350:	400a      	ands	r2, r1
 8003352:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003356:	2000      	movs	r0, #0
 8003358:	bc30      	pop	{r4, r5}
 800335a:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800335c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003360:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003364:	2a00      	cmp	r2, #0
 8003366:	db1e      	blt.n	80033a6 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003368:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800336c:	780a      	ldrb	r2, [r1, #0]
 800336e:	f002 020f 	and.w	r2, r2, #15
 8003372:	2401      	movs	r4, #1
 8003374:	fa04 f202 	lsl.w	r2, r4, r2
 8003378:	b292      	uxth	r2, r2
 800337a:	ea25 0202 	bic.w	r2, r5, r2
 800337e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003382:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8003386:	7809      	ldrb	r1, [r1, #0]
 8003388:	f001 010f 	and.w	r1, r1, #15
 800338c:	408c      	lsls	r4, r1
 800338e:	b2a4      	uxth	r4, r4
 8003390:	ea22 0404 	bic.w	r4, r2, r4
 8003394:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003398:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800339c:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <USB_DeactivateEndpoint+0xdc>)
 800339e:	400a      	ands	r2, r1
 80033a0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80033a4:	e7d7      	b.n	8003356 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033a6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80033aa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80033ae:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033b2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80033b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ba:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80033be:	e7d3      	b.n	8003368 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033c0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80033c4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80033c8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033cc:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80033d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033d4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 80033d8:	e79f      	b.n	800331a <USB_DeactivateEndpoint+0x16>
 80033da:	bf00      	nop
 80033dc:	eff37800 	.word	0xeff37800
 80033e0:	ec337800 	.word	0xec337800

080033e4 <USB_EP0StartXfer>:
{
 80033e4:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80033e6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80033e8:	784c      	ldrb	r4, [r1, #1]
 80033ea:	2c01      	cmp	r4, #1
 80033ec:	d029      	beq.n	8003442 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80033ee:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80033f2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80033f6:	691c      	ldr	r4, [r3, #16]
 80033f8:	0ce4      	lsrs	r4, r4, #19
 80033fa:	04e4      	lsls	r4, r4, #19
 80033fc:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80033fe:	691c      	ldr	r4, [r3, #16]
 8003400:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8003404:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003408:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 800340a:	698c      	ldr	r4, [r1, #24]
 800340c:	b10c      	cbz	r4, 8003412 <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800340e:	68cc      	ldr	r4, [r1, #12]
 8003410:	618c      	str	r4, [r1, #24]
    ep->xfer_size = ep->maxpacket;
 8003412:	68cc      	ldr	r4, [r1, #12]
 8003414:	61cc      	str	r4, [r1, #28]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003416:	691c      	ldr	r4, [r3, #16]
 8003418:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800341c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800341e:	691c      	ldr	r4, [r3, #16]
 8003420:	69cd      	ldr	r5, [r1, #28]
 8003422:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 8003426:	ea44 040c 	orr.w	r4, r4, ip
 800342a:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800342c:	2a01      	cmp	r2, #1
 800342e:	d066      	beq.n	80034fe <USB_EP0StartXfer+0x11a>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003430:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003434:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003438:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800343c:	2000      	movs	r0, #0
 800343e:	bc70      	pop	{r4, r5, r6}
 8003440:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8003442:	698c      	ldr	r4, [r1, #24]
 8003444:	bb6c      	cbnz	r4, 80034a2 <USB_EP0StartXfer+0xbe>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003446:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800344a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800344e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003452:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003456:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800345a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800345e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003462:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003466:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800346a:	0ced      	lsrs	r5, r5, #19
 800346c:	04ed      	lsls	r5, r5, #19
 800346e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003472:	2a01      	cmp	r2, #1
 8003474:	d034      	beq.n	80034e0 <USB_EP0StartXfer+0xfc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003476:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800347a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800347e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003482:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003486:	698b      	ldr	r3, [r1, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0d7      	beq.n	800343c <USB_EP0StartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800348c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003490:	780a      	ldrb	r2, [r1, #0]
 8003492:	f002 010f 	and.w	r1, r2, #15
 8003496:	2201      	movs	r2, #1
 8003498:	408a      	lsls	r2, r1
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80034a0:	e7cc      	b.n	800343c <USB_EP0StartXfer+0x58>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034a2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80034a6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 80034aa:	6925      	ldr	r5, [r4, #16]
 80034ac:	0ced      	lsrs	r5, r5, #19
 80034ae:	04ed      	lsls	r5, r5, #19
 80034b0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034b2:	6925      	ldr	r5, [r4, #16]
 80034b4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80034b8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80034bc:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 80034be:	68cd      	ldr	r5, [r1, #12]
 80034c0:	698e      	ldr	r6, [r1, #24]
 80034c2:	42ae      	cmp	r6, r5
 80034c4:	d900      	bls.n	80034c8 <USB_EP0StartXfer+0xe4>
        ep->xfer_len = ep->maxpacket;
 80034c6:	618d      	str	r5, [r1, #24]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034c8:	6925      	ldr	r5, [r4, #16]
 80034ca:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80034ce:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80034d0:	6925      	ldr	r5, [r4, #16]
 80034d2:	698e      	ldr	r6, [r1, #24]
 80034d4:	f3c6 0c12 	ubfx	ip, r6, #0, #19
 80034d8:	ea45 050c 	orr.w	r5, r5, ip
 80034dc:	6125      	str	r5, [r4, #16]
 80034de:	e7c8      	b.n	8003472 <USB_EP0StartXfer+0x8e>
      if ((uint32_t)ep->dma_addr != 0U)
 80034e0:	694a      	ldr	r2, [r1, #20]
 80034e2:	b11a      	cbz	r2, 80034ec <USB_EP0StartXfer+0x108>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034e4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80034e8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80034f0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80034f4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80034f8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 80034fc:	e79e      	b.n	800343c <USB_EP0StartXfer+0x58>
      if ((uint32_t)ep->xfer_buff != 0U)
 80034fe:	690a      	ldr	r2, [r1, #16]
 8003500:	2a00      	cmp	r2, #0
 8003502:	d095      	beq.n	8003430 <USB_EP0StartXfer+0x4c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003504:	615a      	str	r2, [r3, #20]
 8003506:	e793      	b.n	8003430 <USB_EP0StartXfer+0x4c>

08003508 <USB_EPStopXfer>:
{
 8003508:	b410      	push	{r4}
 800350a:	b083      	sub	sp, #12
 800350c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	9301      	str	r3, [sp, #4]
  if (ep->is_in == 1U)
 8003512:	7848      	ldrb	r0, [r1, #1]
 8003514:	2801      	cmp	r0, #1
 8003516:	d00b      	beq.n	8003530 <USB_EPStopXfer+0x28>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003518:	780b      	ldrb	r3, [r1, #0]
 800351a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800351e:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 8003522:	2800      	cmp	r0, #0
 8003524:	db2d      	blt.n	8003582 <USB_EPStopXfer+0x7a>
  HAL_StatusTypeDef ret = HAL_OK;
 8003526:	2000      	movs	r0, #0
}
 8003528:	b003      	add	sp, #12
 800352a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800352e:	4770      	bx	lr
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003530:	780b      	ldrb	r3, [r1, #0]
 8003532:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003536:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 800353a:	2c00      	cmp	r4, #0
 800353c:	db01      	blt.n	8003542 <USB_EPStopXfer+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;
 800353e:	2000      	movs	r0, #0
 8003540:	e7f2      	b.n	8003528 <USB_EPStopXfer+0x20>
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003542:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003546:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 800354a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800354e:	780b      	ldrb	r3, [r1, #0]
 8003550:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003554:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003558:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
 800355c:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        count++;
 8003560:	9b01      	ldr	r3, [sp, #4]
 8003562:	3301      	adds	r3, #1
 8003564:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 8003566:	9c01      	ldr	r4, [sp, #4]
 8003568:	f242 7310 	movw	r3, #10000	; 0x2710
 800356c:	429c      	cmp	r4, r3
 800356e:	d8db      	bhi.n	8003528 <USB_EPStopXfer+0x20>
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003570:	780b      	ldrb	r3, [r1, #0]
 8003572:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003576:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800357a:	2b00      	cmp	r3, #0
 800357c:	dbf0      	blt.n	8003560 <USB_EPStopXfer+0x58>
  HAL_StatusTypeDef ret = HAL_OK;
 800357e:	2000      	movs	r0, #0
 8003580:	e7d2      	b.n	8003528 <USB_EPStopXfer+0x20>
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003582:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 8003586:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
 800358a:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800358e:	780b      	ldrb	r3, [r1, #0]
 8003590:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003594:	f8d3 0b00 	ldr.w	r0, [r3, #2816]	; 0xb00
 8003598:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800359c:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
        count++;
 80035a0:	9b01      	ldr	r3, [sp, #4]
 80035a2:	3301      	adds	r3, #1
 80035a4:	9301      	str	r3, [sp, #4]
        if (count > 10000U)
 80035a6:	9801      	ldr	r0, [sp, #4]
 80035a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80035ac:	4298      	cmp	r0, r3
 80035ae:	d808      	bhi.n	80035c2 <USB_EPStopXfer+0xba>
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80035b0:	780b      	ldrb	r3, [r1, #0]
 80035b2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80035b6:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	dbf0      	blt.n	80035a0 <USB_EPStopXfer+0x98>
  HAL_StatusTypeDef ret = HAL_OK;
 80035be:	2000      	movs	r0, #0
 80035c0:	e7b2      	b.n	8003528 <USB_EPStopXfer+0x20>
          ret = HAL_ERROR;
 80035c2:	2001      	movs	r0, #1
 80035c4:	e7b0      	b.n	8003528 <USB_EPStopXfer+0x20>

080035c6 <USB_WritePacket>:
{
 80035c6:	b510      	push	{r4, lr}
 80035c8:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80035cc:	b984      	cbnz	r4, 80035f0 <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80035ce:	3303      	adds	r3, #3
 80035d0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80035d4:	f04f 0c00 	mov.w	ip, #0
 80035d8:	e008      	b.n	80035ec <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80035da:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	f851 4b04 	ldr.w	r4, [r1], #4
 80035e6:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80035e8:	f10c 0c01 	add.w	ip, ip, #1
 80035ec:	45f4      	cmp	ip, lr
 80035ee:	d3f4      	bcc.n	80035da <USB_WritePacket+0x14>
}
 80035f0:	2000      	movs	r0, #0
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <USB_EPStartXfer>:
{
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80035f8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80035fa:	784c      	ldrb	r4, [r1, #1]
 80035fc:	2c01      	cmp	r4, #1
 80035fe:	d033      	beq.n	8003668 <USB_EPStartXfer+0x74>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003600:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8003604:	f503 6c30 	add.w	ip, r3, #2816	; 0xb00
 8003608:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800360c:	0ce4      	lsrs	r4, r4, #19
 800360e:	04e4      	lsls	r4, r4, #19
 8003610:	f8cc 4010 	str.w	r4, [ip, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003614:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003618:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800361c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8003620:	f8cc 4010 	str.w	r4, [ip, #16]
    if (ep->xfer_len == 0U)
 8003624:	698c      	ldr	r4, [r1, #24]
 8003626:	2c00      	cmp	r4, #0
 8003628:	f040 80c7 	bne.w	80037ba <USB_EPStartXfer+0x1c6>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800362c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003630:	68cd      	ldr	r5, [r1, #12]
 8003632:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003636:	432c      	orrs	r4, r5
 8003638:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800363c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8003640:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003644:	f8cc 4010 	str.w	r4, [ip, #16]
    if (dma == 1U)
 8003648:	2a01      	cmp	r2, #1
 800364a:	f000 80d0 	beq.w	80037ee <USB_EPStartXfer+0x1fa>
    if (ep->type == EP_TYPE_ISOC)
 800364e:	790a      	ldrb	r2, [r1, #4]
 8003650:	2a01      	cmp	r2, #1
 8003652:	f000 80d3 	beq.w	80037fc <USB_EPStartXfer+0x208>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003656:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800365a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800365e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8003662:	2000      	movs	r0, #0
 8003664:	b003      	add	sp, #12
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8003668:	698c      	ldr	r4, [r1, #24]
 800366a:	bb84      	cbnz	r4, 80036ce <USB_EPStartXfer+0xda>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800366c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8003670:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003674:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003678:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800367c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003680:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003684:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003688:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800368c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8003690:	0ced      	lsrs	r5, r5, #19
 8003692:	04ed      	lsls	r5, r5, #19
 8003694:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8003698:	2a01      	cmp	r2, #1
 800369a:	d04c      	beq.n	8003736 <USB_EPStartXfer+0x142>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800369c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80036a0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80036a4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80036a8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80036ac:	790c      	ldrb	r4, [r1, #4]
 80036ae:	2c01      	cmp	r4, #1
 80036b0:	d06a      	beq.n	8003788 <USB_EPStartXfer+0x194>
        if (ep->xfer_len > 0U)
 80036b2:	698b      	ldr	r3, [r1, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0d4      	beq.n	8003662 <USB_EPStartXfer+0x6e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80036b8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80036bc:	780a      	ldrb	r2, [r1, #0]
 80036be:	f002 010f 	and.w	r1, r2, #15
 80036c2:	2201      	movs	r2, #1
 80036c4:	408a      	lsls	r2, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80036cc:	e7c9      	b.n	8003662 <USB_EPStartXfer+0x6e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036ce:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80036d2:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80036d6:	0ced      	lsrs	r5, r5, #19
 80036d8:	04ed      	lsls	r5, r5, #19
 80036da:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036de:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80036e2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80036e6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80036ea:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036ee:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80036f2:	698d      	ldr	r5, [r1, #24]
 80036f4:	68cf      	ldr	r7, [r1, #12]
 80036f6:	443d      	add	r5, r7
 80036f8:	3d01      	subs	r5, #1
 80036fa:	fbb5 f5f7 	udiv	r5, r5, r7
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036fe:	4f49      	ldr	r7, [pc, #292]	; (8003824 <USB_EPStartXfer+0x230>)
 8003700:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8003704:	4335      	orrs	r5, r6
 8003706:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800370a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800370e:	698e      	ldr	r6, [r1, #24]
 8003710:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003714:	4335      	orrs	r5, r6
 8003716:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800371a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800371e:	790d      	ldrb	r5, [r1, #4]
 8003720:	2d01      	cmp	r5, #1
 8003722:	d1b9      	bne.n	8003698 <USB_EPStartXfer+0xa4>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003724:	6925      	ldr	r5, [r4, #16]
 8003726:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 800372a:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800372c:	6925      	ldr	r5, [r4, #16]
 800372e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003732:	6125      	str	r5, [r4, #16]
 8003734:	e7b0      	b.n	8003698 <USB_EPStartXfer+0xa4>
      if ((uint32_t)ep->dma_addr != 0U)
 8003736:	694a      	ldr	r2, [r1, #20]
 8003738:	b11a      	cbz	r2, 8003742 <USB_EPStartXfer+0x14e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800373a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800373e:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8003742:	790a      	ldrb	r2, [r1, #4]
 8003744:	2a01      	cmp	r2, #1
 8003746:	d008      	beq.n	800375a <USB_EPStartXfer+0x166>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003748:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800374c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8003750:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003754:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8003758:	e783      	b.n	8003662 <USB_EPStartXfer+0x6e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800375a:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800375e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003762:	d108      	bne.n	8003776 <USB_EPStartXfer+0x182>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003764:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8003768:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800376c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003770:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003774:	e7e8      	b.n	8003748 <USB_EPStartXfer+0x154>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003776:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800377a:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 800377e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003782:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8003786:	e7df      	b.n	8003748 <USB_EPStartXfer+0x154>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003788:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800378c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003790:	d10c      	bne.n	80037ac <USB_EPStartXfer+0x1b8>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003792:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8003796:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800379a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800379e:	9200      	str	r2, [sp, #0]
 80037a0:	8b0b      	ldrh	r3, [r1, #24]
 80037a2:	780a      	ldrb	r2, [r1, #0]
 80037a4:	6909      	ldr	r1, [r1, #16]
 80037a6:	f7ff ff0e 	bl	80035c6 <USB_WritePacket>
 80037aa:	e75a      	b.n	8003662 <USB_EPStartXfer+0x6e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 80037b0:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80037b4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 80037b8:	e7f1      	b.n	800379e <USB_EPStartXfer+0x1aa>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037ba:	68cd      	ldr	r5, [r1, #12]
 80037bc:	442c      	add	r4, r5
 80037be:	3c01      	subs	r4, #1
 80037c0:	fbb4 f4f5 	udiv	r4, r4, r5
      ep->xfer_size = ep->maxpacket * pktcnt;
 80037c4:	b2a4      	uxth	r4, r4
 80037c6:	fb04 f505 	mul.w	r5, r4, r5
 80037ca:	61cd      	str	r5, [r1, #28]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80037cc:	f8dc 5010 	ldr.w	r5, [ip, #16]
 80037d0:	4e14      	ldr	r6, [pc, #80]	; (8003824 <USB_EPStartXfer+0x230>)
 80037d2:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 80037d6:	432c      	orrs	r4, r5
 80037d8:	f8cc 4010 	str.w	r4, [ip, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80037dc:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80037e0:	69cd      	ldr	r5, [r1, #28]
 80037e2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80037e6:	432c      	orrs	r4, r5
 80037e8:	f8cc 4010 	str.w	r4, [ip, #16]
 80037ec:	e72c      	b.n	8003648 <USB_EPStartXfer+0x54>
      if ((uint32_t)ep->xfer_buff != 0U)
 80037ee:	690a      	ldr	r2, [r1, #16]
 80037f0:	2a00      	cmp	r2, #0
 80037f2:	f43f af2c 	beq.w	800364e <USB_EPStartXfer+0x5a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037f6:	f8cc 2014 	str.w	r2, [ip, #20]
 80037fa:	e728      	b.n	800364e <USB_EPStartXfer+0x5a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037fc:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8003800:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003804:	d106      	bne.n	8003814 <USB_EPStartXfer+0x220>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003806:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800380a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800380e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003812:	e720      	b.n	8003656 <USB_EPStartXfer+0x62>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003814:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8003818:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800381c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003820:	e719      	b.n	8003656 <USB_EPStartXfer+0x62>
 8003822:	bf00      	nop
 8003824:	1ff80000 	.word	0x1ff80000

08003828 <USB_ReadPacket>:
{
 8003828:	b500      	push	{lr}
 800382a:	b083      	sub	sp, #12
 800382c:	4684      	mov	ip, r0
 800382e:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003830:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003834:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	e005      	b.n	8003848 <USB_ReadPacket+0x20>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800383c:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8003840:	6809      	ldr	r1, [r1, #0]
 8003842:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 8003846:	3301      	adds	r3, #1
 8003848:	4573      	cmp	r3, lr
 800384a:	d3f7      	bcc.n	800383c <USB_ReadPacket+0x14>
  if (remaining_bytes != 0U)
 800384c:	b19a      	cbz	r2, 8003876 <USB_ReadPacket+0x4e>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800384e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8003852:	f8dc 3000 	ldr.w	r3, [ip]
 8003856:	9301      	str	r3, [sp, #4]
    i = 0U;
 8003858:	f04f 0c00 	mov.w	ip, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800385c:	fa5f f38c 	uxtb.w	r3, ip
 8003860:	00d9      	lsls	r1, r3, #3
 8003862:	9b01      	ldr	r3, [sp, #4]
 8003864:	40cb      	lsrs	r3, r1
 8003866:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 800386a:	f10c 0c01 	add.w	ip, ip, #1
      remaining_bytes--;
 800386e:	3a01      	subs	r2, #1
 8003870:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 8003872:	2a00      	cmp	r2, #0
 8003874:	d1f2      	bne.n	800385c <USB_ReadPacket+0x34>
}
 8003876:	b003      	add	sp, #12
 8003878:	f85d fb04 	ldr.w	pc, [sp], #4

0800387c <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800387c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800387e:	784a      	ldrb	r2, [r1, #1]
 8003880:	2a01      	cmp	r2, #1
 8003882:	d014      	beq.n	80038ae <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003884:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003888:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800388c:	2a00      	cmp	r2, #0
 800388e:	db06      	blt.n	800389e <USB_EPSetStall+0x22>
 8003890:	b12b      	cbz	r3, 800389e <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003892:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800389a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800389e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80038a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80038aa:	2000      	movs	r0, #0
 80038ac:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80038ae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80038b2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80038b6:	2a00      	cmp	r2, #0
 80038b8:	db06      	blt.n	80038c8 <USB_EPSetStall+0x4c>
 80038ba:	b12b      	cbz	r3, 80038c8 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80038bc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80038c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038c4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80038c8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80038cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038d0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80038d4:	e7e9      	b.n	80038aa <USB_EPSetStall+0x2e>

080038d6 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80038d6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80038d8:	784a      	ldrb	r2, [r1, #1]
 80038da:	2a01      	cmp	r2, #1
 80038dc:	d00e      	beq.n	80038fc <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80038e2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80038e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ea:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80038ee:	790b      	ldrb	r3, [r1, #4]
 80038f0:	3b02      	subs	r3, #2
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d915      	bls.n	8003924 <USB_EPClearStall+0x4e>
}
 80038f8:	2000      	movs	r0, #0
 80038fa:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003900:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003908:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800390c:	790b      	ldrb	r3, [r1, #4]
 800390e:	3b02      	subs	r3, #2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d8f0      	bhi.n	80038f8 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003916:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8003922:	e7e9      	b.n	80038f8 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003924:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003930:	e7e2      	b.n	80038f8 <USB_EPClearStall+0x22>

08003932 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003932:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800393a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800393e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003942:	0109      	lsls	r1, r1, #4
 8003944:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003948:	4319      	orrs	r1, r3
 800394a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800394e:	2000      	movs	r0, #0
 8003950:	4770      	bx	lr

08003952 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003952:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800395e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003962:	f023 0302 	bic.w	r3, r3, #2
 8003966:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800396a:	2000      	movs	r0, #0
 800396c:	4770      	bx	lr

0800396e <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800396e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800397a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003986:	2000      	movs	r0, #0
 8003988:	4770      	bx	lr

0800398a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800398a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800398c:	6980      	ldr	r0, [r0, #24]
}
 800398e:	4010      	ands	r0, r2
 8003990:	4770      	bx	lr

08003992 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003992:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003996:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800399a:	69c0      	ldr	r0, [r0, #28]
 800399c:	4018      	ands	r0, r3
}
 800399e:	0c00      	lsrs	r0, r0, #16
 80039a0:	4770      	bx	lr

080039a2 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80039a2:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80039a6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80039aa:	69c0      	ldr	r0, [r0, #28]
 80039ac:	4018      	ands	r0, r3
}
 80039ae:	b280      	uxth	r0, r0
 80039b0:	4770      	bx	lr

080039b2 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80039b2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80039b6:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80039ba:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80039be:	6940      	ldr	r0, [r0, #20]
}
 80039c0:	4010      	ands	r0, r2
 80039c2:	4770      	bx	lr

080039c4 <USB_ReadDevInEPInterrupt>:
{
 80039c4:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80039c6:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80039ca:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80039ce:	f001 020f 	and.w	r2, r1, #15
 80039d2:	40d3      	lsrs	r3, r2
 80039d4:	01db      	lsls	r3, r3, #7
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80039da:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80039de:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80039e2:	6880      	ldr	r0, [r0, #8]
}
 80039e4:	4018      	ands	r0, r3
 80039e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80039ec:	6940      	ldr	r0, [r0, #20]
}
 80039ee:	f000 0001 	and.w	r0, r0, #1
 80039f2:	4770      	bx	lr

080039f4 <USB_SetCurrentMode>:
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039f8:	68c3      	ldr	r3, [r0, #12]
 80039fa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80039fe:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a00:	2901      	cmp	r1, #1
 8003a02:	d013      	beq.n	8003a2c <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003a04:	bb19      	cbnz	r1, 8003a4e <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a06:	68c3      	ldr	r3, [r0, #12]
 8003a08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a0c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a0e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003a10:	2001      	movs	r0, #1
 8003a12:	f7fd fab5 	bl	8000f80 <HAL_Delay>
      ms++;
 8003a16:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7ff ffe7 	bl	80039ec <USB_GetMode>
 8003a1e:	b108      	cbz	r0, 8003a24 <USB_SetCurrentMode+0x30>
 8003a20:	2c31      	cmp	r4, #49	; 0x31
 8003a22:	d9f5      	bls.n	8003a10 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003a24:	2c32      	cmp	r4, #50	; 0x32
 8003a26:	d014      	beq.n	8003a52 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003a28:	2000      	movs	r0, #0
}
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a2c:	68c3      	ldr	r3, [r0, #12]
 8003a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a32:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a34:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003a36:	2001      	movs	r0, #1
 8003a38:	f7fd faa2 	bl	8000f80 <HAL_Delay>
      ms++;
 8003a3c:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff ffd4 	bl	80039ec <USB_GetMode>
 8003a44:	2801      	cmp	r0, #1
 8003a46:	d0ed      	beq.n	8003a24 <USB_SetCurrentMode+0x30>
 8003a48:	2c31      	cmp	r4, #49	; 0x31
 8003a4a:	d9f4      	bls.n	8003a36 <USB_SetCurrentMode+0x42>
 8003a4c:	e7ea      	b.n	8003a24 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e7eb      	b.n	8003a2a <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
 8003a54:	e7e9      	b.n	8003a2a <USB_SetCurrentMode+0x36>

08003a56 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003a56:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003a5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a5e:	f023 0307 	bic.w	r3, r3, #7
 8003a62:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003a66:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003a72:	2000      	movs	r0, #0
 8003a74:	4770      	bx	lr
	...

08003a78 <USB_EP0_OutStart>:
{
 8003a78:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a7a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <USB_EP0_OutStart+0x5c>)
 8003a7e:	429c      	cmp	r4, r3
 8003a80:	d903      	bls.n	8003a8a <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a82:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db16      	blt.n	8003ab8 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003a8a:	2400      	movs	r4, #0
 8003a8c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a90:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003a94:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003a98:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003a9c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003aa0:	f044 0418 	orr.w	r4, r4, #24
 8003aa4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003aa8:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003aac:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003ab0:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8003ab4:	2901      	cmp	r1, #1
 8003ab6:	d003      	beq.n	8003ac0 <USB_EP0_OutStart+0x48>
}
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003abe:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003ac0:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003ac4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003ac8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003acc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003ad0:	e7f2      	b.n	8003ab8 <USB_EP0_OutStart+0x40>
 8003ad2:	bf00      	nop
 8003ad4:	4f54300a 	.word	0x4f54300a

08003ad8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003ad8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003ada:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003ade:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003ae2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

  if (hcdc == NULL)
 8003ae6:	b18c      	cbz	r4, 8003b0c <USBD_CDC_EP0_RxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ae8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003aec:	6843      	ldr	r3, [r0, #4]
 8003aee:	b17b      	cbz	r3, 8003b10 <USBD_CDC_EP0_RxReady+0x38>
 8003af0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003af4:	28ff      	cmp	r0, #255	; 0xff
 8003af6:	d00d      	beq.n	8003b14 <USBD_CDC_EP0_RxReady+0x3c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003afe:	4621      	mov	r1, r4
 8003b00:	4798      	blx	r3
                                                                     (uint8_t *)hcdc->data,
                                                                     (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8003b02:	23ff      	movs	r3, #255	; 0xff
 8003b04:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8003b08:	2000      	movs	r0, #0
}
 8003b0a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	e7fc      	b.n	8003b0a <USBD_CDC_EP0_RxReady+0x32>
  return (uint8_t)USBD_OK;
 8003b10:	2000      	movs	r0, #0
 8003b12:	e7fa      	b.n	8003b0a <USBD_CDC_EP0_RxReady+0x32>
 8003b14:	2000      	movs	r0, #0
 8003b16:	e7f8      	b.n	8003b0a <USBD_CDC_EP0_RxReady+0x32>

08003b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8003b18:	230a      	movs	r3, #10
 8003b1a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8003b1c:	4800      	ldr	r0, [pc, #0]	; (8003b20 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003b1e:	4770      	bx	lr
 8003b20:	20000128 	.word	0x20000128

08003b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
{
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003b28:	4f0f      	ldr	r7, [pc, #60]	; (8003b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003b2a:	2182      	movs	r1, #130	; 0x82
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f000 fc1f 	bl	8004370 <USBD_GetEpDesc>
 8003b32:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003b34:	2101      	movs	r1, #1
 8003b36:	4638      	mov	r0, r7
 8003b38:	f000 fc1a 	bl	8004370 <USBD_GetEpDesc>
 8003b3c:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003b3e:	2181      	movs	r1, #129	; 0x81
 8003b40:	4638      	mov	r0, r7
 8003b42:	f000 fc15 	bl	8004370 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003b46:	b10d      	cbz	r5, 8003b4c <USBD_CDC_GetOtherSpeedCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003b48:	2210      	movs	r2, #16
 8003b4a:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003b4c:	b11c      	cbz	r4, 8003b56 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003b4e:	2240      	movs	r2, #64	; 0x40
 8003b50:	7122      	strb	r2, [r4, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003b56:	b118      	cbz	r0, 8003b60 <USBD_CDC_GetOtherSpeedCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003b58:	2240      	movs	r2, #64	; 0x40
 8003b5a:	7102      	strb	r2, [r0, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003b60:	2343      	movs	r3, #67	; 0x43
 8003b62:	8033      	strh	r3, [r6, #0]
}
 8003b64:	4800      	ldr	r0, [pc, #0]	; (8003b68 <USBD_CDC_GetOtherSpeedCfgDesc+0x44>)
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b68:	200000e4 	.word	0x200000e4

08003b6c <USBD_CDC_GetFSCfgDesc>:
{
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003b70:	4f0f      	ldr	r7, [pc, #60]	; (8003bb0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003b72:	2182      	movs	r1, #130	; 0x82
 8003b74:	4638      	mov	r0, r7
 8003b76:	f000 fbfb 	bl	8004370 <USBD_GetEpDesc>
 8003b7a:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f000 fbf6 	bl	8004370 <USBD_GetEpDesc>
 8003b84:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003b86:	2181      	movs	r1, #129	; 0x81
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f000 fbf1 	bl	8004370 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003b8e:	b10d      	cbz	r5, 8003b94 <USBD_CDC_GetFSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8003b90:	2210      	movs	r2, #16
 8003b92:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003b94:	b11c      	cbz	r4, 8003b9e <USBD_CDC_GetFSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	7122      	strb	r2, [r4, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003b9e:	b118      	cbz	r0, 8003ba8 <USBD_CDC_GetFSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8003ba0:	2240      	movs	r2, #64	; 0x40
 8003ba2:	7102      	strb	r2, [r0, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003ba8:	2343      	movs	r3, #67	; 0x43
 8003baa:	8033      	strh	r3, [r6, #0]
}
 8003bac:	4800      	ldr	r0, [pc, #0]	; (8003bb0 <USBD_CDC_GetFSCfgDesc+0x44>)
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	200000e4 	.word	0x200000e4

08003bb4 <USBD_CDC_GetHSCfgDesc>:
{
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	4606      	mov	r6, r0
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8003bb8:	4f0f      	ldr	r7, [pc, #60]	; (8003bf8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003bba:	2182      	movs	r1, #130	; 0x82
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f000 fbd7 	bl	8004370 <USBD_GetEpDesc>
 8003bc2:	4605      	mov	r5, r0
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	f000 fbd2 	bl	8004370 <USBD_GetEpDesc>
 8003bcc:	4604      	mov	r4, r0
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8003bce:	2181      	movs	r1, #129	; 0x81
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f000 fbcd 	bl	8004370 <USBD_GetEpDesc>
  if (pEpCmdDesc != NULL)
 8003bd6:	b10d      	cbz	r5, 8003bdc <USBD_CDC_GetHSCfgDesc+0x28>
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8003bd8:	2210      	movs	r2, #16
 8003bda:	71aa      	strb	r2, [r5, #6]
  if (pEpOutDesc != NULL)
 8003bdc:	b11c      	cbz	r4, 8003be6 <USBD_CDC_GetHSCfgDesc+0x32>
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003bde:	2200      	movs	r2, #0
 8003be0:	7122      	strb	r2, [r4, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	7162      	strb	r2, [r4, #5]
  if (pEpInDesc != NULL)
 8003be6:	b118      	cbz	r0, 8003bf0 <USBD_CDC_GetHSCfgDesc+0x3c>
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8003be8:	2200      	movs	r2, #0
 8003bea:	7102      	strb	r2, [r0, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	7142      	strb	r2, [r0, #5]
  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8003bf0:	2343      	movs	r3, #67	; 0x43
 8003bf2:	8033      	strh	r3, [r6, #0]
}
 8003bf4:	4800      	ldr	r0, [pc, #0]	; (8003bf8 <USBD_CDC_GetHSCfgDesc+0x44>)
 8003bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf8:	200000e4 	.word	0x200000e4

08003bfc <USBD_CDC_DataOut>:
{
 8003bfc:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003bfe:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c02:	33b0      	adds	r3, #176	; 0xb0
 8003c04:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003c08:	b195      	cbz	r5, 8003c30 <USBD_CDC_DataOut+0x34>
 8003c0a:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003c0c:	f001 f989 	bl	8004f22 <USBD_LL_GetRxDataSize>
 8003c10:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003c14:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003c18:	33b0      	adds	r3, #176	; 0xb0
 8003c1a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003c1e:	6863      	ldr	r3, [r4, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8003c26:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8003c2a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003c2c:	2000      	movs	r0, #0
}
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8003c30:	2003      	movs	r0, #3
 8003c32:	e7fc      	b.n	8003c2e <USBD_CDC_DataOut+0x32>

08003c34 <USBD_CDC_DataIn>:
{
 8003c34:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8003c36:	f8d0 52c8 	ldr.w	r5, [r0, #712]	; 0x2c8
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003c3a:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c3e:	33b0      	adds	r3, #176	; 0xb0
 8003c40:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8003c44:	b384      	cbz	r4, 8003ca8 <USBD_CDC_DataIn+0x74>
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003c46:	f001 030f 	and.w	r3, r1, #15
 8003c4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003c4e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003c52:	6992      	ldr	r2, [r2, #24]
 8003c54:	b14a      	cbz	r2, 8003c6a <USBD_CDC_DataIn+0x36>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8003c56:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 8003c5a:	eb05 058c 	add.w	r5, r5, ip, lsl #2
 8003c5e:	6cad      	ldr	r5, [r5, #72]	; 0x48
 8003c60:	fbb2 fcf5 	udiv	ip, r2, r5
 8003c64:	fb05 221c 	mls	r2, r5, ip, r2
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8003c68:	b192      	cbz	r2, 8003c90 <USBD_CDC_DataIn+0x5c>
    hcdc->TxState = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8003c70:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003c74:	33b0      	adds	r3, #176	; 0xb0
 8003c76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003c7a:	6843      	ldr	r3, [r0, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	b1ab      	cbz	r3, 8003cac <USBD_CDC_DataIn+0x78>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8003c80:	460a      	mov	r2, r1
 8003c82:	f504 7104 	add.w	r1, r4, #528	; 0x210
 8003c86:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8003c8a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8003c8c:	2000      	movs	r0, #0
}
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8003c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003c98:	2400      	movs	r4, #0
 8003c9a:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003c9c:	4623      	mov	r3, r4
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	f001 f988 	bl	8004fb4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8003ca4:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003ca6:	e7f2      	b.n	8003c8e <USBD_CDC_DataIn+0x5a>
    return (uint8_t)USBD_FAIL;
 8003ca8:	2003      	movs	r0, #3
 8003caa:	e7f0      	b.n	8003c8e <USBD_CDC_DataIn+0x5a>
  return (uint8_t)USBD_OK;
 8003cac:	2000      	movs	r0, #0
 8003cae:	e7ee      	b.n	8003c8e <USBD_CDC_DataIn+0x5a>

08003cb0 <USBD_CDC_Setup>:
{
 8003cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb2:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003cb4:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003cb8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003cbc:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  uint8_t ifalt = 0U;
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f88d 2007 	strb.w	r2, [sp, #7]
  uint16_t status_info = 0U;
 8003cc6:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (hcdc == NULL)
 8003cca:	2f00      	cmp	r7, #0
 8003ccc:	d07b      	beq.n	8003dc6 <USBD_CDC_Setup+0x116>
 8003cce:	4604      	mov	r4, r0
 8003cd0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cd2:	7809      	ldrb	r1, [r1, #0]
 8003cd4:	f011 0660 	ands.w	r6, r1, #96	; 0x60
 8003cd8:	d034      	beq.n	8003d44 <USBD_CDC_Setup+0x94>
 8003cda:	2e20      	cmp	r6, #32
 8003cdc:	d16c      	bne.n	8003db8 <USBD_CDC_Setup+0x108>
      if (req->wLength != 0U)
 8003cde:	88ea      	ldrh	r2, [r5, #6]
 8003ce0:	b32a      	cbz	r2, 8003d2e <USBD_CDC_Setup+0x7e>
        if ((req->bmRequest & 0x80U) != 0U)
 8003ce2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ce6:	d107      	bne.n	8003cf8 <USBD_CDC_Setup+0x48>
          hcdc->CmdOpCode = req->bRequest;
 8003ce8:	786b      	ldrb	r3, [r5, #1]
 8003cea:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003cee:	88ea      	ldrh	r2, [r5, #6]
 8003cf0:	2a3f      	cmp	r2, #63	; 0x3f
 8003cf2:	d813      	bhi.n	8003d1c <USBD_CDC_Setup+0x6c>
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	e012      	b.n	8003d1e <USBD_CDC_Setup+0x6e>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003cf8:	33b0      	adds	r3, #176	; 0xb0
 8003cfa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	4639      	mov	r1, r7
 8003d04:	7868      	ldrb	r0, [r5, #1]
 8003d06:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8003d08:	88ea      	ldrh	r2, [r5, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8003d0a:	2a07      	cmp	r2, #7
 8003d0c:	bf28      	it	cs
 8003d0e:	2207      	movcs	r2, #7
 8003d10:	4639      	mov	r1, r7
 8003d12:	4620      	mov	r0, r4
 8003d14:	f000 fedc 	bl	8004ad0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003d18:	2600      	movs	r6, #0
 8003d1a:	e051      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8003d22:	4639      	mov	r1, r7
 8003d24:	4620      	mov	r0, r4
 8003d26:	f000 fee8 	bl	8004afa <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	e048      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8003d2e:	33b0      	adds	r3, #176	; 0xb0
 8003d30:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	7868      	ldrb	r0, [r5, #1]
 8003d3e:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003d40:	2600      	movs	r6, #0
 8003d42:	e03d      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
      switch (req->bRequest)
 8003d44:	786f      	ldrb	r7, [r5, #1]
 8003d46:	2f0b      	cmp	r7, #11
 8003d48:	d831      	bhi.n	8003dae <USBD_CDC_Setup+0xfe>
 8003d4a:	e8df f007 	tbb	[pc, r7]
 8003d4e:	3906      	.short	0x3906
 8003d50:	30303030 	.word	0x30303030
 8003d54:	30303030 	.word	0x30303030
 8003d58:	2616      	.short	0x2616
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d004      	beq.n	8003d6e <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 8003d64:	4629      	mov	r1, r5
 8003d66:	f000 fb40 	bl	80043ea <USBD_CtlError>
            ret = USBD_FAIL;
 8003d6a:	2603      	movs	r6, #3
 8003d6c:	e028      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003d6e:	2202      	movs	r2, #2
 8003d70:	a901      	add	r1, sp, #4
 8003d72:	f000 fead 	bl	8004ad0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003d76:	463e      	mov	r6, r7
 8003d78:	e022      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d004      	beq.n	8003d8e <USBD_CDC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8003d84:	4629      	mov	r1, r5
 8003d86:	f000 fb30 	bl	80043ea <USBD_CtlError>
            ret = USBD_FAIL;
 8003d8a:	2603      	movs	r6, #3
 8003d8c:	e018      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f10d 0107 	add.w	r1, sp, #7
 8003d94:	f000 fe9c 	bl	8004ad0 <USBD_CtlSendData>
 8003d98:	e012      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003d9a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d00d      	beq.n	8003dc0 <USBD_CDC_Setup+0x110>
            USBD_CtlError(pdev, req);
 8003da4:	4629      	mov	r1, r5
 8003da6:	f000 fb20 	bl	80043ea <USBD_CtlError>
            ret = USBD_FAIL;
 8003daa:	2603      	movs	r6, #3
 8003dac:	e008      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
          USBD_CtlError(pdev, req);
 8003dae:	4629      	mov	r1, r5
 8003db0:	f000 fb1b 	bl	80043ea <USBD_CtlError>
          ret = USBD_FAIL;
 8003db4:	2603      	movs	r6, #3
          break;
 8003db6:	e003      	b.n	8003dc0 <USBD_CDC_Setup+0x110>
      USBD_CtlError(pdev, req);
 8003db8:	4629      	mov	r1, r5
 8003dba:	f000 fb16 	bl	80043ea <USBD_CtlError>
      ret = USBD_FAIL;
 8003dbe:	2603      	movs	r6, #3
}
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	b003      	add	sp, #12
 8003dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8003dc6:	2603      	movs	r6, #3
 8003dc8:	e7fa      	b.n	8003dc0 <USBD_CDC_Setup+0x110>

08003dca <USBD_CDC_DeInit>:
{
 8003dca:	b538      	push	{r3, r4, r5, lr}
 8003dcc:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8003dce:	2181      	movs	r1, #129	; 0x81
 8003dd0:	f001 f8d0 	bl	8004f74 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f001 f8ca 	bl	8004f74 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8003de0:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8003de4:	2182      	movs	r1, #130	; 0x82
 8003de6:	4620      	mov	r0, r4
 8003de8:	f001 f8c4 	bl	8004f74 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8003dec:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8003df0:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8003df4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003df8:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003dfc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e00:	b19a      	cbz	r2, 8003e2a <USBD_CDC_DeInit+0x60>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8003e02:	33b0      	adds	r3, #176	; 0xb0
 8003e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8003e0e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003e12:	33b0      	adds	r3, #176	; 0xb0
 8003e14:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8003e18:	f001 f88e 	bl	8004f38 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003e1c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003e20:	33b0      	adds	r3, #176	; 0xb0
 8003e22:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    pdev->pClassData = NULL;
 8003e26:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	bd38      	pop	{r3, r4, r5, pc}

08003e2e <USBD_CDC_Init>:
{
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	4604      	mov	r4, r0
  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003e32:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003e36:	f001 f87b 	bl	8004f30 <USBD_static_malloc>
  if (hcdc == NULL)
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	d049      	beq.n	8003ed2 <USBD_CDC_Init+0xa4>
 8003e3e:	4605      	mov	r5, r0
  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8003e40:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003e44:	2100      	movs	r1, #0
 8003e46:	f001 f8ef 	bl	8005028 <memset>
  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8003e4a:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003e4e:	33b0      	adds	r3, #176	; 0xb0
 8003e50:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8003e54:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003e58:	7c23      	ldrb	r3, [r4, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d141      	bne.n	8003ee2 <USBD_CDC_Init+0xb4>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e62:	2202      	movs	r2, #2
 8003e64:	2181      	movs	r1, #129	; 0x81
 8003e66:	4620      	mov	r0, r4
 8003e68:	f001 f879 	bl	8004f5e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003e6c:	2601      	movs	r6, #1
 8003e6e:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e74:	2202      	movs	r2, #2
 8003e76:	4631      	mov	r1, r6
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f001 f870 	bl	8004f5e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003e7e:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003e82:	2310      	movs	r3, #16
 8003e84:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003e88:	2308      	movs	r3, #8
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	2182      	movs	r1, #130	; 0x82
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f001 f865 	bl	8004f5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  hcdc->RxBuffer = NULL;
 8003e9a:	2600      	movs	r6, #0
 8003e9c:	f8c5 6204 	str.w	r6, [r5, #516]	; 0x204
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8003ea0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003ea4:	33b0      	adds	r3, #176	; 0xb0
 8003ea6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4798      	blx	r3
  hcdc->TxState = 0U;
 8003eb0:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8003eb4:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
  if (hcdc->RxBuffer == NULL)
 8003eb8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8003ebc:	b362      	cbz	r2, 8003f18 <USBD_CDC_Init+0xea>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ebe:	7c25      	ldrb	r5, [r4, #16]
 8003ec0:	bb1d      	cbnz	r5, 8003f0a <USBD_CDC_Init+0xdc>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f001 f87b 	bl	8004fc4 <USBD_LL_PrepareReceive>
}
 8003ece:	4628      	mov	r0, r5
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8003ed2:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8003ed6:	33b0      	adds	r3, #176	; 0xb0
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    return (uint8_t)USBD_EMEM;
 8003ede:	2502      	movs	r5, #2
 8003ee0:	e7f5      	b.n	8003ece <USBD_CDC_Init+0xa0>
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	2181      	movs	r1, #129	; 0x81
 8003ee8:	4620      	mov	r0, r4
 8003eea:	f001 f838 	bl	8004f5e <USBD_LL_OpenEP>
    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8003eee:	2601      	movs	r6, #1
 8003ef0:	8726      	strh	r6, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8003ef2:	2340      	movs	r3, #64	; 0x40
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f001 f830 	bl	8004f5e <USBD_LL_OpenEP>
    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8003efe:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003f02:	2310      	movs	r3, #16
 8003f04:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8003f08:	e7be      	b.n	8003e88 <USBD_CDC_Init+0x5a>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003f0a:	2340      	movs	r3, #64	; 0x40
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f001 f858 	bl	8004fc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003f14:	2500      	movs	r5, #0
 8003f16:	e7da      	b.n	8003ece <USBD_CDC_Init+0xa0>
    return (uint8_t)USBD_EMEM;
 8003f18:	2502      	movs	r5, #2
 8003f1a:	e7d8      	b.n	8003ece <USBD_CDC_Init+0xa0>

08003f1c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8003f1c:	b139      	cbz	r1, 8003f2e <USBD_CDC_RegisterInterface+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData[pdev->classId] = fops;
 8003f1e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003f22:	33b0      	adds	r3, #176	; 0xb0
 8003f24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003f28:	6041      	str	r1, [r0, #4]

  return (uint8_t)USBD_OK;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003f2e:	2003      	movs	r0, #3
}
 8003f30:	4770      	bx	lr

08003f32 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003f32:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003f36:	33b0      	adds	r3, #176	; 0xb0
 8003f38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8003f3c:	b12b      	cbz	r3, 8003f4a <USBD_CDC_SetTxBuffer+0x18>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 8003f3e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003f42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8003f46:	2000      	movs	r0, #0
 8003f48:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003f4a:	2003      	movs	r0, #3
}
 8003f4c:	4770      	bx	lr

08003f4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003f4e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003f52:	33b0      	adds	r3, #176	; 0xb0
 8003f54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]

  if (hcdc == NULL)
 8003f58:	b11b      	cbz	r3, 8003f62 <USBD_CDC_SetRxBuffer+0x14>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 8003f5a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8003f5e:	2000      	movs	r0, #0
 8003f60:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8003f62:	2003      	movs	r0, #3
}
 8003f64:	4770      	bx	lr

08003f66 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003f66:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8003f68:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8003f6c:	33b0      	adds	r3, #176	; 0xb0
 8003f6e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8003f72:	b192      	cbz	r2, 8003f9a <USBD_CDC_ReceivePacket+0x34>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003f74:	7c04      	ldrb	r4, [r0, #16]
 8003f76:	b944      	cbnz	r4, 8003f8a <USBD_CDC_ReceivePacket+0x24>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f7c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003f80:	2101      	movs	r1, #1
 8003f82:	f001 f81f 	bl	8004fc4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8003f86:	4620      	mov	r0, r4
 8003f88:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003f90:	2101      	movs	r1, #1
 8003f92:	f001 f817 	bl	8004fc4 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003f96:	2400      	movs	r4, #0
 8003f98:	e7f5      	b.n	8003f86 <USBD_CDC_ReceivePacket+0x20>
    return (uint8_t)USBD_FAIL;
 8003f9a:	2403      	movs	r4, #3
 8003f9c:	e7f3      	b.n	8003f86 <USBD_CDC_ReceivePacket+0x20>

08003f9e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003f9e:	b198      	cbz	r0, 8003fc8 <USBD_Init+0x2a>
{
 8003fa0:	b508      	push	{r3, lr}
 8003fa2:	4603      	mov	r3, r0
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8003faa:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8003fae:	f8c3 02d0 	str.w	r0, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003fb2:	b109      	cbz	r1, 8003fb8 <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 8003fb4:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003fb8:	2101      	movs	r1, #1
 8003fba:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8003fbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 ff63 	bl	8004e8c <USBD_LL_Init>

  return ret;
}
 8003fc6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003fc8:	2003      	movs	r0, #3
}
 8003fca:	4770      	bx	lr

08003fcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003fd6:	b189      	cbz	r1, 8003ffc <USBD_RegisterClass+0x30>
 8003fd8:	4604      	mov	r4, r0
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8003fda:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8003fde:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003fe0:	b123      	cbz	r3, 8003fec <USBD_RegisterClass+0x20>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8003fe2:	f10d 0006 	add.w	r0, sp, #6
 8003fe6:	4798      	blx	r3
 8003fe8:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8003fec:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8

  return USBD_OK;
 8003ff6:	2000      	movs	r0, #0
}
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	e7fb      	b.n	8003ff8 <USBD_RegisterClass+0x2c>

08004000 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004000:	b508      	push	{r3, lr}
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004002:	f000 ffa4 	bl	8004f4e <USBD_LL_Start>
}
 8004006:	bd08      	pop	{r3, pc}

08004008 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004008:	b508      	push	{r3, lr}
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800400a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800400e:	b113      	cbz	r3, 8004016 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004014:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8004016:	2000      	movs	r0, #0
 8004018:	e7fc      	b.n	8004014 <USBD_SetClassConfig+0xc>

0800401a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800401a:	b508      	push	{r3, lr}
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800401c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4798      	blx	r3
 8004024:	b900      	cbnz	r0, 8004028 <USBD_ClrClassConfig+0xe>
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 8004026:	bd08      	pop	{r3, pc}
    ret = USBD_FAIL;
 8004028:	2003      	movs	r0, #3
 800402a:	e7fc      	b.n	8004026 <USBD_ClrClassConfig+0xc>

0800402c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004030:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f9c4 	bl	80043c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800403a:	2301      	movs	r3, #1
 800403c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004040:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004044:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004048:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800404c:	f001 031f 	and.w	r3, r1, #31
 8004050:	2b01      	cmp	r3, #1
 8004052:	d00d      	beq.n	8004070 <USBD_LL_SetupStage+0x44>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d010      	beq.n	800407a <USBD_LL_SetupStage+0x4e>
 8004058:	b12b      	cbz	r3, 8004066 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800405a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800405e:	4620      	mov	r0, r4
 8004060:	f000 ff90 	bl	8004f84 <USBD_LL_StallEP>
      break;
 8004064:	e003      	b.n	800406e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004066:	4629      	mov	r1, r5
 8004068:	4620      	mov	r0, r4
 800406a:	f000 fb7f 	bl	800476c <USBD_StdDevReq>
  }

  return ret;
}
 800406e:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004070:	4629      	mov	r1, r5
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fbb5 	bl	80047e2 <USBD_StdItfReq>
      break;
 8004078:	e7f9      	b.n	800406e <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800407a:	4629      	mov	r1, r5
 800407c:	4620      	mov	r0, r4
 800407e:	f000 fbf2 	bl	8004866 <USBD_StdEPReq>
      break;
 8004082:	e7f4      	b.n	800406e <USBD_LL_SetupStage+0x42>

08004084 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret = USBD_OK;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004088:	2301      	movs	r3, #1
 800408a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8004094:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8004096:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800409a:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800409e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80040a2:	b1db      	cbz	r3, 80040dc <USBD_LL_Reset+0x58>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b1db      	cbz	r3, 80040e0 <USBD_LL_Reset+0x5c>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80040a8:	2100      	movs	r1, #0
 80040aa:	4798      	blx	r3
 80040ac:	4607      	mov	r7, r0
 80040ae:	b9c8      	cbnz	r0, 80040e4 <USBD_LL_Reset+0x60>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040b0:	2340      	movs	r3, #64	; 0x40
 80040b2:	2200      	movs	r2, #0
 80040b4:	4611      	mov	r1, r2
 80040b6:	4620      	mov	r0, r4
 80040b8:	f000 ff51 	bl	8004f5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80040bc:	2601      	movs	r6, #1
 80040be:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040c2:	2540      	movs	r5, #64	; 0x40
 80040c4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80040c8:	462b      	mov	r3, r5
 80040ca:	2200      	movs	r2, #0
 80040cc:	2180      	movs	r1, #128	; 0x80
 80040ce:	4620      	mov	r0, r4
 80040d0:	f000 ff45 	bl	8004f5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80040d4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80040d6:	6225      	str	r5, [r4, #32]

  return ret;
}
 80040d8:	4638      	mov	r0, r7
 80040da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 80040dc:	2700      	movs	r7, #0
 80040de:	e7e7      	b.n	80040b0 <USBD_LL_Reset+0x2c>
 80040e0:	2700      	movs	r7, #0
 80040e2:	e7e5      	b.n	80040b0 <USBD_LL_Reset+0x2c>
        ret = USBD_FAIL;
 80040e4:	2703      	movs	r7, #3
 80040e6:	e7e3      	b.n	80040b0 <USBD_LL_Reset+0x2c>

080040e8 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80040e8:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80040ea:	2000      	movs	r0, #0
 80040ec:	4770      	bx	lr

080040ee <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80040ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80040f8:	2304      	movs	r3, #4
 80040fa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80040fe:	2000      	movs	r0, #0
 8004100:	4770      	bx	lr

08004102 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004102:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b04      	cmp	r3, #4
 800410a:	d001      	beq.n	8004110 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800410c:	2000      	movs	r0, #0
 800410e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8004110:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800411a:	e7f7      	b.n	800410c <USBD_LL_Resume+0xa>

0800411c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800411c:	b508      	push	{r3, lr}
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800411e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d001      	beq.n	800412c <USBD_LL_SOF+0x10>
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
}
 8004128:	2000      	movs	r0, #0
 800412a:	bd08      	pop	{r3, pc}
    if (pdev->pClass[0] != NULL)
 800412c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f9      	beq.n	8004128 <USBD_LL_SOF+0xc>
      if (pdev->pClass[0]->SOF != NULL)
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f6      	beq.n	8004128 <USBD_LL_SOF+0xc>
        (void)pdev->pClass[0]->SOF(pdev);
 800413a:	4798      	blx	r3
 800413c:	e7f4      	b.n	8004128 <USBD_LL_SOF+0xc>

0800413e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800413e:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 8004140:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004144:	33ae      	adds	r3, #174	; 0xae
 8004146:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800414a:	b15a      	cbz	r2, 8004164 <USBD_LL_IsoINIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800414c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b03      	cmp	r3, #3
 8004154:	d001      	beq.n	800415a <USBD_LL_IsoINIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004156:	2000      	movs	r0, #0
}
 8004158:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800415a:	6a13      	ldr	r3, [r2, #32]
 800415c:	b123      	cbz	r3, 8004168 <USBD_LL_IsoINIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800415e:	4798      	blx	r3
  return USBD_OK;
 8004160:	2000      	movs	r0, #0
 8004162:	e7f9      	b.n	8004158 <USBD_LL_IsoINIncomplete+0x1a>
    return USBD_FAIL;
 8004164:	2003      	movs	r0, #3
 8004166:	e7f7      	b.n	8004158 <USBD_LL_IsoINIncomplete+0x1a>
  return USBD_OK;
 8004168:	2000      	movs	r0, #0
 800416a:	e7f5      	b.n	8004158 <USBD_LL_IsoINIncomplete+0x1a>

0800416c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800416c:	b508      	push	{r3, lr}
  if (pdev->pClass[pdev->classId] == NULL)
 800416e:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 8004172:	33ae      	adds	r3, #174	; 0xae
 8004174:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8004178:	b15a      	cbz	r2, 8004192 <USBD_LL_IsoOUTIncomplete+0x26>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800417a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b03      	cmp	r3, #3
 8004182:	d001      	beq.n	8004188 <USBD_LL_IsoOUTIncomplete+0x1c>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 8004184:	2000      	movs	r0, #0
}
 8004186:	bd08      	pop	{r3, pc}
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8004188:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800418a:	b123      	cbz	r3, 8004196 <USBD_LL_IsoOUTIncomplete+0x2a>
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800418c:	4798      	blx	r3
  return USBD_OK;
 800418e:	2000      	movs	r0, #0
 8004190:	e7f9      	b.n	8004186 <USBD_LL_IsoOUTIncomplete+0x1a>
    return USBD_FAIL;
 8004192:	2003      	movs	r0, #3
 8004194:	e7f7      	b.n	8004186 <USBD_LL_IsoOUTIncomplete+0x1a>
  return USBD_OK;
 8004196:	2000      	movs	r0, #0
 8004198:	e7f5      	b.n	8004186 <USBD_LL_IsoOUTIncomplete+0x1a>

0800419a <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800419a:	2000      	movs	r0, #0
 800419c:	4770      	bx	lr

0800419e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800419e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_OK;

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80041a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80041aa:	b123      	cbz	r3, 80041b6 <USBD_LL_DevDisconnected+0x18>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	7901      	ldrb	r1, [r0, #4]
 80041b0:	4798      	blx	r3
 80041b2:	b910      	cbnz	r0, 80041ba <USBD_LL_DevDisconnected+0x1c>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
}
 80041b4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_OK;
 80041b6:	2000      	movs	r0, #0
 80041b8:	e7fc      	b.n	80041b4 <USBD_LL_DevDisconnected+0x16>
      ret = USBD_FAIL;
 80041ba:	2003      	movs	r0, #3
 80041bc:	e7fa      	b.n	80041b4 <USBD_LL_DevDisconnected+0x16>

080041be <USBD_CoreFindIF>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80041be:	2000      	movs	r0, #0
 80041c0:	4770      	bx	lr

080041c2 <USBD_CoreFindEP>:
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 80041c2:	2000      	movs	r0, #0
 80041c4:	4770      	bx	lr

080041c6 <USBD_LL_DataOutStage>:
{
 80041c6:	b538      	push	{r3, r4, r5, lr}
 80041c8:	4604      	mov	r4, r0
  if (epnum == 0U)
 80041ca:	460d      	mov	r5, r1
 80041cc:	2900      	cmp	r1, #0
 80041ce:	d143      	bne.n	8004258 <USBD_LL_DataOutStage+0x92>
 80041d0:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80041d2:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80041d6:	2a03      	cmp	r2, #3
 80041d8:	d001      	beq.n	80041de <USBD_LL_DataOutStage+0x18>
  return USBD_OK;
 80041da:	4608      	mov	r0, r1
}
 80041dc:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80041de:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80041e2:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80041e6:	4291      	cmp	r1, r2
 80041e8:	d812      	bhi.n	8004210 <USBD_LL_DataOutStage+0x4a>
        switch (pdev->request.bmRequest & 0x1FU)
 80041ea:	f890 32aa 	ldrb.w	r3, [r0, #682]	; 0x2aa
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d017      	beq.n	8004226 <USBD_LL_DataOutStage+0x60>
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d01c      	beq.n	8004234 <USBD_LL_DataOutStage+0x6e>
 80041fa:	4628      	mov	r0, r5
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041fc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b03      	cmp	r3, #3
 8004204:	d01b      	beq.n	800423e <USBD_LL_DataOutStage+0x78>
        (void)USBD_CtlSendStatus(pdev);
 8004206:	4620      	mov	r0, r4
 8004208:	f000 fc8e 	bl	8004b28 <USBD_CtlSendStatus>
  return USBD_OK;
 800420c:	4628      	mov	r0, r5
 800420e:	e7e5      	b.n	80041dc <USBD_LL_DataOutStage+0x16>
        pep->rem_length -= pep->maxpacket;
 8004210:	1a89      	subs	r1, r1, r2
 8004212:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004216:	428a      	cmp	r2, r1
 8004218:	bf28      	it	cs
 800421a:	460a      	movcs	r2, r1
 800421c:	4619      	mov	r1, r3
 800421e:	f000 fc7b 	bl	8004b18 <USBD_CtlContinueRx>
  return USBD_OK;
 8004222:	4628      	mov	r0, r5
 8004224:	e7da      	b.n	80041dc <USBD_LL_DataOutStage+0x16>
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004226:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
 800422a:	f7ff ffc8 	bl	80041be <USBD_CoreFindIF>
        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800422e:	2800      	cmp	r0, #0
 8004230:	d1e9      	bne.n	8004206 <USBD_LL_DataOutStage+0x40>
 8004232:	e7e3      	b.n	80041fc <USBD_LL_DataOutStage+0x36>
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004234:	f890 12ae 	ldrb.w	r1, [r0, #686]	; 0x2ae
 8004238:	f7ff ffc3 	bl	80041c2 <USBD_CoreFindEP>
            break;
 800423c:	e7f7      	b.n	800422e <USBD_LL_DataOutStage+0x68>
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800423e:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8004242:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	2a00      	cmp	r2, #0
 800424a:	d0dc      	beq.n	8004206 <USBD_LL_DataOutStage+0x40>
              pdev->classId = idx;
 800424c:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	4620      	mov	r0, r4
 8004254:	4798      	blx	r3
 8004256:	e7d6      	b.n	8004206 <USBD_LL_DataOutStage+0x40>
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004258:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800425c:	f7ff ffb1 	bl	80041c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004260:	b990      	cbnz	r0, 8004288 <USBD_LL_DataOutStage+0xc2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004262:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b03      	cmp	r3, #3
 800426a:	d1b7      	bne.n	80041dc <USBD_LL_DataOutStage+0x16>
        if (pdev->pClass[idx]->DataOut != NULL)
 800426c:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8004270:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	2a00      	cmp	r2, #0
 8004278:	d0b0      	beq.n	80041dc <USBD_LL_DataOutStage+0x16>
          pdev->classId = idx;
 800427a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4629      	mov	r1, r5
 8004282:	4620      	mov	r0, r4
 8004284:	4798      	blx	r3
      if (ret != USBD_OK)
 8004286:	e7a9      	b.n	80041dc <USBD_LL_DataOutStage+0x16>
  return USBD_OK;
 8004288:	2000      	movs	r0, #0
 800428a:	e7a7      	b.n	80041dc <USBD_LL_DataOutStage+0x16>

0800428c <USBD_LL_DataInStage>:
{
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4604      	mov	r4, r0
  if (epnum == 0U)
 8004290:	460d      	mov	r5, r1
 8004292:	2900      	cmp	r1, #0
 8004294:	d14b      	bne.n	800432e <USBD_LL_DataInStage+0xa2>
 8004296:	4613      	mov	r3, r2
    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004298:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800429c:	2a02      	cmp	r2, #2
 800429e:	d007      	beq.n	80042b0 <USBD_LL_DataInStage+0x24>
    if (pdev->dev_test_mode != 0U)
 80042a0:	f894 02a0 	ldrb.w	r0, [r4, #672]	; 0x2a0
 80042a4:	b118      	cbz	r0, 80042ae <USBD_LL_DataInStage+0x22>
      pdev->dev_test_mode = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80042ac:	4628      	mov	r0, r5
}
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80042b0:	69c2      	ldr	r2, [r0, #28]
 80042b2:	6a01      	ldr	r1, [r0, #32]
 80042b4:	428a      	cmp	r2, r1
 80042b6:	d80e      	bhi.n	80042d6 <USBD_LL_DataInStage+0x4a>
        if ((pep->maxpacket == pep->rem_length) &&
 80042b8:	428a      	cmp	r2, r1
 80042ba:	d018      	beq.n	80042ee <USBD_LL_DataInStage+0x62>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042bc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d027      	beq.n	8004316 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80042c6:	2180      	movs	r1, #128	; 0x80
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fe5b 	bl	8004f84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80042ce:	4620      	mov	r0, r4
 80042d0:	f000 fc35 	bl	8004b3e <USBD_CtlReceiveStatus>
 80042d4:	e7e4      	b.n	80042a0 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80042d6:	1a52      	subs	r2, r2, r1
 80042d8:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80042da:	4619      	mov	r1, r3
 80042dc:	f000 fc05 	bl	8004aea <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80042e0:	2300      	movs	r3, #0
 80042e2:	461a      	mov	r2, r3
 80042e4:	4619      	mov	r1, r3
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 fe6c 	bl	8004fc4 <USBD_LL_PrepareReceive>
 80042ec:	e7d8      	b.n	80042a0 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80042ee:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80042f0:	4299      	cmp	r1, r3
 80042f2:	d8e3      	bhi.n	80042bc <USBD_LL_DataInStage+0x30>
            (pep->total_length < pdev->ep0_data_len))
 80042f4:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d2df      	bcs.n	80042bc <USBD_LL_DataInStage+0x30>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80042fc:	2200      	movs	r2, #0
 80042fe:	4611      	mov	r1, r2
 8004300:	f000 fbf3 	bl	8004aea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004304:	2100      	movs	r1, #0
 8004306:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800430a:	460b      	mov	r3, r1
 800430c:	460a      	mov	r2, r1
 800430e:	4620      	mov	r0, r4
 8004310:	f000 fe58 	bl	8004fc4 <USBD_LL_PrepareReceive>
 8004314:	e7c4      	b.n	80042a0 <USBD_LL_DataInStage+0x14>
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004316:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	2a00      	cmp	r2, #0
 800431e:	d0d2      	beq.n	80042c6 <USBD_LL_DataInStage+0x3a>
              pdev->classId = 0U;
 8004320:	2200      	movs	r2, #0
 8004322:	f8c4 22d4 	str.w	r2, [r4, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4620      	mov	r0, r4
 800432a:	4798      	blx	r3
 800432c:	e7cb      	b.n	80042c6 <USBD_LL_DataInStage+0x3a>
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800432e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004332:	f7ff ff46 	bl	80041c2 <USBD_CoreFindEP>
    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004336:	b990      	cbnz	r0, 800435e <USBD_LL_DataInStage+0xd2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004338:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b03      	cmp	r3, #3
 8004340:	d1b5      	bne.n	80042ae <USBD_LL_DataInStage+0x22>
        if (pdev->pClass[idx]->DataIn != NULL)
 8004342:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 8004346:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	2a00      	cmp	r2, #0
 800434e:	d0ae      	beq.n	80042ae <USBD_LL_DataInStage+0x22>
          pdev->classId = idx;
 8004350:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	4629      	mov	r1, r5
 8004358:	4620      	mov	r0, r4
 800435a:	4798      	blx	r3
          if (ret != USBD_OK)
 800435c:	e7a7      	b.n	80042ae <USBD_LL_DataInStage+0x22>
  return USBD_OK;
 800435e:	2000      	movs	r0, #0
 8004360:	e7a5      	b.n	80042ae <USBD_LL_DataInStage+0x22>

08004362 <USBD_GetNextDesc>:
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;

  *ptr += pnext->bLength;
 8004362:	7803      	ldrb	r3, [r0, #0]
 8004364:	880a      	ldrh	r2, [r1, #0]
 8004366:	4413      	add	r3, r2
 8004368:	800b      	strh	r3, [r1, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800436a:	7803      	ldrb	r3, [r0, #0]

  return (pnext);
}
 800436c:	4418      	add	r0, r3
 800436e:	4770      	bx	lr

08004370 <USBD_GetEpDesc>:
  if (desc->wTotalLength > desc->bLength)
 8004370:	8842      	ldrh	r2, [r0, #2]
 8004372:	7803      	ldrb	r3, [r0, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d918      	bls.n	80043aa <USBD_GetEpDesc+0x3a>
{
 8004378:	b530      	push	{r4, r5, lr}
 800437a:	b083      	sub	sp, #12
 800437c:	4604      	mov	r4, r0
 800437e:	460d      	mov	r5, r1
    ptr = desc->bLength;
 8004380:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (ptr < desc->wTotalLength)
 8004384:	8862      	ldrh	r2, [r4, #2]
 8004386:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800438a:	429a      	cmp	r2, r3
 800438c:	d90a      	bls.n	80043a4 <USBD_GetEpDesc+0x34>
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800438e:	f10d 0106 	add.w	r1, sp, #6
 8004392:	f7ff ffe6 	bl	8004362 <USBD_GetNextDesc>
      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8004396:	7843      	ldrb	r3, [r0, #1]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d1f3      	bne.n	8004384 <USBD_GetEpDesc+0x14>
        if (pEpDesc->bEndpointAddress == EpAddr)
 800439c:	7883      	ldrb	r3, [r0, #2]
 800439e:	42ab      	cmp	r3, r5
 80043a0:	d1f0      	bne.n	8004384 <USBD_GetEpDesc+0x14>
 80043a2:	e000      	b.n	80043a6 <USBD_GetEpDesc+0x36>
 80043a4:	2000      	movs	r0, #0
}
 80043a6:	b003      	add	sp, #12
 80043a8:	bd30      	pop	{r4, r5, pc}
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80043aa:	2000      	movs	r0, #0
}
 80043ac:	4770      	bx	lr

080043ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80043ae:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80043b0:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80043b2:	e002      	b.n	80043ba <USBD_GetLen+0xc>
  {
    len++;
 80043b4:	3001      	adds	r0, #1
 80043b6:	b2c0      	uxtb	r0, r0
    pbuff++;
 80043b8:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	2a00      	cmp	r2, #0
 80043be:	d1f9      	bne.n	80043b4 <USBD_GetLen+0x6>
  }

  return len;
}
 80043c0:	4770      	bx	lr

080043c2 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80043c2:	780b      	ldrb	r3, [r1, #0]
 80043c4:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80043c6:	784b      	ldrb	r3, [r1, #1]
 80043c8:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80043ca:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80043cc:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80043ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80043d2:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80043d4:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80043d6:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80043d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80043dc:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80043de:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80043e0:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80043e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 80043e6:	80c3      	strh	r3, [r0, #6]
}
 80043e8:	4770      	bx	lr

080043ea <USBD_CtlError>:
{
 80043ea:	b510      	push	{r4, lr}
 80043ec:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	f000 fdc8 	bl	8004f84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80043f4:	2100      	movs	r1, #0
 80043f6:	4620      	mov	r0, r4
 80043f8:	f000 fdc4 	bl	8004f84 <USBD_LL_StallEP>
}
 80043fc:	bd10      	pop	{r4, pc}

080043fe <USBD_GetDescriptor>:
{
 80043fe:	b530      	push	{r4, r5, lr}
 8004400:	b083      	sub	sp, #12
 8004402:	4604      	mov	r4, r0
 8004404:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800440c:	884a      	ldrh	r2, [r1, #2]
 800440e:	0a13      	lsrs	r3, r2, #8
 8004410:	3b01      	subs	r3, #1
 8004412:	2b06      	cmp	r3, #6
 8004414:	f200 80ab 	bhi.w	800456e <USBD_GetDescriptor+0x170>
 8004418:	e8df f003 	tbb	[pc, r3]
 800441c:	a9331f04 	.word	0xa9331f04
 8004420:	8da9      	.short	0x8da9
 8004422:	9a          	.byte	0x9a
 8004423:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004424:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f10d 0106 	add.w	r1, sp, #6
 800442e:	7c00      	ldrb	r0, [r0, #16]
 8004430:	4798      	blx	r3
  if (req->wLength != 0U)
 8004432:	88ea      	ldrh	r2, [r5, #6]
 8004434:	2a00      	cmp	r2, #0
 8004436:	f000 80a3 	beq.w	8004580 <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800443a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8099 	beq.w	8004576 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 8004444:	429a      	cmp	r2, r3
 8004446:	bf28      	it	cs
 8004448:	461a      	movcs	r2, r3
 800444a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800444e:	4601      	mov	r1, r0
 8004450:	4620      	mov	r0, r4
 8004452:	f000 fb3d 	bl	8004ad0 <USBD_CtlSendData>
}
 8004456:	b003      	add	sp, #12
 8004458:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800445a:	7c03      	ldrb	r3, [r0, #16]
 800445c:	b943      	cbnz	r3, 8004470 <USBD_GetDescriptor+0x72>
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800445e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	f10d 0006 	add.w	r0, sp, #6
 8004468:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800446a:	2302      	movs	r3, #2
 800446c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800446e:	e7e0      	b.n	8004432 <USBD_GetDescriptor+0x34>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8004470:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	f10d 0006 	add.w	r0, sp, #6
 800447a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800447c:	2302      	movs	r3, #2
 800447e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004480:	e7d7      	b.n	8004432 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	2a05      	cmp	r2, #5
 8004486:	d852      	bhi.n	800452e <USBD_GetDescriptor+0x130>
 8004488:	e8df f002 	tbb	[pc, r2]
 800448c:	2a1d1003 	.word	0x2a1d1003
 8004490:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004492:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	b123      	cbz	r3, 80044a4 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800449a:	f10d 0106 	add.w	r1, sp, #6
 800449e:	7c00      	ldrb	r0, [r0, #16]
 80044a0:	4798      	blx	r3
  if (err != 0U)
 80044a2:	e7c6      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80044a4:	4629      	mov	r1, r5
 80044a6:	f7ff ffa0 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 80044aa:	e7d4      	b.n	8004456 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80044ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	b123      	cbz	r3, 80044be <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80044b4:	f10d 0106 	add.w	r1, sp, #6
 80044b8:	7c00      	ldrb	r0, [r0, #16]
 80044ba:	4798      	blx	r3
  if (err != 0U)
 80044bc:	e7b9      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80044be:	4629      	mov	r1, r5
 80044c0:	f7ff ff93 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 80044c4:	e7c7      	b.n	8004456 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80044c6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	b123      	cbz	r3, 80044d8 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80044ce:	f10d 0106 	add.w	r1, sp, #6
 80044d2:	7c00      	ldrb	r0, [r0, #16]
 80044d4:	4798      	blx	r3
  if (err != 0U)
 80044d6:	e7ac      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80044d8:	4629      	mov	r1, r5
 80044da:	f7ff ff86 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 80044de:	e7ba      	b.n	8004456 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80044e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	b123      	cbz	r3, 80044f2 <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80044e8:	f10d 0106 	add.w	r1, sp, #6
 80044ec:	7c00      	ldrb	r0, [r0, #16]
 80044ee:	4798      	blx	r3
  if (err != 0U)
 80044f0:	e79f      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80044f2:	4629      	mov	r1, r5
 80044f4:	f7ff ff79 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 80044f8:	e7ad      	b.n	8004456 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80044fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	b123      	cbz	r3, 800450c <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004502:	f10d 0106 	add.w	r1, sp, #6
 8004506:	7c00      	ldrb	r0, [r0, #16]
 8004508:	4798      	blx	r3
  if (err != 0U)
 800450a:	e792      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800450c:	4629      	mov	r1, r5
 800450e:	f7ff ff6c 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 8004512:	e7a0      	b.n	8004456 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004514:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	b123      	cbz	r3, 8004526 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800451c:	f10d 0106 	add.w	r1, sp, #6
 8004520:	7c00      	ldrb	r0, [r0, #16]
 8004522:	4798      	blx	r3
  if (err != 0U)
 8004524:	e785      	b.n	8004432 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8004526:	4629      	mov	r1, r5
 8004528:	f7ff ff5f 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 800452c:	e793      	b.n	8004456 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800452e:	4629      	mov	r1, r5
 8004530:	f7ff ff5b 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 8004534:	e78f      	b.n	8004456 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004536:	7c03      	ldrb	r3, [r0, #16]
 8004538:	b933      	cbnz	r3, 8004548 <USBD_GetDescriptor+0x14a>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800453a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800453e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004540:	f10d 0006 	add.w	r0, sp, #6
 8004544:	4798      	blx	r3
  if (err != 0U)
 8004546:	e774      	b.n	8004432 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004548:	4629      	mov	r1, r5
 800454a:	f7ff ff4e 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 800454e:	e782      	b.n	8004456 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004550:	7c03      	ldrb	r3, [r0, #16]
 8004552:	b943      	cbnz	r3, 8004566 <USBD_GetDescriptor+0x168>
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004554:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	f10d 0006 	add.w	r0, sp, #6
 800455e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004560:	2307      	movs	r3, #7
 8004562:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004564:	e765      	b.n	8004432 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8004566:	4629      	mov	r1, r5
 8004568:	f7ff ff3f 	bl	80043ea <USBD_CtlError>
  if (err != 0U)
 800456c:	e773      	b.n	8004456 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800456e:	4629      	mov	r1, r5
 8004570:	f7ff ff3b 	bl	80043ea <USBD_CtlError>
    return;
 8004574:	e76f      	b.n	8004456 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8004576:	4629      	mov	r1, r5
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff36 	bl	80043ea <USBD_CtlError>
 800457e:	e76a      	b.n	8004456 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 8004580:	4620      	mov	r0, r4
 8004582:	f000 fad1 	bl	8004b28 <USBD_CtlSendStatus>
 8004586:	e766      	b.n	8004456 <USBD_GetDescriptor+0x58>

08004588 <USBD_SetAddress>:
{
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800458c:	888b      	ldrh	r3, [r1, #4]
 800458e:	b9fb      	cbnz	r3, 80045d0 <USBD_SetAddress+0x48>
 8004590:	88cb      	ldrh	r3, [r1, #6]
 8004592:	b9eb      	cbnz	r3, 80045d0 <USBD_SetAddress+0x48>
 8004594:	884b      	ldrh	r3, [r1, #2]
 8004596:	2b7f      	cmp	r3, #127	; 0x7f
 8004598:	d81a      	bhi.n	80045d0 <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800459a:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800459e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d00c      	beq.n	80045c2 <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 80045a8:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80045ac:	4629      	mov	r1, r5
 80045ae:	f000 fcf9 	bl	8004fa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 fab8 	bl	8004b28 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80045b8:	b135      	cbz	r5, 80045c8 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80045ba:	2302      	movs	r3, #2
 80045bc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80045c0:	e009      	b.n	80045d6 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 80045c2:	f7ff ff12 	bl	80043ea <USBD_CtlError>
 80045c6:	e006      	b.n	80045d6 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80045ce:	e002      	b.n	80045d6 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7ff ff0a 	bl	80043ea <USBD_CtlError>
}
 80045d6:	bd38      	pop	{r3, r4, r5, pc}

080045d8 <USBD_SetConfig>:
{
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	4604      	mov	r4, r0
 80045dc:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80045de:	788d      	ldrb	r5, [r1, #2]
 80045e0:	4b2f      	ldr	r3, [pc, #188]	; (80046a0 <USBD_SetConfig+0xc8>)
 80045e2:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80045e4:	2d01      	cmp	r5, #1
 80045e6:	d810      	bhi.n	800460a <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 80045e8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d00f      	beq.n	8004612 <USBD_SetConfig+0x3a>
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d026      	beq.n	8004644 <USBD_SetConfig+0x6c>
      USBD_CtlError(pdev, req);
 80045f6:	f7ff fef8 	bl	80043ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <USBD_SetConfig+0xc8>)
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff fd0b 	bl	800401a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8004604:	2503      	movs	r5, #3
}
 8004606:	4628      	mov	r0, r5
 8004608:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800460a:	f7ff feee 	bl	80043ea <USBD_CtlError>
    return USBD_FAIL;
 800460e:	2503      	movs	r5, #3
 8004610:	e7f9      	b.n	8004606 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 8004612:	b1a5      	cbz	r5, 800463e <USBD_SetConfig+0x66>
        pdev->dev_config = cfgidx;
 8004614:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004616:	4629      	mov	r1, r5
 8004618:	f7ff fcf6 	bl	8004008 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800461c:	4605      	mov	r5, r0
 800461e:	b138      	cbz	r0, 8004630 <USBD_SetConfig+0x58>
          USBD_CtlError(pdev, req);
 8004620:	4631      	mov	r1, r6
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff fee1 	bl	80043ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004628:	2302      	movs	r3, #2
 800462a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800462e:	e7ea      	b.n	8004606 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fa79 	bl	8004b28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004636:	2303      	movs	r3, #3
 8004638:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800463c:	e7e3      	b.n	8004606 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800463e:	f000 fa73 	bl	8004b28 <USBD_CtlSendStatus>
 8004642:	e7e0      	b.n	8004606 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 8004644:	b1cd      	cbz	r5, 800467a <USBD_SetConfig+0xa2>
      else if (cfgidx != pdev->dev_config)
 8004646:	6841      	ldr	r1, [r0, #4]
 8004648:	428d      	cmp	r5, r1
 800464a:	d025      	beq.n	8004698 <USBD_SetConfig+0xc0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800464c:	b2c9      	uxtb	r1, r1
 800464e:	f7ff fce4 	bl	800401a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <USBD_SetConfig+0xc8>)
 8004654:	7819      	ldrb	r1, [r3, #0]
 8004656:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004658:	4620      	mov	r0, r4
 800465a:	f7ff fcd5 	bl	8004008 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800465e:	4605      	mov	r5, r0
 8004660:	b1b0      	cbz	r0, 8004690 <USBD_SetConfig+0xb8>
          USBD_CtlError(pdev, req);
 8004662:	4631      	mov	r1, r6
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff fec0 	bl	80043ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800466a:	7921      	ldrb	r1, [r4, #4]
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff fcd4 	bl	800401a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004672:	2302      	movs	r3, #2
 8004674:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004678:	e7c5      	b.n	8004606 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800467a:	2302      	movs	r3, #2
 800467c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8004680:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004682:	4629      	mov	r1, r5
 8004684:	f7ff fcc9 	bl	800401a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004688:	4620      	mov	r0, r4
 800468a:	f000 fa4d 	bl	8004b28 <USBD_CtlSendStatus>
 800468e:	e7ba      	b.n	8004606 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fa49 	bl	8004b28 <USBD_CtlSendStatus>
 8004696:	e7b6      	b.n	8004606 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 8004698:	f000 fa46 	bl	8004b28 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800469c:	2500      	movs	r5, #0
 800469e:	e7b2      	b.n	8004606 <USBD_SetConfig+0x2e>
 80046a0:	200002bc 	.word	0x200002bc

080046a4 <USBD_GetConfig>:
{
 80046a4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80046a6:	88cb      	ldrh	r3, [r1, #6]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d10b      	bne.n	80046c4 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80046ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d909      	bls.n	80046ca <USBD_GetConfig+0x26>
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d109      	bne.n	80046ce <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80046ba:	2201      	movs	r2, #1
 80046bc:	1d01      	adds	r1, r0, #4
 80046be:	f000 fa07 	bl	8004ad0 <USBD_CtlSendData>
        break;
 80046c2:	e001      	b.n	80046c8 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80046c4:	f7ff fe91 	bl	80043ea <USBD_CtlError>
}
 80046c8:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	b913      	cbnz	r3, 80046d4 <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 80046ce:	f7ff fe8c 	bl	80043ea <USBD_CtlError>
}
 80046d2:	e7f9      	b.n	80046c8 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 80046d4:	4601      	mov	r1, r0
 80046d6:	2300      	movs	r3, #0
 80046d8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80046dc:	2201      	movs	r2, #1
 80046de:	f000 f9f7 	bl	8004ad0 <USBD_CtlSendData>
        break;
 80046e2:	e7f1      	b.n	80046c8 <USBD_GetConfig+0x24>

080046e4 <USBD_GetStatus>:
{
 80046e4:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80046e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046ea:	3b01      	subs	r3, #1
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d812      	bhi.n	8004716 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80046f0:	88cb      	ldrh	r3, [r1, #6]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d10c      	bne.n	8004710 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80046f6:	2301      	movs	r3, #1
 80046f8:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80046fa:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80046fe:	b10b      	cbz	r3, 8004704 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004700:	2303      	movs	r3, #3
 8004702:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8004704:	2202      	movs	r2, #2
 8004706:	f100 010c 	add.w	r1, r0, #12
 800470a:	f000 f9e1 	bl	8004ad0 <USBD_CtlSendData>
}
 800470e:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8004710:	f7ff fe6b 	bl	80043ea <USBD_CtlError>
        break;
 8004714:	e7fb      	b.n	800470e <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8004716:	f7ff fe68 	bl	80043ea <USBD_CtlError>
}
 800471a:	e7f8      	b.n	800470e <USBD_GetStatus+0x2a>

0800471c <USBD_SetFeature>:
{
 800471c:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800471e:	884b      	ldrh	r3, [r1, #2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d004      	beq.n	800472e <USBD_SetFeature+0x12>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8004724:	2b02      	cmp	r3, #2
 8004726:	d007      	beq.n	8004738 <USBD_SetFeature+0x1c>
    USBD_CtlError(pdev, req);
 8004728:	f7ff fe5f 	bl	80043ea <USBD_CtlError>
}
 800472c:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800472e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8004732:	f000 f9f9 	bl	8004b28 <USBD_CtlSendStatus>
 8004736:	e7f9      	b.n	800472c <USBD_SetFeature+0x10>
    pdev->dev_test_mode = req->wIndex >> 8;
 8004738:	888b      	ldrh	r3, [r1, #4]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	f880 32a0 	strb.w	r3, [r0, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8004740:	f000 f9f2 	bl	8004b28 <USBD_CtlSendStatus>
 8004744:	e7f2      	b.n	800472c <USBD_SetFeature+0x10>

08004746 <USBD_ClrFeature>:
{
 8004746:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8004748:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800474c:	3b01      	subs	r3, #1
 800474e:	2b02      	cmp	r3, #2
 8004750:	d809      	bhi.n	8004766 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004752:	884b      	ldrh	r3, [r1, #2]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d000      	beq.n	800475a <USBD_ClrFeature+0x14>
}
 8004758:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8004760:	f000 f9e2 	bl	8004b28 <USBD_CtlSendStatus>
 8004764:	e7f8      	b.n	8004758 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8004766:	f7ff fe40 	bl	80043ea <USBD_CtlError>
}
 800476a:	e7f5      	b.n	8004758 <USBD_ClrFeature+0x12>

0800476c <USBD_StdDevReq>:
{
 800476c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800476e:	780c      	ldrb	r4, [r1, #0]
 8004770:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004774:	2c20      	cmp	r4, #32
 8004776:	d006      	beq.n	8004786 <USBD_StdDevReq+0x1a>
 8004778:	2c40      	cmp	r4, #64	; 0x40
 800477a:	d004      	beq.n	8004786 <USBD_StdDevReq+0x1a>
 800477c:	b16c      	cbz	r4, 800479a <USBD_StdDevReq+0x2e>
      USBD_CtlError(pdev, req);
 800477e:	f7ff fe34 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004782:	2400      	movs	r4, #0
      break;
 8004784:	e007      	b.n	8004796 <USBD_StdDevReq+0x2a>
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8004786:	f8d0 32d4 	ldr.w	r3, [r0, #724]	; 0x2d4
 800478a:	33ae      	adds	r3, #174	; 0xae
 800478c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	4798      	blx	r3
 8004794:	4604      	mov	r4, r0
}
 8004796:	4620      	mov	r0, r4
 8004798:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800479a:	784d      	ldrb	r5, [r1, #1]
 800479c:	2d09      	cmp	r5, #9
 800479e:	d81d      	bhi.n	80047dc <USBD_StdDevReq+0x70>
 80047a0:	e8df f005 	tbb	[pc, r5]
 80047a4:	161c1912 	.word	0x161c1912
 80047a8:	1c05081c 	.word	0x1c05081c
 80047ac:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 80047ae:	f7ff fe26 	bl	80043fe <USBD_GetDescriptor>
          break;
 80047b2:	e7f0      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_SetAddress(pdev, req);
 80047b4:	f7ff fee8 	bl	8004588 <USBD_SetAddress>
          break;
 80047b8:	e7ed      	b.n	8004796 <USBD_StdDevReq+0x2a>
          ret = USBD_SetConfig(pdev, req);
 80047ba:	f7ff ff0d 	bl	80045d8 <USBD_SetConfig>
 80047be:	4604      	mov	r4, r0
          break;
 80047c0:	e7e9      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_GetConfig(pdev, req);
 80047c2:	f7ff ff6f 	bl	80046a4 <USBD_GetConfig>
          break;
 80047c6:	e7e6      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_GetStatus(pdev, req);
 80047c8:	f7ff ff8c 	bl	80046e4 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80047cc:	462c      	mov	r4, r5
          break;
 80047ce:	e7e2      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_SetFeature(pdev, req);
 80047d0:	f7ff ffa4 	bl	800471c <USBD_SetFeature>
          break;
 80047d4:	e7df      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_ClrFeature(pdev, req);
 80047d6:	f7ff ffb6 	bl	8004746 <USBD_ClrFeature>
          break;
 80047da:	e7dc      	b.n	8004796 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 80047dc:	f7ff fe05 	bl	80043ea <USBD_CtlError>
          break;
 80047e0:	e7d9      	b.n	8004796 <USBD_StdDevReq+0x2a>

080047e2 <USBD_StdItfReq>:
{
 80047e2:	b570      	push	{r4, r5, r6, lr}
 80047e4:	4605      	mov	r5, r0
 80047e6:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047e8:	780b      	ldrb	r3, [r1, #0]
 80047ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d007      	beq.n	8004802 <USBD_StdItfReq+0x20>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d005      	beq.n	8004802 <USBD_StdItfReq+0x20>
 80047f6:	b123      	cbz	r3, 8004802 <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 80047f8:	f7ff fdf7 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80047fc:	2600      	movs	r6, #0
}
 80047fe:	4630      	mov	r0, r6
 8004800:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8004802:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8004806:	3b01      	subs	r3, #1
 8004808:	2b02      	cmp	r3, #2
 800480a:	d826      	bhi.n	800485a <USBD_StdItfReq+0x78>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800480c:	7921      	ldrb	r1, [r4, #4]
 800480e:	2901      	cmp	r1, #1
 8004810:	d905      	bls.n	800481e <USBD_StdItfReq+0x3c>
            USBD_CtlError(pdev, req);
 8004812:	4621      	mov	r1, r4
 8004814:	4628      	mov	r0, r5
 8004816:	f7ff fde8 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800481a:	2600      	movs	r6, #0
 800481c:	e7ef      	b.n	80047fe <USBD_StdItfReq+0x1c>
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800481e:	4628      	mov	r0, r5
 8004820:	f7ff fccd 	bl	80041be <USBD_CoreFindIF>
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004824:	b968      	cbnz	r0, 8004842 <USBD_StdItfReq+0x60>
              if (pdev->pClass[idx]->Setup != NULL)
 8004826:	f100 02ae 	add.w	r2, r0, #174	; 0xae
 800482a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800482e:	6891      	ldr	r1, [r2, #8]
 8004830:	b189      	cbz	r1, 8004856 <USBD_StdItfReq+0x74>
                pdev->classId = idx;
 8004832:	f8c5 02d4 	str.w	r0, [r5, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8004836:	6893      	ldr	r3, [r2, #8]
 8004838:	4621      	mov	r1, r4
 800483a:	4628      	mov	r0, r5
 800483c:	4798      	blx	r3
 800483e:	4606      	mov	r6, r0
 8004840:	e000      	b.n	8004844 <USBD_StdItfReq+0x62>
              ret = USBD_FAIL;
 8004842:	2603      	movs	r6, #3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004844:	88e3      	ldrh	r3, [r4, #6]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <USBD_StdItfReq+0x1c>
 800484a:	2e00      	cmp	r6, #0
 800484c:	d1d7      	bne.n	80047fe <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800484e:	4628      	mov	r0, r5
 8004850:	f000 f96a 	bl	8004b28 <USBD_CtlSendStatus>
 8004854:	e7d3      	b.n	80047fe <USBD_StdItfReq+0x1c>
                ret = USBD_FAIL;
 8004856:	2603      	movs	r6, #3
 8004858:	e7f4      	b.n	8004844 <USBD_StdItfReq+0x62>
          USBD_CtlError(pdev, req);
 800485a:	4621      	mov	r1, r4
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff fdc4 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004862:	2600      	movs	r6, #0
          break;
 8004864:	e7cb      	b.n	80047fe <USBD_StdItfReq+0x1c>

08004866 <USBD_StdEPReq>:
{
 8004866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	4606      	mov	r6, r0
 800486c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800486e:	888b      	ldrh	r3, [r1, #4]
 8004870:	b2df      	uxtb	r7, r3
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004872:	780c      	ldrb	r4, [r1, #0]
 8004874:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8004878:	2c20      	cmp	r4, #32
 800487a:	d008      	beq.n	800488e <USBD_StdEPReq+0x28>
 800487c:	2c40      	cmp	r4, #64	; 0x40
 800487e:	d006      	beq.n	800488e <USBD_StdEPReq+0x28>
 8004880:	b1dc      	cbz	r4, 80048ba <USBD_StdEPReq+0x54>
      USBD_CtlError(pdev, req);
 8004882:	f7ff fdb2 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004886:	2400      	movs	r4, #0
}
 8004888:	4620      	mov	r0, r4
 800488a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800488e:	4639      	mov	r1, r7
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff fc96 	bl	80041c2 <USBD_CoreFindEP>
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004896:	4604      	mov	r4, r0
 8004898:	2800      	cmp	r0, #0
 800489a:	f040 80f8 	bne.w	8004a8e <USBD_StdEPReq+0x228>
        pdev->classId = idx;
 800489e:	f8c6 02d4 	str.w	r0, [r6, #724]	; 0x2d4
        if (pdev->pClass[idx]->Setup != NULL)
 80048a2:	f100 03ae 	add.w	r3, r0, #174	; 0xae
 80048a6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0eb      	beq.n	8004888 <USBD_StdEPReq+0x22>
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80048b0:	4629      	mov	r1, r5
 80048b2:	4630      	mov	r0, r6
 80048b4:	4798      	blx	r3
 80048b6:	4604      	mov	r4, r0
 80048b8:	e7e6      	b.n	8004888 <USBD_StdEPReq+0x22>
      switch (req->bRequest)
 80048ba:	f891 8001 	ldrb.w	r8, [r1, #1]
 80048be:	f1b8 0f01 	cmp.w	r8, #1
 80048c2:	d031      	beq.n	8004928 <USBD_StdEPReq+0xc2>
 80048c4:	f1b8 0f03 	cmp.w	r8, #3
 80048c8:	d005      	beq.n	80048d6 <USBD_StdEPReq+0x70>
 80048ca:	f1b8 0f00 	cmp.w	r8, #0
 80048ce:	d067      	beq.n	80049a0 <USBD_StdEPReq+0x13a>
          USBD_CtlError(pdev, req);
 80048d0:	f7ff fd8b 	bl	80043ea <USBD_CtlError>
          break;
 80048d4:	e7d8      	b.n	8004888 <USBD_StdEPReq+0x22>
          switch (pdev->dev_state)
 80048d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d004      	beq.n	80048ea <USBD_StdEPReq+0x84>
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d012      	beq.n	800490a <USBD_StdEPReq+0xa4>
              USBD_CtlError(pdev, req);
 80048e4:	f7ff fd81 	bl	80043ea <USBD_CtlError>
              break;
 80048e8:	e7ce      	b.n	8004888 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048ea:	b10f      	cbz	r7, 80048f0 <USBD_StdEPReq+0x8a>
 80048ec:	2f80      	cmp	r7, #128	; 0x80
 80048ee:	d104      	bne.n	80048fa <USBD_StdEPReq+0x94>
                USBD_CtlError(pdev, req);
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff fd79 	bl	80043ea <USBD_CtlError>
 80048f8:	e7c6      	b.n	8004888 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80048fa:	4639      	mov	r1, r7
 80048fc:	f000 fb42 	bl	8004f84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004900:	2180      	movs	r1, #128	; 0x80
 8004902:	4630      	mov	r0, r6
 8004904:	f000 fb3e 	bl	8004f84 <USBD_LL_StallEP>
 8004908:	e7be      	b.n	8004888 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800490a:	884b      	ldrh	r3, [r1, #2]
 800490c:	b923      	cbnz	r3, 8004918 <USBD_StdEPReq+0xb2>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800490e:	b11f      	cbz	r7, 8004918 <USBD_StdEPReq+0xb2>
 8004910:	2f80      	cmp	r7, #128	; 0x80
 8004912:	d001      	beq.n	8004918 <USBD_StdEPReq+0xb2>
 8004914:	88cb      	ldrh	r3, [r1, #6]
 8004916:	b11b      	cbz	r3, 8004920 <USBD_StdEPReq+0xba>
              (void)USBD_CtlSendStatus(pdev);
 8004918:	4630      	mov	r0, r6
 800491a:	f000 f905 	bl	8004b28 <USBD_CtlSendStatus>
              break;
 800491e:	e7b3      	b.n	8004888 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004920:	4639      	mov	r1, r7
 8004922:	f000 fb2f 	bl	8004f84 <USBD_LL_StallEP>
 8004926:	e7f7      	b.n	8004918 <USBD_StdEPReq+0xb2>
          switch (pdev->dev_state)
 8004928:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d004      	beq.n	800493c <USBD_StdEPReq+0xd6>
 8004932:	2b03      	cmp	r3, #3
 8004934:	d012      	beq.n	800495c <USBD_StdEPReq+0xf6>
              USBD_CtlError(pdev, req);
 8004936:	f7ff fd58 	bl	80043ea <USBD_CtlError>
              break;
 800493a:	e7a5      	b.n	8004888 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800493c:	b10f      	cbz	r7, 8004942 <USBD_StdEPReq+0xdc>
 800493e:	2f80      	cmp	r7, #128	; 0x80
 8004940:	d104      	bne.n	800494c <USBD_StdEPReq+0xe6>
                USBD_CtlError(pdev, req);
 8004942:	4629      	mov	r1, r5
 8004944:	4630      	mov	r0, r6
 8004946:	f7ff fd50 	bl	80043ea <USBD_CtlError>
 800494a:	e79d      	b.n	8004888 <USBD_StdEPReq+0x22>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800494c:	4639      	mov	r1, r7
 800494e:	f000 fb19 	bl	8004f84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	4630      	mov	r0, r6
 8004956:	f000 fb15 	bl	8004f84 <USBD_LL_StallEP>
 800495a:	e795      	b.n	8004888 <USBD_StdEPReq+0x22>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800495c:	884b      	ldrh	r3, [r1, #2]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d192      	bne.n	8004888 <USBD_StdEPReq+0x22>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004962:	f017 0f7f 	tst.w	r7, #127	; 0x7f
 8004966:	d117      	bne.n	8004998 <USBD_StdEPReq+0x132>
                (void)USBD_CtlSendStatus(pdev);
 8004968:	4630      	mov	r0, r6
 800496a:	f000 f8dd 	bl	8004b28 <USBD_CtlSendStatus>
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800496e:	4639      	mov	r1, r7
 8004970:	4630      	mov	r0, r6
 8004972:	f7ff fc26 	bl	80041c2 <USBD_CoreFindEP>
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004976:	2800      	cmp	r0, #0
 8004978:	d186      	bne.n	8004888 <USBD_StdEPReq+0x22>
                  pdev->classId = idx;
 800497a:	f8c6 02d4 	str.w	r0, [r6, #724]	; 0x2d4
                  if (pdev->pClass[idx]->Setup != NULL)
 800497e:	f100 02ae 	add.w	r2, r0, #174	; 0xae
 8004982:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004986:	6892      	ldr	r2, [r2, #8]
 8004988:	2a00      	cmp	r2, #0
 800498a:	f000 8082 	beq.w	8004a92 <USBD_StdEPReq+0x22c>
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800498e:	4629      	mov	r1, r5
 8004990:	4630      	mov	r0, r6
 8004992:	4790      	blx	r2
 8004994:	4604      	mov	r4, r0
 8004996:	e777      	b.n	8004888 <USBD_StdEPReq+0x22>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004998:	4639      	mov	r1, r7
 800499a:	f000 fafb 	bl	8004f94 <USBD_LL_ClearStallEP>
 800499e:	e7e3      	b.n	8004968 <USBD_StdEPReq+0x102>
          switch (pdev->dev_state)
 80049a0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	2a02      	cmp	r2, #2
 80049a8:	d005      	beq.n	80049b6 <USBD_StdEPReq+0x150>
 80049aa:	2a03      	cmp	r2, #3
 80049ac:	d027      	beq.n	80049fe <USBD_StdEPReq+0x198>
              USBD_CtlError(pdev, req);
 80049ae:	f7ff fd1c 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049b2:	4644      	mov	r4, r8
              break;
 80049b4:	e768      	b.n	8004888 <USBD_StdEPReq+0x22>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049b6:	b10f      	cbz	r7, 80049bc <USBD_StdEPReq+0x156>
 80049b8:	2f80      	cmp	r7, #128	; 0x80
 80049ba:	d113      	bne.n	80049e4 <USBD_StdEPReq+0x17e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049c0:	d114      	bne.n	80049ec <USBD_StdEPReq+0x186>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049c2:	f007 077f 	and.w	r7, r7, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80049ca:	00b9      	lsls	r1, r7, #2
 80049cc:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80049d0:	4431      	add	r1, r6
 80049d2:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80049d8:	2202      	movs	r2, #2
 80049da:	4630      	mov	r0, r6
 80049dc:	f000 f878 	bl	8004ad0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80049e0:	4644      	mov	r4, r8
              break;
 80049e2:	e751      	b.n	8004888 <USBD_StdEPReq+0x22>
                USBD_CtlError(pdev, req);
 80049e4:	f7ff fd01 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80049e8:	4644      	mov	r4, r8
                break;
 80049ea:	e74d      	b.n	8004888 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049ec:	f007 077f 	and.w	r7, r7, #127	; 0x7f
 80049f0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80049f4:	00b9      	lsls	r1, r7, #2
 80049f6:	3110      	adds	r1, #16
 80049f8:	4431      	add	r1, r6
 80049fa:	3104      	adds	r1, #4
 80049fc:	e7ea      	b.n	80049d4 <USBD_StdEPReq+0x16e>
              if ((ep_addr & 0x80U) == 0x80U)
 80049fe:	b25b      	sxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db1f      	blt.n	8004a44 <USBD_StdEPReq+0x1de>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004a04:	f007 020f 	and.w	r2, r7, #15
 8004a08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004a0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a10:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8004a14:	b31a      	cbz	r2, 8004a5e <USBD_StdEPReq+0x1f8>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	db25      	blt.n	8004a66 <USBD_StdEPReq+0x200>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004a1a:	f007 037f 	and.w	r3, r7, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a22:	009c      	lsls	r4, r3, #2
 8004a24:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8004a28:	4434      	add	r4, r6
 8004a2a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004a2c:	b10f      	cbz	r7, 8004a32 <USBD_StdEPReq+0x1cc>
 8004a2e:	2f80      	cmp	r7, #128	; 0x80
 8004a30:	d122      	bne.n	8004a78 <USBD_StdEPReq+0x212>
                pep->status = 0x0000U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004a36:	2202      	movs	r2, #2
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 f848 	bl	8004ad0 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a40:	4644      	mov	r4, r8
              break;
 8004a42:	e721      	b.n	8004888 <USBD_StdEPReq+0x22>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004a44:	f007 020f 	and.w	r2, r7, #15
 8004a48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004a4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a50:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004a52:	2a00      	cmp	r2, #0
 8004a54:	d1df      	bne.n	8004a16 <USBD_StdEPReq+0x1b0>
                  USBD_CtlError(pdev, req);
 8004a56:	f7ff fcc8 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a5a:	4644      	mov	r4, r8
                  break;
 8004a5c:	e714      	b.n	8004888 <USBD_StdEPReq+0x22>
                  USBD_CtlError(pdev, req);
 8004a5e:	f7ff fcc4 	bl	80043ea <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a62:	4644      	mov	r4, r8
                  break;
 8004a64:	e710      	b.n	8004888 <USBD_StdEPReq+0x22>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004a66:	f007 037f 	and.w	r3, r7, #127	; 0x7f
 8004a6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a6e:	009c      	lsls	r4, r3, #2
 8004a70:	3410      	adds	r4, #16
 8004a72:	4434      	add	r4, r6
 8004a74:	3404      	adds	r4, #4
 8004a76:	e7d9      	b.n	8004a2c <USBD_StdEPReq+0x1c6>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004a78:	4639      	mov	r1, r7
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f000 fa3a 	bl	8004ef4 <USBD_LL_IsStallEP>
 8004a80:	b110      	cbz	r0, 8004a88 <USBD_StdEPReq+0x222>
                pep->status = 0x0001U;
 8004a82:	2301      	movs	r3, #1
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	e7d6      	b.n	8004a36 <USBD_StdEPReq+0x1d0>
                pep->status = 0x0000U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	e7d3      	b.n	8004a36 <USBD_StdEPReq+0x1d0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004a8e:	2400      	movs	r4, #0
 8004a90:	e6fa      	b.n	8004888 <USBD_StdEPReq+0x22>
 8004a92:	4604      	mov	r4, r0
 8004a94:	e6f8      	b.n	8004888 <USBD_StdEPReq+0x22>

08004a96 <USBD_GetString>:
  if (desc == NULL)
 8004a96:	b1d0      	cbz	r0, 8004ace <USBD_GetString+0x38>
{
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8004aa0:	f7ff fc85 	bl	80043ae <USBD_GetLen>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8004aac:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	706b      	strb	r3, [r5, #1]
  idx++;
 8004ab2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8004ab4:	e007      	b.n	8004ac6 <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 8004ab6:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8004ab8:	3401      	adds	r4, #1
    idx++;
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8004abe:	2100      	movs	r1, #0
 8004ac0:	54a9      	strb	r1, [r5, r2]
    idx++;
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8004ac6:	7822      	ldrb	r2, [r4, #0]
 8004ac8:	2a00      	cmp	r2, #0
 8004aca:	d1f4      	bne.n	8004ab6 <USBD_GetString+0x20>
}
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	4770      	bx	lr

08004ad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8004ad0:	b508      	push	{r3, lr}
 8004ad2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004ada:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004adc:	61c3      	str	r3, [r0, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004ade:	460a      	mov	r2, r1
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f000 fa67 	bl	8004fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	bd08      	pop	{r3, pc}

08004aea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004aea:	b508      	push	{r3, lr}
 8004aec:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004aee:	460a      	mov	r2, r1
 8004af0:	2100      	movs	r1, #0
 8004af2:	f000 fa5f 	bl	8004fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004af6:	2000      	movs	r0, #0
 8004af8:	bd08      	pop	{r3, pc}

08004afa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8004afa:	b508      	push	{r3, lr}
 8004afc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004afe:	2203      	movs	r2, #3
 8004b00:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8004b04:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8004b08:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b0c:	460a      	mov	r2, r1
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f000 fa58 	bl	8004fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b14:	2000      	movs	r0, #0
 8004b16:	bd08      	pop	{r3, pc}

08004b18 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004b18:	b508      	push	{r3, lr}
 8004b1a:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f000 fa50 	bl	8004fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	bd08      	pop	{r3, pc}

08004b28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004b28:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004b30:	2300      	movs	r3, #0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4619      	mov	r1, r3
 8004b36:	f000 fa3d 	bl	8004fb4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	bd08      	pop	{r3, pc}

08004b3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004b3e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004b40:	2205      	movs	r2, #5
 8004b42:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b46:	2300      	movs	r3, #0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f000 fa3a 	bl	8004fc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004b50:	2000      	movs	r0, #0
 8004b52:	bd08      	pop	{r3, pc}

08004b54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004b54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004b56:	2200      	movs	r2, #0
 8004b58:	490f      	ldr	r1, [pc, #60]	; (8004b98 <MX_USB_DEVICE_Init+0x44>)
 8004b5a:	4810      	ldr	r0, [pc, #64]	; (8004b9c <MX_USB_DEVICE_Init+0x48>)
 8004b5c:	f7ff fa1f 	bl	8003f9e <USBD_Init>
 8004b60:	b970      	cbnz	r0, 8004b80 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004b62:	490f      	ldr	r1, [pc, #60]	; (8004ba0 <MX_USB_DEVICE_Init+0x4c>)
 8004b64:	480d      	ldr	r0, [pc, #52]	; (8004b9c <MX_USB_DEVICE_Init+0x48>)
 8004b66:	f7ff fa31 	bl	8003fcc <USBD_RegisterClass>
 8004b6a:	b960      	cbnz	r0, 8004b86 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8004b6c:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <MX_USB_DEVICE_Init+0x50>)
 8004b6e:	480b      	ldr	r0, [pc, #44]	; (8004b9c <MX_USB_DEVICE_Init+0x48>)
 8004b70:	f7ff f9d4 	bl	8003f1c <USBD_CDC_RegisterInterface>
 8004b74:	b950      	cbnz	r0, 8004b8c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004b76:	4809      	ldr	r0, [pc, #36]	; (8004b9c <MX_USB_DEVICE_Init+0x48>)
 8004b78:	f7ff fa42 	bl	8004000 <USBD_Start>
 8004b7c:	b948      	cbnz	r0, 8004b92 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004b7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004b80:	f7fb ffac 	bl	8000adc <Error_Handler>
 8004b84:	e7ed      	b.n	8004b62 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8004b86:	f7fb ffa9 	bl	8000adc <Error_Handler>
 8004b8a:	e7ef      	b.n	8004b6c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8004b8c:	f7fb ffa6 	bl	8000adc <Error_Handler>
 8004b90:	e7f1      	b.n	8004b76 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8004b92:	f7fb ffa3 	bl	8000adc <Error_Handler>
}
 8004b96:	e7f2      	b.n	8004b7e <MX_USB_DEVICE_Init+0x2a>
 8004b98:	20000148 	.word	0x20000148
 8004b9c:	200002c0 	.word	0x200002c0
 8004ba0:	200000ac 	.word	0x200000ac
 8004ba4:	20000134 	.word	0x20000134

08004ba8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4770      	bx	lr

08004bac <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004bac:	2000      	movs	r0, #0
 8004bae:	4770      	bx	lr

08004bb0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	4770      	bx	lr

08004bb4 <CDC_Receive_FS>:
{
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004bb8:	4c04      	ldr	r4, [pc, #16]	; (8004bcc <CDC_Receive_FS+0x18>)
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f7ff f9c7 	bl	8003f4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004bc0:	4620      	mov	r0, r4
 8004bc2:	f7ff f9d0 	bl	8003f66 <USBD_CDC_ReceivePacket>
}
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	bf00      	nop
 8004bcc:	200002c0 	.word	0x200002c0

08004bd0 <CDC_Init_FS>:
{
 8004bd0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004bd2:	4c06      	ldr	r4, [pc, #24]	; (8004bec <CDC_Init_FS+0x1c>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	4906      	ldr	r1, [pc, #24]	; (8004bf0 <CDC_Init_FS+0x20>)
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f7ff f9aa 	bl	8003f32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004bde:	4905      	ldr	r1, [pc, #20]	; (8004bf4 <CDC_Init_FS+0x24>)
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff f9b4 	bl	8003f4e <USBD_CDC_SetRxBuffer>
}
 8004be6:	2000      	movs	r0, #0
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	bf00      	nop
 8004bec:	200002c0 	.word	0x200002c0
 8004bf0:	20000984 	.word	0x20000984
 8004bf4:	2000059c 	.word	0x2000059c

08004bf8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004bf8:	2312      	movs	r3, #18
 8004bfa:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8004bfc:	4800      	ldr	r0, [pc, #0]	; (8004c00 <USBD_FS_DeviceDescriptor+0x8>)
 8004bfe:	4770      	bx	lr
 8004c00:	20000164 	.word	0x20000164

08004c04 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004c04:	2304      	movs	r3, #4
 8004c06:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8004c08:	4800      	ldr	r0, [pc, #0]	; (8004c0c <USBD_FS_LangIDStrDescriptor+0x8>)
 8004c0a:	4770      	bx	lr
 8004c0c:	20000178 	.word	0x20000178

08004c10 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d21e      	bcs.n	8004c54 <IntToUnicode+0x44>
{
 8004c16:	b500      	push	{lr}
 8004c18:	e010      	b.n	8004c3c <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8004c1a:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8004c1e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8004c22:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8004c24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004c28:	f10c 0c01 	add.w	ip, ip, #1
 8004c2c:	f04f 0e00 	mov.w	lr, #0
 8004c30:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d209      	bcs.n	8004c50 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8004c3c:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8004c40:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8004c44:	d2e9      	bcs.n	8004c1a <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8004c46:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8004c4a:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8004c4e:	e7e8      	b.n	8004c22 <IntToUnicode+0x12>
  }
}
 8004c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <Get_SerialNum>:
{
 8004c58:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <Get_SerialNum+0x30>)
 8004c5c:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8004c60:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8004c64:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8004c68:	18c0      	adds	r0, r0, r3
 8004c6a:	d100      	bne.n	8004c6e <Get_SerialNum+0x16>
}
 8004c6c:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8004c6e:	4d07      	ldr	r5, [pc, #28]	; (8004c8c <Get_SerialNum+0x34>)
 8004c70:	2208      	movs	r2, #8
 8004c72:	1ca9      	adds	r1, r5, #2
 8004c74:	f7ff ffcc 	bl	8004c10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8004c78:	2204      	movs	r2, #4
 8004c7a:	f105 0112 	add.w	r1, r5, #18
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff ffc6 	bl	8004c10 <IntToUnicode>
}
 8004c84:	e7f2      	b.n	8004c6c <Get_SerialNum+0x14>
 8004c86:	bf00      	nop
 8004c88:	1fff7000 	.word	0x1fff7000
 8004c8c:	2000017c 	.word	0x2000017c

08004c90 <USBD_FS_SerialStrDescriptor>:
{
 8004c90:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8004c92:	231a      	movs	r3, #26
 8004c94:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8004c96:	f7ff ffdf 	bl	8004c58 <Get_SerialNum>
}
 8004c9a:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <USBD_FS_SerialStrDescriptor+0x10>)
 8004c9c:	bd08      	pop	{r3, pc}
 8004c9e:	bf00      	nop
 8004ca0:	2000017c 	.word	0x2000017c

08004ca4 <USBD_FS_ProductStrDescriptor>:
{
 8004ca4:	b508      	push	{r3, lr}
 8004ca6:	460a      	mov	r2, r1
  if(speed == 0)
 8004ca8:	b928      	cbnz	r0, 8004cb6 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004caa:	4905      	ldr	r1, [pc, #20]	; (8004cc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <USBD_FS_ProductStrDescriptor+0x20>)
 8004cae:	f7ff fef2 	bl	8004a96 <USBD_GetString>
}
 8004cb2:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004cb4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004cb6:	4902      	ldr	r1, [pc, #8]	; (8004cc0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8004cb8:	4802      	ldr	r0, [pc, #8]	; (8004cc4 <USBD_FS_ProductStrDescriptor+0x20>)
 8004cba:	f7ff feec 	bl	8004a96 <USBD_GetString>
 8004cbe:	e7f8      	b.n	8004cb2 <USBD_FS_ProductStrDescriptor+0xe>
 8004cc0:	20000d6c 	.word	0x20000d6c
 8004cc4:	0800614c 	.word	0x0800614c

08004cc8 <USBD_FS_ManufacturerStrDescriptor>:
{
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004ccc:	4c03      	ldr	r4, [pc, #12]	; (8004cdc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004cce:	4621      	mov	r1, r4
 8004cd0:	4803      	ldr	r0, [pc, #12]	; (8004ce0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004cd2:	f7ff fee0 	bl	8004a96 <USBD_GetString>
}
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000d6c 	.word	0x20000d6c
 8004ce0:	08006164 	.word	0x08006164

08004ce4 <USBD_FS_ConfigStrDescriptor>:
{
 8004ce4:	b508      	push	{r3, lr}
 8004ce6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8004ce8:	b928      	cbnz	r0, 8004cf6 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004cea:	4905      	ldr	r1, [pc, #20]	; (8004d00 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004cec:	4805      	ldr	r0, [pc, #20]	; (8004d04 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004cee:	f7ff fed2 	bl	8004a96 <USBD_GetString>
}
 8004cf2:	4803      	ldr	r0, [pc, #12]	; (8004d00 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004cf4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004cf6:	4902      	ldr	r1, [pc, #8]	; (8004d00 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8004cf8:	4802      	ldr	r0, [pc, #8]	; (8004d04 <USBD_FS_ConfigStrDescriptor+0x20>)
 8004cfa:	f7ff fecc 	bl	8004a96 <USBD_GetString>
 8004cfe:	e7f8      	b.n	8004cf2 <USBD_FS_ConfigStrDescriptor+0xe>
 8004d00:	20000d6c 	.word	0x20000d6c
 8004d04:	08006178 	.word	0x08006178

08004d08 <USBD_FS_InterfaceStrDescriptor>:
{
 8004d08:	b508      	push	{r3, lr}
 8004d0a:	460a      	mov	r2, r1
  if(speed == 0)
 8004d0c:	b928      	cbnz	r0, 8004d1a <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004d0e:	4905      	ldr	r1, [pc, #20]	; (8004d24 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d10:	4805      	ldr	r0, [pc, #20]	; (8004d28 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004d12:	f7ff fec0 	bl	8004a96 <USBD_GetString>
}
 8004d16:	4803      	ldr	r0, [pc, #12]	; (8004d24 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d18:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004d1a:	4902      	ldr	r1, [pc, #8]	; (8004d24 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8004d1c:	4802      	ldr	r0, [pc, #8]	; (8004d28 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8004d1e:	f7ff feba 	bl	8004a96 <USBD_GetString>
 8004d22:	e7f8      	b.n	8004d16 <USBD_FS_InterfaceStrDescriptor+0xe>
 8004d24:	20000d6c 	.word	0x20000d6c
 8004d28:	08006184 	.word	0x08006184

08004d2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004d2c:	b530      	push	{r4, r5, lr}
 8004d2e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	2300      	movs	r3, #0
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	9304      	str	r3, [sp, #16]
 8004d36:	9305      	str	r3, [sp, #20]
 8004d38:	9306      	str	r3, [sp, #24]
 8004d3a:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d42:	d001      	beq.n	8004d48 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004d44:	b009      	add	sp, #36	; 0x24
 8004d46:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d48:	2500      	movs	r5, #0
 8004d4a:	9501      	str	r5, [sp, #4]
 8004d4c:	4c16      	ldr	r4, [pc, #88]	; (8004da8 <HAL_PCD_MspInit+0x7c>)
 8004d4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	6323      	str	r3, [r4, #48]	; 0x30
 8004d56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004d60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	2302      	movs	r3, #2
 8004d68:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d6e:	230a      	movs	r3, #10
 8004d70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	a903      	add	r1, sp, #12
 8004d74:	480d      	ldr	r0, [pc, #52]	; (8004dac <HAL_PCD_MspInit+0x80>)
 8004d76:	f7fc f983 	bl	8001080 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	6363      	str	r3, [r4, #52]	; 0x34
 8004d82:	9502      	str	r5, [sp, #8]
 8004d84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d8a:	6463      	str	r3, [r4, #68]	; 0x44
 8004d8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	9302      	str	r3, [sp, #8]
 8004d94:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004d96:	462a      	mov	r2, r5
 8004d98:	4629      	mov	r1, r5
 8004d9a:	2043      	movs	r0, #67	; 0x43
 8004d9c:	f7fc f916 	bl	8000fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004da0:	2043      	movs	r0, #67	; 0x43
 8004da2:	f7fc f94b 	bl	800103c <HAL_NVIC_EnableIRQ>
}
 8004da6:	e7cd      	b.n	8004d44 <HAL_PCD_MspInit+0x18>
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40020000 	.word	0x40020000

08004db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004db0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004db2:	f200 41c4 	addw	r1, r0, #1220	; 0x4c4
 8004db6:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004dba:	f7ff f937 	bl	800402c <USBD_LL_SetupStage>
}
 8004dbe:	bd08      	pop	{r3, pc}

08004dc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dc0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004dc2:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004dc6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004dca:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 8004dce:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004dd2:	f7ff f9f8 	bl	80041c6 <USBD_LL_DataOutStage>
}
 8004dd6:	bd08      	pop	{r3, pc}

08004dd8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dd8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004dda:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8004dde:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de4:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004de8:	f7ff fa50 	bl	800428c <USBD_LL_DataInStage>
}
 8004dec:	bd08      	pop	{r3, pc}

08004dee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dee:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004df0:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004df4:	f7ff f992 	bl	800411c <USBD_LL_SOF>
}
 8004df8:	bd08      	pop	{r3, pc}

08004dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004dfa:	b510      	push	{r4, lr}
 8004dfc:	4604      	mov	r4, r0
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004dfe:	68c3      	ldr	r3, [r0, #12]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d109      	bne.n	8004e18 <HAL_PCD_ResetCallback+0x1e>
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004e04:	2101      	movs	r1, #1
 8004e06:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 8004e0a:	f7ff f96d 	bl	80040e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004e0e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
 8004e12:	f7ff f937 	bl	8004084 <USBD_LL_Reset>
}
 8004e16:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004e18:	f7fb fe60 	bl	8000adc <Error_Handler>
 8004e1c:	e7f2      	b.n	8004e04 <HAL_PCD_ResetCallback+0xa>
	...

08004e20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004e24:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e28:	f7ff f961 	bl	80040ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004e3a:	6a23      	ldr	r3, [r4, #32]
 8004e3c:	b123      	cbz	r3, 8004e48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e3e:	4a03      	ldr	r2, [pc, #12]	; (8004e4c <HAL_PCD_SuspendCallback+0x2c>)
 8004e40:	6913      	ldr	r3, [r2, #16]
 8004e42:	f043 0306 	orr.w	r3, r3, #6
 8004e46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	bf00      	nop
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e52:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e56:	f7ff f954 	bl	8004102 <USBD_LL_Resume>
}
 8004e5a:	bd08      	pop	{r3, pc}

08004e5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e5c:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004e5e:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e62:	f7ff f983 	bl	800416c <USBD_LL_IsoOUTIncomplete>
}
 8004e66:	bd08      	pop	{r3, pc}

08004e68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e68:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004e6a:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e6e:	f7ff f966 	bl	800413e <USBD_LL_IsoINIncomplete>
}
 8004e72:	bd08      	pop	{r3, pc}

08004e74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e74:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004e76:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e7a:	f7ff f98e 	bl	800419a <USBD_LL_DevConnected>
}
 8004e7e:	bd08      	pop	{r3, pc}

08004e80 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004e80:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004e82:	f8d0 0508 	ldr.w	r0, [r0, #1288]	; 0x508
 8004e86:	f7ff f98a 	bl	800419e <USBD_LL_DevDisconnected>
}
 8004e8a:	bd08      	pop	{r3, pc}

08004e8c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004e8c:	7802      	ldrb	r2, [r0, #0]
 8004e8e:	b10a      	cbz	r2, 8004e94 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8004e90:	2000      	movs	r0, #0
 8004e92:	4770      	bx	lr
{
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8004e98:	4815      	ldr	r0, [pc, #84]	; (8004ef0 <USBD_LL_Init+0x64>)
 8004e9a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8004e9e:	f8c3 02c8 	str.w	r0, [r3, #712]	; 0x2c8
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004ea2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004ea6:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004ea8:	2304      	movs	r3, #4
 8004eaa:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004eac:	2202      	movs	r2, #2
 8004eae:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004eb4:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004eb6:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004eb8:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004eba:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004ebc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004ebe:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004ec0:	f7fc fa2c 	bl	800131c <HAL_PCD_Init>
 8004ec4:	b980      	cbnz	r0, 8004ee8 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004ec6:	4c0a      	ldr	r4, [pc, #40]	; (8004ef0 <USBD_LL_Init+0x64>)
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f7fd f822 	bl	8001f14 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7fc fff7 	bl	8001ec8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004eda:	2280      	movs	r2, #128	; 0x80
 8004edc:	2101      	movs	r1, #1
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f7fc fff2 	bl	8001ec8 <HAL_PCDEx_SetTxFiFo>
}
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004ee8:	f7fb fdf8 	bl	8000adc <Error_Handler>
 8004eec:	e7eb      	b.n	8004ec6 <USBD_LL_Init+0x3a>
 8004eee:	bf00      	nop
 8004ef0:	20000f6c 	.word	0x20000f6c

08004ef4 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004ef4:	f8d0 32c8 	ldr.w	r3, [r0, #712]	; 0x2c8

  if((ep_addr & 0x80) == 0x80)
 8004ef8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004efc:	d108      	bne.n	8004f10 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004efe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004f02:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004f06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004f0a:	f891 027e 	ldrb.w	r0, [r1, #638]	; 0x27e
  }
}
 8004f0e:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004f10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004f14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8004f18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004f1c:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8004f20:	4770      	bx	lr

08004f22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004f22:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004f24:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f28:	f7fc fc1b 	bl	8001762 <HAL_PCD_EP_GetRxCount>
}
 8004f2c:	bd08      	pop	{r3, pc}
	...

08004f30 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8004f30:	4800      	ldr	r0, [pc, #0]	; (8004f34 <USBD_static_malloc+0x4>)
 8004f32:	4770      	bx	lr
 8004f34:	20001478 	.word	0x20001478

08004f38 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8004f38:	4770      	bx	lr

08004f3a <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8004f3a:	2803      	cmp	r0, #3
 8004f3c:	d805      	bhi.n	8004f4a <USBD_Get_USB_Status+0x10>
 8004f3e:	e8df f000 	tbb	[pc, r0]
 8004f42:	0405      	.short	0x0405
 8004f44:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004f46:	2001      	movs	r0, #1
    break;
 8004f48:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8004f4a:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004f4c:	4770      	bx	lr

08004f4e <USBD_LL_Start>:
{
 8004f4e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004f50:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f54:	f7fc fa79 	bl	800144a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f58:	f7ff ffef 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004f5c:	bd08      	pop	{r3, pc}

08004f5e <USBD_LL_OpenEP>:
{
 8004f5e:	b508      	push	{r3, lr}
 8004f60:	4694      	mov	ip, r2
 8004f62:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004f64:	4663      	mov	r3, ip
 8004f66:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f6a:	f7fc fb4d 	bl	8001608 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f6e:	f7ff ffe4 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004f72:	bd08      	pop	{r3, pc}

08004f74 <USBD_LL_CloseEP>:
{
 8004f74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004f76:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f7a:	f7fc fb8a 	bl	8001692 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f7e:	f7ff ffdc 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004f82:	bd08      	pop	{r3, pc}

08004f84 <USBD_LL_StallEP>:
{
 8004f84:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004f86:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f8a:	f7fc fc22 	bl	80017d2 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f8e:	f7ff ffd4 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004f92:	bd08      	pop	{r3, pc}

08004f94 <USBD_LL_ClearStallEP>:
{
 8004f94:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004f96:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004f9a:	f7fc fc5e 	bl	800185a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004f9e:	f7ff ffcc 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004fa2:	bd08      	pop	{r3, pc}

08004fa4 <USBD_LL_SetUSBAddress>:
{
 8004fa4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004fa6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004faa:	f7fc fb19 	bl	80015e0 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004fae:	f7ff ffc4 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004fb2:	bd08      	pop	{r3, pc}

08004fb4 <USBD_LL_Transmit>:
{
 8004fb4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004fb6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004fba:	f7fc fbdb 	bl	8001774 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004fbe:	f7ff ffbc 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004fc2:	bd08      	pop	{r3, pc}

08004fc4 <USBD_LL_PrepareReceive>:
{
 8004fc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004fc6:	f8d0 02c8 	ldr.w	r0, [r0, #712]	; 0x2c8
 8004fca:	f7fc fb9b 	bl	8001704 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8004fce:	f7ff ffb4 	bl	8004f3a <USBD_Get_USB_Status>
}
 8004fd2:	bd08      	pop	{r3, pc}

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000198 	.word	0x20000198

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4d0d      	ldr	r5, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2600      	movs	r6, #0
 8004fec:	42a6      	cmp	r6, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4d0b      	ldr	r5, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f001 f824 	bl	8006040 <_init>
 8004ff8:	1b64      	subs	r4, r4, r5
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2600      	movs	r6, #0
 8004ffe:	42a6      	cmp	r6, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f855 3b04 	ldr.w	r3, [r5], #4
 8005008:	4798      	blx	r3
 800500a:	3601      	adds	r6, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005012:	4798      	blx	r3
 8005014:	3601      	adds	r6, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	08006234 	.word	0x08006234
 800501c:	08006234 	.word	0x08006234
 8005020:	08006234 	.word	0x08006234
 8005024:	08006238 	.word	0x08006238

08005028 <memset>:
 8005028:	4402      	add	r2, r0
 800502a:	4603      	mov	r3, r0
 800502c:	4293      	cmp	r3, r2
 800502e:	d100      	bne.n	8005032 <memset+0xa>
 8005030:	4770      	bx	lr
 8005032:	f803 1b01 	strb.w	r1, [r3], #1
 8005036:	e7f9      	b.n	800502c <memset+0x4>

08005038 <iprintf>:
 8005038:	b40f      	push	{r0, r1, r2, r3}
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <iprintf+0x2c>)
 800503c:	b513      	push	{r0, r1, r4, lr}
 800503e:	681c      	ldr	r4, [r3, #0]
 8005040:	b124      	cbz	r4, 800504c <iprintf+0x14>
 8005042:	69a3      	ldr	r3, [r4, #24]
 8005044:	b913      	cbnz	r3, 800504c <iprintf+0x14>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 fa5e 	bl	8005508 <__sinit>
 800504c:	ab05      	add	r3, sp, #20
 800504e:	9a04      	ldr	r2, [sp, #16]
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	4620      	mov	r0, r4
 8005056:	f000 fc67 	bl	8005928 <_vfiprintf_r>
 800505a:	b002      	add	sp, #8
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	b004      	add	sp, #16
 8005062:	4770      	bx	lr
 8005064:	20000198 	.word	0x20000198

08005068 <_puts_r>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	460e      	mov	r6, r1
 800506c:	4605      	mov	r5, r0
 800506e:	b118      	cbz	r0, 8005078 <_puts_r+0x10>
 8005070:	6983      	ldr	r3, [r0, #24]
 8005072:	b90b      	cbnz	r3, 8005078 <_puts_r+0x10>
 8005074:	f000 fa48 	bl	8005508 <__sinit>
 8005078:	69ab      	ldr	r3, [r5, #24]
 800507a:	68ac      	ldr	r4, [r5, #8]
 800507c:	b913      	cbnz	r3, 8005084 <_puts_r+0x1c>
 800507e:	4628      	mov	r0, r5
 8005080:	f000 fa42 	bl	8005508 <__sinit>
 8005084:	4b2c      	ldr	r3, [pc, #176]	; (8005138 <_puts_r+0xd0>)
 8005086:	429c      	cmp	r4, r3
 8005088:	d120      	bne.n	80050cc <_puts_r+0x64>
 800508a:	686c      	ldr	r4, [r5, #4]
 800508c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800508e:	07db      	lsls	r3, r3, #31
 8005090:	d405      	bmi.n	800509e <_puts_r+0x36>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	0598      	lsls	r0, r3, #22
 8005096:	d402      	bmi.n	800509e <_puts_r+0x36>
 8005098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509a:	f000 fad3 	bl	8005644 <__retarget_lock_acquire_recursive>
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	0719      	lsls	r1, r3, #28
 80050a2:	d51d      	bpl.n	80050e0 <_puts_r+0x78>
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	b1db      	cbz	r3, 80050e0 <_puts_r+0x78>
 80050a8:	3e01      	subs	r6, #1
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050b0:	3b01      	subs	r3, #1
 80050b2:	60a3      	str	r3, [r4, #8]
 80050b4:	bb39      	cbnz	r1, 8005106 <_puts_r+0x9e>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	da38      	bge.n	800512c <_puts_r+0xc4>
 80050ba:	4622      	mov	r2, r4
 80050bc:	210a      	movs	r1, #10
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 f848 	bl	8005154 <__swbuf_r>
 80050c4:	3001      	adds	r0, #1
 80050c6:	d011      	beq.n	80050ec <_puts_r+0x84>
 80050c8:	250a      	movs	r5, #10
 80050ca:	e011      	b.n	80050f0 <_puts_r+0x88>
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <_puts_r+0xd4>)
 80050ce:	429c      	cmp	r4, r3
 80050d0:	d101      	bne.n	80050d6 <_puts_r+0x6e>
 80050d2:	68ac      	ldr	r4, [r5, #8]
 80050d4:	e7da      	b.n	800508c <_puts_r+0x24>
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <_puts_r+0xd8>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	bf08      	it	eq
 80050dc:	68ec      	ldreq	r4, [r5, #12]
 80050de:	e7d5      	b.n	800508c <_puts_r+0x24>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f888 	bl	80051f8 <__swsetup_r>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0dd      	beq.n	80050a8 <_puts_r+0x40>
 80050ec:	f04f 35ff 	mov.w	r5, #4294967295
 80050f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050f2:	07da      	lsls	r2, r3, #31
 80050f4:	d405      	bmi.n	8005102 <_puts_r+0x9a>
 80050f6:	89a3      	ldrh	r3, [r4, #12]
 80050f8:	059b      	lsls	r3, r3, #22
 80050fa:	d402      	bmi.n	8005102 <_puts_r+0x9a>
 80050fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050fe:	f000 faa2 	bl	8005646 <__retarget_lock_release_recursive>
 8005102:	4628      	mov	r0, r5
 8005104:	bd70      	pop	{r4, r5, r6, pc}
 8005106:	2b00      	cmp	r3, #0
 8005108:	da04      	bge.n	8005114 <_puts_r+0xac>
 800510a:	69a2      	ldr	r2, [r4, #24]
 800510c:	429a      	cmp	r2, r3
 800510e:	dc06      	bgt.n	800511e <_puts_r+0xb6>
 8005110:	290a      	cmp	r1, #10
 8005112:	d004      	beq.n	800511e <_puts_r+0xb6>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	6022      	str	r2, [r4, #0]
 800511a:	7019      	strb	r1, [r3, #0]
 800511c:	e7c5      	b.n	80050aa <_puts_r+0x42>
 800511e:	4622      	mov	r2, r4
 8005120:	4628      	mov	r0, r5
 8005122:	f000 f817 	bl	8005154 <__swbuf_r>
 8005126:	3001      	adds	r0, #1
 8005128:	d1bf      	bne.n	80050aa <_puts_r+0x42>
 800512a:	e7df      	b.n	80050ec <_puts_r+0x84>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	250a      	movs	r5, #10
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	6022      	str	r2, [r4, #0]
 8005134:	701d      	strb	r5, [r3, #0]
 8005136:	e7db      	b.n	80050f0 <_puts_r+0x88>
 8005138:	080061b8 	.word	0x080061b8
 800513c:	080061d8 	.word	0x080061d8
 8005140:	08006198 	.word	0x08006198

08005144 <puts>:
 8005144:	4b02      	ldr	r3, [pc, #8]	; (8005150 <puts+0xc>)
 8005146:	4601      	mov	r1, r0
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	f7ff bf8d 	b.w	8005068 <_puts_r>
 800514e:	bf00      	nop
 8005150:	20000198 	.word	0x20000198

08005154 <__swbuf_r>:
 8005154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005156:	460e      	mov	r6, r1
 8005158:	4614      	mov	r4, r2
 800515a:	4605      	mov	r5, r0
 800515c:	b118      	cbz	r0, 8005166 <__swbuf_r+0x12>
 800515e:	6983      	ldr	r3, [r0, #24]
 8005160:	b90b      	cbnz	r3, 8005166 <__swbuf_r+0x12>
 8005162:	f000 f9d1 	bl	8005508 <__sinit>
 8005166:	4b21      	ldr	r3, [pc, #132]	; (80051ec <__swbuf_r+0x98>)
 8005168:	429c      	cmp	r4, r3
 800516a:	d12b      	bne.n	80051c4 <__swbuf_r+0x70>
 800516c:	686c      	ldr	r4, [r5, #4]
 800516e:	69a3      	ldr	r3, [r4, #24]
 8005170:	60a3      	str	r3, [r4, #8]
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	071a      	lsls	r2, r3, #28
 8005176:	d52f      	bpl.n	80051d8 <__swbuf_r+0x84>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	b36b      	cbz	r3, 80051d8 <__swbuf_r+0x84>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1ac0      	subs	r0, r0, r3
 8005182:	6963      	ldr	r3, [r4, #20]
 8005184:	b2f6      	uxtb	r6, r6
 8005186:	4283      	cmp	r3, r0
 8005188:	4637      	mov	r7, r6
 800518a:	dc04      	bgt.n	8005196 <__swbuf_r+0x42>
 800518c:	4621      	mov	r1, r4
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f926 	bl	80053e0 <_fflush_r>
 8005194:	bb30      	cbnz	r0, 80051e4 <__swbuf_r+0x90>
 8005196:	68a3      	ldr	r3, [r4, #8]
 8005198:	3b01      	subs	r3, #1
 800519a:	60a3      	str	r3, [r4, #8]
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	6022      	str	r2, [r4, #0]
 80051a2:	701e      	strb	r6, [r3, #0]
 80051a4:	6963      	ldr	r3, [r4, #20]
 80051a6:	3001      	adds	r0, #1
 80051a8:	4283      	cmp	r3, r0
 80051aa:	d004      	beq.n	80051b6 <__swbuf_r+0x62>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	07db      	lsls	r3, r3, #31
 80051b0:	d506      	bpl.n	80051c0 <__swbuf_r+0x6c>
 80051b2:	2e0a      	cmp	r6, #10
 80051b4:	d104      	bne.n	80051c0 <__swbuf_r+0x6c>
 80051b6:	4621      	mov	r1, r4
 80051b8:	4628      	mov	r0, r5
 80051ba:	f000 f911 	bl	80053e0 <_fflush_r>
 80051be:	b988      	cbnz	r0, 80051e4 <__swbuf_r+0x90>
 80051c0:	4638      	mov	r0, r7
 80051c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c4:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <__swbuf_r+0x9c>)
 80051c6:	429c      	cmp	r4, r3
 80051c8:	d101      	bne.n	80051ce <__swbuf_r+0x7a>
 80051ca:	68ac      	ldr	r4, [r5, #8]
 80051cc:	e7cf      	b.n	800516e <__swbuf_r+0x1a>
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <__swbuf_r+0xa0>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	bf08      	it	eq
 80051d4:	68ec      	ldreq	r4, [r5, #12]
 80051d6:	e7ca      	b.n	800516e <__swbuf_r+0x1a>
 80051d8:	4621      	mov	r1, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	f000 f80c 	bl	80051f8 <__swsetup_r>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d0cb      	beq.n	800517c <__swbuf_r+0x28>
 80051e4:	f04f 37ff 	mov.w	r7, #4294967295
 80051e8:	e7ea      	b.n	80051c0 <__swbuf_r+0x6c>
 80051ea:	bf00      	nop
 80051ec:	080061b8 	.word	0x080061b8
 80051f0:	080061d8 	.word	0x080061d8
 80051f4:	08006198 	.word	0x08006198

080051f8 <__swsetup_r>:
 80051f8:	4b32      	ldr	r3, [pc, #200]	; (80052c4 <__swsetup_r+0xcc>)
 80051fa:	b570      	push	{r4, r5, r6, lr}
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	4606      	mov	r6, r0
 8005200:	460c      	mov	r4, r1
 8005202:	b125      	cbz	r5, 800520e <__swsetup_r+0x16>
 8005204:	69ab      	ldr	r3, [r5, #24]
 8005206:	b913      	cbnz	r3, 800520e <__swsetup_r+0x16>
 8005208:	4628      	mov	r0, r5
 800520a:	f000 f97d 	bl	8005508 <__sinit>
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <__swsetup_r+0xd0>)
 8005210:	429c      	cmp	r4, r3
 8005212:	d10f      	bne.n	8005234 <__swsetup_r+0x3c>
 8005214:	686c      	ldr	r4, [r5, #4]
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800521c:	0719      	lsls	r1, r3, #28
 800521e:	d42c      	bmi.n	800527a <__swsetup_r+0x82>
 8005220:	06dd      	lsls	r5, r3, #27
 8005222:	d411      	bmi.n	8005248 <__swsetup_r+0x50>
 8005224:	2309      	movs	r3, #9
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	f04f 30ff 	mov.w	r0, #4294967295
 8005232:	e03e      	b.n	80052b2 <__swsetup_r+0xba>
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <__swsetup_r+0xd4>)
 8005236:	429c      	cmp	r4, r3
 8005238:	d101      	bne.n	800523e <__swsetup_r+0x46>
 800523a:	68ac      	ldr	r4, [r5, #8]
 800523c:	e7eb      	b.n	8005216 <__swsetup_r+0x1e>
 800523e:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <__swsetup_r+0xd8>)
 8005240:	429c      	cmp	r4, r3
 8005242:	bf08      	it	eq
 8005244:	68ec      	ldreq	r4, [r5, #12]
 8005246:	e7e6      	b.n	8005216 <__swsetup_r+0x1e>
 8005248:	0758      	lsls	r0, r3, #29
 800524a:	d512      	bpl.n	8005272 <__swsetup_r+0x7a>
 800524c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800524e:	b141      	cbz	r1, 8005262 <__swsetup_r+0x6a>
 8005250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005254:	4299      	cmp	r1, r3
 8005256:	d002      	beq.n	800525e <__swsetup_r+0x66>
 8005258:	4630      	mov	r0, r6
 800525a:	f000 fa5b 	bl	8005714 <_free_r>
 800525e:	2300      	movs	r3, #0
 8005260:	6363      	str	r3, [r4, #52]	; 0x34
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	2300      	movs	r3, #0
 800526c:	6063      	str	r3, [r4, #4]
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f043 0308 	orr.w	r3, r3, #8
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	b94b      	cbnz	r3, 8005292 <__swsetup_r+0x9a>
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d003      	beq.n	8005292 <__swsetup_r+0x9a>
 800528a:	4621      	mov	r1, r4
 800528c:	4630      	mov	r0, r6
 800528e:	f000 fa01 	bl	8005694 <__smakebuf_r>
 8005292:	89a0      	ldrh	r0, [r4, #12]
 8005294:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005298:	f010 0301 	ands.w	r3, r0, #1
 800529c:	d00a      	beq.n	80052b4 <__swsetup_r+0xbc>
 800529e:	2300      	movs	r3, #0
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	6963      	ldr	r3, [r4, #20]
 80052a4:	425b      	negs	r3, r3
 80052a6:	61a3      	str	r3, [r4, #24]
 80052a8:	6923      	ldr	r3, [r4, #16]
 80052aa:	b943      	cbnz	r3, 80052be <__swsetup_r+0xc6>
 80052ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052b0:	d1ba      	bne.n	8005228 <__swsetup_r+0x30>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	0781      	lsls	r1, r0, #30
 80052b6:	bf58      	it	pl
 80052b8:	6963      	ldrpl	r3, [r4, #20]
 80052ba:	60a3      	str	r3, [r4, #8]
 80052bc:	e7f4      	b.n	80052a8 <__swsetup_r+0xb0>
 80052be:	2000      	movs	r0, #0
 80052c0:	e7f7      	b.n	80052b2 <__swsetup_r+0xba>
 80052c2:	bf00      	nop
 80052c4:	20000198 	.word	0x20000198
 80052c8:	080061b8 	.word	0x080061b8
 80052cc:	080061d8 	.word	0x080061d8
 80052d0:	08006198 	.word	0x08006198

080052d4 <__sflush_r>:
 80052d4:	898a      	ldrh	r2, [r1, #12]
 80052d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	4605      	mov	r5, r0
 80052dc:	0710      	lsls	r0, r2, #28
 80052de:	460c      	mov	r4, r1
 80052e0:	d458      	bmi.n	8005394 <__sflush_r+0xc0>
 80052e2:	684b      	ldr	r3, [r1, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dc05      	bgt.n	80052f4 <__sflush_r+0x20>
 80052e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dc02      	bgt.n	80052f4 <__sflush_r+0x20>
 80052ee:	2000      	movs	r0, #0
 80052f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	d0f9      	beq.n	80052ee <__sflush_r+0x1a>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005300:	682f      	ldr	r7, [r5, #0]
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	d032      	beq.n	800536c <__sflush_r+0x98>
 8005306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	075a      	lsls	r2, r3, #29
 800530c:	d505      	bpl.n	800531a <__sflush_r+0x46>
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	1ac0      	subs	r0, r0, r3
 8005312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005314:	b10b      	cbz	r3, 800531a <__sflush_r+0x46>
 8005316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005318:	1ac0      	subs	r0, r0, r3
 800531a:	2300      	movs	r3, #0
 800531c:	4602      	mov	r2, r0
 800531e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005320:	6a21      	ldr	r1, [r4, #32]
 8005322:	4628      	mov	r0, r5
 8005324:	47b0      	blx	r6
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	d106      	bne.n	800533a <__sflush_r+0x66>
 800532c:	6829      	ldr	r1, [r5, #0]
 800532e:	291d      	cmp	r1, #29
 8005330:	d82c      	bhi.n	800538c <__sflush_r+0xb8>
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <__sflush_r+0x108>)
 8005334:	40ca      	lsrs	r2, r1
 8005336:	07d6      	lsls	r6, r2, #31
 8005338:	d528      	bpl.n	800538c <__sflush_r+0xb8>
 800533a:	2200      	movs	r2, #0
 800533c:	6062      	str	r2, [r4, #4]
 800533e:	04d9      	lsls	r1, r3, #19
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	d504      	bpl.n	8005350 <__sflush_r+0x7c>
 8005346:	1c42      	adds	r2, r0, #1
 8005348:	d101      	bne.n	800534e <__sflush_r+0x7a>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	b903      	cbnz	r3, 8005350 <__sflush_r+0x7c>
 800534e:	6560      	str	r0, [r4, #84]	; 0x54
 8005350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005352:	602f      	str	r7, [r5, #0]
 8005354:	2900      	cmp	r1, #0
 8005356:	d0ca      	beq.n	80052ee <__sflush_r+0x1a>
 8005358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <__sflush_r+0x92>
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f9d7 	bl	8005714 <_free_r>
 8005366:	2000      	movs	r0, #0
 8005368:	6360      	str	r0, [r4, #52]	; 0x34
 800536a:	e7c1      	b.n	80052f0 <__sflush_r+0x1c>
 800536c:	6a21      	ldr	r1, [r4, #32]
 800536e:	2301      	movs	r3, #1
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	1c41      	adds	r1, r0, #1
 8005376:	d1c7      	bne.n	8005308 <__sflush_r+0x34>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0c4      	beq.n	8005308 <__sflush_r+0x34>
 800537e:	2b1d      	cmp	r3, #29
 8005380:	d001      	beq.n	8005386 <__sflush_r+0xb2>
 8005382:	2b16      	cmp	r3, #22
 8005384:	d101      	bne.n	800538a <__sflush_r+0xb6>
 8005386:	602f      	str	r7, [r5, #0]
 8005388:	e7b1      	b.n	80052ee <__sflush_r+0x1a>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	e7ad      	b.n	80052f0 <__sflush_r+0x1c>
 8005394:	690f      	ldr	r7, [r1, #16]
 8005396:	2f00      	cmp	r7, #0
 8005398:	d0a9      	beq.n	80052ee <__sflush_r+0x1a>
 800539a:	0793      	lsls	r3, r2, #30
 800539c:	680e      	ldr	r6, [r1, #0]
 800539e:	bf08      	it	eq
 80053a0:	694b      	ldreq	r3, [r1, #20]
 80053a2:	600f      	str	r7, [r1, #0]
 80053a4:	bf18      	it	ne
 80053a6:	2300      	movne	r3, #0
 80053a8:	eba6 0807 	sub.w	r8, r6, r7
 80053ac:	608b      	str	r3, [r1, #8]
 80053ae:	f1b8 0f00 	cmp.w	r8, #0
 80053b2:	dd9c      	ble.n	80052ee <__sflush_r+0x1a>
 80053b4:	6a21      	ldr	r1, [r4, #32]
 80053b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053b8:	4643      	mov	r3, r8
 80053ba:	463a      	mov	r2, r7
 80053bc:	4628      	mov	r0, r5
 80053be:	47b0      	blx	r6
 80053c0:	2800      	cmp	r0, #0
 80053c2:	dc06      	bgt.n	80053d2 <__sflush_r+0xfe>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	e78e      	b.n	80052f0 <__sflush_r+0x1c>
 80053d2:	4407      	add	r7, r0
 80053d4:	eba8 0800 	sub.w	r8, r8, r0
 80053d8:	e7e9      	b.n	80053ae <__sflush_r+0xda>
 80053da:	bf00      	nop
 80053dc:	20400001 	.word	0x20400001

080053e0 <_fflush_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	690b      	ldr	r3, [r1, #16]
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	b913      	cbnz	r3, 80053f0 <_fflush_r+0x10>
 80053ea:	2500      	movs	r5, #0
 80053ec:	4628      	mov	r0, r5
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	b118      	cbz	r0, 80053fa <_fflush_r+0x1a>
 80053f2:	6983      	ldr	r3, [r0, #24]
 80053f4:	b90b      	cbnz	r3, 80053fa <_fflush_r+0x1a>
 80053f6:	f000 f887 	bl	8005508 <__sinit>
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <_fflush_r+0x6c>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	d11b      	bne.n	8005438 <_fflush_r+0x58>
 8005400:	686c      	ldr	r4, [r5, #4]
 8005402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0ef      	beq.n	80053ea <_fflush_r+0xa>
 800540a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800540c:	07d0      	lsls	r0, r2, #31
 800540e:	d404      	bmi.n	800541a <_fflush_r+0x3a>
 8005410:	0599      	lsls	r1, r3, #22
 8005412:	d402      	bmi.n	800541a <_fflush_r+0x3a>
 8005414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005416:	f000 f915 	bl	8005644 <__retarget_lock_acquire_recursive>
 800541a:	4628      	mov	r0, r5
 800541c:	4621      	mov	r1, r4
 800541e:	f7ff ff59 	bl	80052d4 <__sflush_r>
 8005422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005424:	07da      	lsls	r2, r3, #31
 8005426:	4605      	mov	r5, r0
 8005428:	d4e0      	bmi.n	80053ec <_fflush_r+0xc>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	059b      	lsls	r3, r3, #22
 800542e:	d4dd      	bmi.n	80053ec <_fflush_r+0xc>
 8005430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005432:	f000 f908 	bl	8005646 <__retarget_lock_release_recursive>
 8005436:	e7d9      	b.n	80053ec <_fflush_r+0xc>
 8005438:	4b05      	ldr	r3, [pc, #20]	; (8005450 <_fflush_r+0x70>)
 800543a:	429c      	cmp	r4, r3
 800543c:	d101      	bne.n	8005442 <_fflush_r+0x62>
 800543e:	68ac      	ldr	r4, [r5, #8]
 8005440:	e7df      	b.n	8005402 <_fflush_r+0x22>
 8005442:	4b04      	ldr	r3, [pc, #16]	; (8005454 <_fflush_r+0x74>)
 8005444:	429c      	cmp	r4, r3
 8005446:	bf08      	it	eq
 8005448:	68ec      	ldreq	r4, [r5, #12]
 800544a:	e7da      	b.n	8005402 <_fflush_r+0x22>
 800544c:	080061b8 	.word	0x080061b8
 8005450:	080061d8 	.word	0x080061d8
 8005454:	08006198 	.word	0x08006198

08005458 <std>:
 8005458:	2300      	movs	r3, #0
 800545a:	b510      	push	{r4, lr}
 800545c:	4604      	mov	r4, r0
 800545e:	e9c0 3300 	strd	r3, r3, [r0]
 8005462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005466:	6083      	str	r3, [r0, #8]
 8005468:	8181      	strh	r1, [r0, #12]
 800546a:	6643      	str	r3, [r0, #100]	; 0x64
 800546c:	81c2      	strh	r2, [r0, #14]
 800546e:	6183      	str	r3, [r0, #24]
 8005470:	4619      	mov	r1, r3
 8005472:	2208      	movs	r2, #8
 8005474:	305c      	adds	r0, #92	; 0x5c
 8005476:	f7ff fdd7 	bl	8005028 <memset>
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <std+0x38>)
 800547c:	6263      	str	r3, [r4, #36]	; 0x24
 800547e:	4b05      	ldr	r3, [pc, #20]	; (8005494 <std+0x3c>)
 8005480:	62a3      	str	r3, [r4, #40]	; 0x28
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <std+0x40>)
 8005484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <std+0x44>)
 8005488:	6224      	str	r4, [r4, #32]
 800548a:	6323      	str	r3, [r4, #48]	; 0x30
 800548c:	bd10      	pop	{r4, pc}
 800548e:	bf00      	nop
 8005490:	08005ed1 	.word	0x08005ed1
 8005494:	08005ef3 	.word	0x08005ef3
 8005498:	08005f2b 	.word	0x08005f2b
 800549c:	08005f4f 	.word	0x08005f4f

080054a0 <_cleanup_r>:
 80054a0:	4901      	ldr	r1, [pc, #4]	; (80054a8 <_cleanup_r+0x8>)
 80054a2:	f000 b8af 	b.w	8005604 <_fwalk_reent>
 80054a6:	bf00      	nop
 80054a8:	080053e1 	.word	0x080053e1

080054ac <__sfmoreglue>:
 80054ac:	b570      	push	{r4, r5, r6, lr}
 80054ae:	2268      	movs	r2, #104	; 0x68
 80054b0:	1e4d      	subs	r5, r1, #1
 80054b2:	4355      	muls	r5, r2
 80054b4:	460e      	mov	r6, r1
 80054b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054ba:	f000 f997 	bl	80057ec <_malloc_r>
 80054be:	4604      	mov	r4, r0
 80054c0:	b140      	cbz	r0, 80054d4 <__sfmoreglue+0x28>
 80054c2:	2100      	movs	r1, #0
 80054c4:	e9c0 1600 	strd	r1, r6, [r0]
 80054c8:	300c      	adds	r0, #12
 80054ca:	60a0      	str	r0, [r4, #8]
 80054cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054d0:	f7ff fdaa 	bl	8005028 <memset>
 80054d4:	4620      	mov	r0, r4
 80054d6:	bd70      	pop	{r4, r5, r6, pc}

080054d8 <__sfp_lock_acquire>:
 80054d8:	4801      	ldr	r0, [pc, #4]	; (80054e0 <__sfp_lock_acquire+0x8>)
 80054da:	f000 b8b3 	b.w	8005644 <__retarget_lock_acquire_recursive>
 80054de:	bf00      	nop
 80054e0:	20001699 	.word	0x20001699

080054e4 <__sfp_lock_release>:
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <__sfp_lock_release+0x8>)
 80054e6:	f000 b8ae 	b.w	8005646 <__retarget_lock_release_recursive>
 80054ea:	bf00      	nop
 80054ec:	20001699 	.word	0x20001699

080054f0 <__sinit_lock_acquire>:
 80054f0:	4801      	ldr	r0, [pc, #4]	; (80054f8 <__sinit_lock_acquire+0x8>)
 80054f2:	f000 b8a7 	b.w	8005644 <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	2000169a 	.word	0x2000169a

080054fc <__sinit_lock_release>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__sinit_lock_release+0x8>)
 80054fe:	f000 b8a2 	b.w	8005646 <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	2000169a 	.word	0x2000169a

08005508 <__sinit>:
 8005508:	b510      	push	{r4, lr}
 800550a:	4604      	mov	r4, r0
 800550c:	f7ff fff0 	bl	80054f0 <__sinit_lock_acquire>
 8005510:	69a3      	ldr	r3, [r4, #24]
 8005512:	b11b      	cbz	r3, 800551c <__sinit+0x14>
 8005514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005518:	f7ff bff0 	b.w	80054fc <__sinit_lock_release>
 800551c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005520:	6523      	str	r3, [r4, #80]	; 0x50
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <__sinit+0x68>)
 8005524:	4a13      	ldr	r2, [pc, #76]	; (8005574 <__sinit+0x6c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	62a2      	str	r2, [r4, #40]	; 0x28
 800552a:	42a3      	cmp	r3, r4
 800552c:	bf04      	itt	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	61a3      	streq	r3, [r4, #24]
 8005532:	4620      	mov	r0, r4
 8005534:	f000 f820 	bl	8005578 <__sfp>
 8005538:	6060      	str	r0, [r4, #4]
 800553a:	4620      	mov	r0, r4
 800553c:	f000 f81c 	bl	8005578 <__sfp>
 8005540:	60a0      	str	r0, [r4, #8]
 8005542:	4620      	mov	r0, r4
 8005544:	f000 f818 	bl	8005578 <__sfp>
 8005548:	2200      	movs	r2, #0
 800554a:	60e0      	str	r0, [r4, #12]
 800554c:	2104      	movs	r1, #4
 800554e:	6860      	ldr	r0, [r4, #4]
 8005550:	f7ff ff82 	bl	8005458 <std>
 8005554:	68a0      	ldr	r0, [r4, #8]
 8005556:	2201      	movs	r2, #1
 8005558:	2109      	movs	r1, #9
 800555a:	f7ff ff7d 	bl	8005458 <std>
 800555e:	68e0      	ldr	r0, [r4, #12]
 8005560:	2202      	movs	r2, #2
 8005562:	2112      	movs	r1, #18
 8005564:	f7ff ff78 	bl	8005458 <std>
 8005568:	2301      	movs	r3, #1
 800556a:	61a3      	str	r3, [r4, #24]
 800556c:	e7d2      	b.n	8005514 <__sinit+0xc>
 800556e:	bf00      	nop
 8005570:	08006194 	.word	0x08006194
 8005574:	080054a1 	.word	0x080054a1

08005578 <__sfp>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	4607      	mov	r7, r0
 800557c:	f7ff ffac 	bl	80054d8 <__sfp_lock_acquire>
 8005580:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <__sfp+0x84>)
 8005582:	681e      	ldr	r6, [r3, #0]
 8005584:	69b3      	ldr	r3, [r6, #24]
 8005586:	b913      	cbnz	r3, 800558e <__sfp+0x16>
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff ffbd 	bl	8005508 <__sinit>
 800558e:	3648      	adds	r6, #72	; 0x48
 8005590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005594:	3b01      	subs	r3, #1
 8005596:	d503      	bpl.n	80055a0 <__sfp+0x28>
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	b30b      	cbz	r3, 80055e0 <__sfp+0x68>
 800559c:	6836      	ldr	r6, [r6, #0]
 800559e:	e7f7      	b.n	8005590 <__sfp+0x18>
 80055a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055a4:	b9d5      	cbnz	r5, 80055dc <__sfp+0x64>
 80055a6:	4b16      	ldr	r3, [pc, #88]	; (8005600 <__sfp+0x88>)
 80055a8:	60e3      	str	r3, [r4, #12]
 80055aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055ae:	6665      	str	r5, [r4, #100]	; 0x64
 80055b0:	f000 f847 	bl	8005642 <__retarget_lock_init_recursive>
 80055b4:	f7ff ff96 	bl	80054e4 <__sfp_lock_release>
 80055b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055c0:	6025      	str	r5, [r4, #0]
 80055c2:	61a5      	str	r5, [r4, #24]
 80055c4:	2208      	movs	r2, #8
 80055c6:	4629      	mov	r1, r5
 80055c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055cc:	f7ff fd2c 	bl	8005028 <memset>
 80055d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055d8:	4620      	mov	r0, r4
 80055da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055dc:	3468      	adds	r4, #104	; 0x68
 80055de:	e7d9      	b.n	8005594 <__sfp+0x1c>
 80055e0:	2104      	movs	r1, #4
 80055e2:	4638      	mov	r0, r7
 80055e4:	f7ff ff62 	bl	80054ac <__sfmoreglue>
 80055e8:	4604      	mov	r4, r0
 80055ea:	6030      	str	r0, [r6, #0]
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d1d5      	bne.n	800559c <__sfp+0x24>
 80055f0:	f7ff ff78 	bl	80054e4 <__sfp_lock_release>
 80055f4:	230c      	movs	r3, #12
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	e7ee      	b.n	80055d8 <__sfp+0x60>
 80055fa:	bf00      	nop
 80055fc:	08006194 	.word	0x08006194
 8005600:	ffff0001 	.word	0xffff0001

08005604 <_fwalk_reent>:
 8005604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005608:	4606      	mov	r6, r0
 800560a:	4688      	mov	r8, r1
 800560c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005610:	2700      	movs	r7, #0
 8005612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005616:	f1b9 0901 	subs.w	r9, r9, #1
 800561a:	d505      	bpl.n	8005628 <_fwalk_reent+0x24>
 800561c:	6824      	ldr	r4, [r4, #0]
 800561e:	2c00      	cmp	r4, #0
 8005620:	d1f7      	bne.n	8005612 <_fwalk_reent+0xe>
 8005622:	4638      	mov	r0, r7
 8005624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005628:	89ab      	ldrh	r3, [r5, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d907      	bls.n	800563e <_fwalk_reent+0x3a>
 800562e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005632:	3301      	adds	r3, #1
 8005634:	d003      	beq.n	800563e <_fwalk_reent+0x3a>
 8005636:	4629      	mov	r1, r5
 8005638:	4630      	mov	r0, r6
 800563a:	47c0      	blx	r8
 800563c:	4307      	orrs	r7, r0
 800563e:	3568      	adds	r5, #104	; 0x68
 8005640:	e7e9      	b.n	8005616 <_fwalk_reent+0x12>

08005642 <__retarget_lock_init_recursive>:
 8005642:	4770      	bx	lr

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <__swhatbuf_r>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	460e      	mov	r6, r1
 800564c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005650:	2900      	cmp	r1, #0
 8005652:	b096      	sub	sp, #88	; 0x58
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	da08      	bge.n	800566c <__swhatbuf_r+0x24>
 800565a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	602a      	str	r2, [r5, #0]
 8005662:	061a      	lsls	r2, r3, #24
 8005664:	d410      	bmi.n	8005688 <__swhatbuf_r+0x40>
 8005666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566a:	e00e      	b.n	800568a <__swhatbuf_r+0x42>
 800566c:	466a      	mov	r2, sp
 800566e:	f000 fc95 	bl	8005f9c <_fstat_r>
 8005672:	2800      	cmp	r0, #0
 8005674:	dbf1      	blt.n	800565a <__swhatbuf_r+0x12>
 8005676:	9a01      	ldr	r2, [sp, #4]
 8005678:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800567c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005680:	425a      	negs	r2, r3
 8005682:	415a      	adcs	r2, r3
 8005684:	602a      	str	r2, [r5, #0]
 8005686:	e7ee      	b.n	8005666 <__swhatbuf_r+0x1e>
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	2000      	movs	r0, #0
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	b016      	add	sp, #88	; 0x58
 8005690:	bd70      	pop	{r4, r5, r6, pc}
	...

08005694 <__smakebuf_r>:
 8005694:	898b      	ldrh	r3, [r1, #12]
 8005696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005698:	079d      	lsls	r5, r3, #30
 800569a:	4606      	mov	r6, r0
 800569c:	460c      	mov	r4, r1
 800569e:	d507      	bpl.n	80056b0 <__smakebuf_r+0x1c>
 80056a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	6123      	str	r3, [r4, #16]
 80056a8:	2301      	movs	r3, #1
 80056aa:	6163      	str	r3, [r4, #20]
 80056ac:	b002      	add	sp, #8
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	ab01      	add	r3, sp, #4
 80056b2:	466a      	mov	r2, sp
 80056b4:	f7ff ffc8 	bl	8005648 <__swhatbuf_r>
 80056b8:	9900      	ldr	r1, [sp, #0]
 80056ba:	4605      	mov	r5, r0
 80056bc:	4630      	mov	r0, r6
 80056be:	f000 f895 	bl	80057ec <_malloc_r>
 80056c2:	b948      	cbnz	r0, 80056d8 <__smakebuf_r+0x44>
 80056c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c8:	059a      	lsls	r2, r3, #22
 80056ca:	d4ef      	bmi.n	80056ac <__smakebuf_r+0x18>
 80056cc:	f023 0303 	bic.w	r3, r3, #3
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	e7e3      	b.n	80056a0 <__smakebuf_r+0xc>
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <__smakebuf_r+0x7c>)
 80056da:	62b3      	str	r3, [r6, #40]	; 0x28
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	6020      	str	r0, [r4, #0]
 80056e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e4:	81a3      	strh	r3, [r4, #12]
 80056e6:	9b00      	ldr	r3, [sp, #0]
 80056e8:	6163      	str	r3, [r4, #20]
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	6120      	str	r0, [r4, #16]
 80056ee:	b15b      	cbz	r3, 8005708 <__smakebuf_r+0x74>
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 fc63 	bl	8005fc0 <_isatty_r>
 80056fa:	b128      	cbz	r0, 8005708 <__smakebuf_r+0x74>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	89a0      	ldrh	r0, [r4, #12]
 800570a:	4305      	orrs	r5, r0
 800570c:	81a5      	strh	r5, [r4, #12]
 800570e:	e7cd      	b.n	80056ac <__smakebuf_r+0x18>
 8005710:	080054a1 	.word	0x080054a1

08005714 <_free_r>:
 8005714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005716:	2900      	cmp	r1, #0
 8005718:	d044      	beq.n	80057a4 <_free_r+0x90>
 800571a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800571e:	9001      	str	r0, [sp, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	f1a1 0404 	sub.w	r4, r1, #4
 8005726:	bfb8      	it	lt
 8005728:	18e4      	addlt	r4, r4, r3
 800572a:	f000 fc6b 	bl	8006004 <__malloc_lock>
 800572e:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <_free_r+0x94>)
 8005730:	9801      	ldr	r0, [sp, #4]
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	b933      	cbnz	r3, 8005744 <_free_r+0x30>
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	b003      	add	sp, #12
 800573c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005740:	f000 bc66 	b.w	8006010 <__malloc_unlock>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x46>
 8005748:	6825      	ldr	r5, [r4, #0]
 800574a:	1961      	adds	r1, r4, r5
 800574c:	428b      	cmp	r3, r1
 800574e:	bf01      	itttt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	1949      	addeq	r1, r1, r5
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	e7ed      	b.n	8005736 <_free_r+0x22>
 800575a:	461a      	mov	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b10b      	cbz	r3, 8005764 <_free_r+0x50>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x46>
 8005764:	6811      	ldr	r1, [r2, #0]
 8005766:	1855      	adds	r5, r2, r1
 8005768:	42a5      	cmp	r5, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x70>
 800576c:	6824      	ldr	r4, [r4, #0]
 800576e:	4421      	add	r1, r4
 8005770:	1854      	adds	r4, r2, r1
 8005772:	42a3      	cmp	r3, r4
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	d1e0      	bne.n	800573a <_free_r+0x26>
 8005778:	681c      	ldr	r4, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	6053      	str	r3, [r2, #4]
 800577e:	4421      	add	r1, r4
 8005780:	6011      	str	r1, [r2, #0]
 8005782:	e7da      	b.n	800573a <_free_r+0x26>
 8005784:	d902      	bls.n	800578c <_free_r+0x78>
 8005786:	230c      	movs	r3, #12
 8005788:	6003      	str	r3, [r0, #0]
 800578a:	e7d6      	b.n	800573a <_free_r+0x26>
 800578c:	6825      	ldr	r5, [r4, #0]
 800578e:	1961      	adds	r1, r4, r5
 8005790:	428b      	cmp	r3, r1
 8005792:	bf04      	itt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	bf04      	itt	eq
 800579c:	1949      	addeq	r1, r1, r5
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	6054      	str	r4, [r2, #4]
 80057a2:	e7ca      	b.n	800573a <_free_r+0x26>
 80057a4:	b003      	add	sp, #12
 80057a6:	bd30      	pop	{r4, r5, pc}
 80057a8:	2000169c 	.word	0x2000169c

080057ac <sbrk_aligned>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4e0e      	ldr	r6, [pc, #56]	; (80057e8 <sbrk_aligned+0x3c>)
 80057b0:	460c      	mov	r4, r1
 80057b2:	6831      	ldr	r1, [r6, #0]
 80057b4:	4605      	mov	r5, r0
 80057b6:	b911      	cbnz	r1, 80057be <sbrk_aligned+0x12>
 80057b8:	f000 fb7a 	bl	8005eb0 <_sbrk_r>
 80057bc:	6030      	str	r0, [r6, #0]
 80057be:	4621      	mov	r1, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 fb75 	bl	8005eb0 <_sbrk_r>
 80057c6:	1c43      	adds	r3, r0, #1
 80057c8:	d00a      	beq.n	80057e0 <sbrk_aligned+0x34>
 80057ca:	1cc4      	adds	r4, r0, #3
 80057cc:	f024 0403 	bic.w	r4, r4, #3
 80057d0:	42a0      	cmp	r0, r4
 80057d2:	d007      	beq.n	80057e4 <sbrk_aligned+0x38>
 80057d4:	1a21      	subs	r1, r4, r0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fb6a 	bl	8005eb0 <_sbrk_r>
 80057dc:	3001      	adds	r0, #1
 80057de:	d101      	bne.n	80057e4 <sbrk_aligned+0x38>
 80057e0:	f04f 34ff 	mov.w	r4, #4294967295
 80057e4:	4620      	mov	r0, r4
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	200016a0 	.word	0x200016a0

080057ec <_malloc_r>:
 80057ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f0:	1ccd      	adds	r5, r1, #3
 80057f2:	f025 0503 	bic.w	r5, r5, #3
 80057f6:	3508      	adds	r5, #8
 80057f8:	2d0c      	cmp	r5, #12
 80057fa:	bf38      	it	cc
 80057fc:	250c      	movcc	r5, #12
 80057fe:	2d00      	cmp	r5, #0
 8005800:	4607      	mov	r7, r0
 8005802:	db01      	blt.n	8005808 <_malloc_r+0x1c>
 8005804:	42a9      	cmp	r1, r5
 8005806:	d905      	bls.n	8005814 <_malloc_r+0x28>
 8005808:	230c      	movs	r3, #12
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	2600      	movs	r6, #0
 800580e:	4630      	mov	r0, r6
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	4e2e      	ldr	r6, [pc, #184]	; (80058d0 <_malloc_r+0xe4>)
 8005816:	f000 fbf5 	bl	8006004 <__malloc_lock>
 800581a:	6833      	ldr	r3, [r6, #0]
 800581c:	461c      	mov	r4, r3
 800581e:	bb34      	cbnz	r4, 800586e <_malloc_r+0x82>
 8005820:	4629      	mov	r1, r5
 8005822:	4638      	mov	r0, r7
 8005824:	f7ff ffc2 	bl	80057ac <sbrk_aligned>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	4604      	mov	r4, r0
 800582c:	d14d      	bne.n	80058ca <_malloc_r+0xde>
 800582e:	6834      	ldr	r4, [r6, #0]
 8005830:	4626      	mov	r6, r4
 8005832:	2e00      	cmp	r6, #0
 8005834:	d140      	bne.n	80058b8 <_malloc_r+0xcc>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	4631      	mov	r1, r6
 800583a:	4638      	mov	r0, r7
 800583c:	eb04 0803 	add.w	r8, r4, r3
 8005840:	f000 fb36 	bl	8005eb0 <_sbrk_r>
 8005844:	4580      	cmp	r8, r0
 8005846:	d13a      	bne.n	80058be <_malloc_r+0xd2>
 8005848:	6821      	ldr	r1, [r4, #0]
 800584a:	3503      	adds	r5, #3
 800584c:	1a6d      	subs	r5, r5, r1
 800584e:	f025 0503 	bic.w	r5, r5, #3
 8005852:	3508      	adds	r5, #8
 8005854:	2d0c      	cmp	r5, #12
 8005856:	bf38      	it	cc
 8005858:	250c      	movcc	r5, #12
 800585a:	4629      	mov	r1, r5
 800585c:	4638      	mov	r0, r7
 800585e:	f7ff ffa5 	bl	80057ac <sbrk_aligned>
 8005862:	3001      	adds	r0, #1
 8005864:	d02b      	beq.n	80058be <_malloc_r+0xd2>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	442b      	add	r3, r5
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	e00e      	b.n	800588c <_malloc_r+0xa0>
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	1b52      	subs	r2, r2, r5
 8005872:	d41e      	bmi.n	80058b2 <_malloc_r+0xc6>
 8005874:	2a0b      	cmp	r2, #11
 8005876:	d916      	bls.n	80058a6 <_malloc_r+0xba>
 8005878:	1961      	adds	r1, r4, r5
 800587a:	42a3      	cmp	r3, r4
 800587c:	6025      	str	r5, [r4, #0]
 800587e:	bf18      	it	ne
 8005880:	6059      	strne	r1, [r3, #4]
 8005882:	6863      	ldr	r3, [r4, #4]
 8005884:	bf08      	it	eq
 8005886:	6031      	streq	r1, [r6, #0]
 8005888:	5162      	str	r2, [r4, r5]
 800588a:	604b      	str	r3, [r1, #4]
 800588c:	4638      	mov	r0, r7
 800588e:	f104 060b 	add.w	r6, r4, #11
 8005892:	f000 fbbd 	bl	8006010 <__malloc_unlock>
 8005896:	f026 0607 	bic.w	r6, r6, #7
 800589a:	1d23      	adds	r3, r4, #4
 800589c:	1af2      	subs	r2, r6, r3
 800589e:	d0b6      	beq.n	800580e <_malloc_r+0x22>
 80058a0:	1b9b      	subs	r3, r3, r6
 80058a2:	50a3      	str	r3, [r4, r2]
 80058a4:	e7b3      	b.n	800580e <_malloc_r+0x22>
 80058a6:	6862      	ldr	r2, [r4, #4]
 80058a8:	42a3      	cmp	r3, r4
 80058aa:	bf0c      	ite	eq
 80058ac:	6032      	streq	r2, [r6, #0]
 80058ae:	605a      	strne	r2, [r3, #4]
 80058b0:	e7ec      	b.n	800588c <_malloc_r+0xa0>
 80058b2:	4623      	mov	r3, r4
 80058b4:	6864      	ldr	r4, [r4, #4]
 80058b6:	e7b2      	b.n	800581e <_malloc_r+0x32>
 80058b8:	4634      	mov	r4, r6
 80058ba:	6876      	ldr	r6, [r6, #4]
 80058bc:	e7b9      	b.n	8005832 <_malloc_r+0x46>
 80058be:	230c      	movs	r3, #12
 80058c0:	603b      	str	r3, [r7, #0]
 80058c2:	4638      	mov	r0, r7
 80058c4:	f000 fba4 	bl	8006010 <__malloc_unlock>
 80058c8:	e7a1      	b.n	800580e <_malloc_r+0x22>
 80058ca:	6025      	str	r5, [r4, #0]
 80058cc:	e7de      	b.n	800588c <_malloc_r+0xa0>
 80058ce:	bf00      	nop
 80058d0:	2000169c 	.word	0x2000169c

080058d4 <__sfputc_r>:
 80058d4:	6893      	ldr	r3, [r2, #8]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	b410      	push	{r4}
 80058dc:	6093      	str	r3, [r2, #8]
 80058de:	da08      	bge.n	80058f2 <__sfputc_r+0x1e>
 80058e0:	6994      	ldr	r4, [r2, #24]
 80058e2:	42a3      	cmp	r3, r4
 80058e4:	db01      	blt.n	80058ea <__sfputc_r+0x16>
 80058e6:	290a      	cmp	r1, #10
 80058e8:	d103      	bne.n	80058f2 <__sfputc_r+0x1e>
 80058ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ee:	f7ff bc31 	b.w	8005154 <__swbuf_r>
 80058f2:	6813      	ldr	r3, [r2, #0]
 80058f4:	1c58      	adds	r0, r3, #1
 80058f6:	6010      	str	r0, [r2, #0]
 80058f8:	7019      	strb	r1, [r3, #0]
 80058fa:	4608      	mov	r0, r1
 80058fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005900:	4770      	bx	lr

08005902 <__sfputs_r>:
 8005902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005904:	4606      	mov	r6, r0
 8005906:	460f      	mov	r7, r1
 8005908:	4614      	mov	r4, r2
 800590a:	18d5      	adds	r5, r2, r3
 800590c:	42ac      	cmp	r4, r5
 800590e:	d101      	bne.n	8005914 <__sfputs_r+0x12>
 8005910:	2000      	movs	r0, #0
 8005912:	e007      	b.n	8005924 <__sfputs_r+0x22>
 8005914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005918:	463a      	mov	r2, r7
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ffda 	bl	80058d4 <__sfputc_r>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d1f3      	bne.n	800590c <__sfputs_r+0xa>
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005928 <_vfiprintf_r>:
 8005928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592c:	460d      	mov	r5, r1
 800592e:	b09d      	sub	sp, #116	; 0x74
 8005930:	4614      	mov	r4, r2
 8005932:	4698      	mov	r8, r3
 8005934:	4606      	mov	r6, r0
 8005936:	b118      	cbz	r0, 8005940 <_vfiprintf_r+0x18>
 8005938:	6983      	ldr	r3, [r0, #24]
 800593a:	b90b      	cbnz	r3, 8005940 <_vfiprintf_r+0x18>
 800593c:	f7ff fde4 	bl	8005508 <__sinit>
 8005940:	4b89      	ldr	r3, [pc, #548]	; (8005b68 <_vfiprintf_r+0x240>)
 8005942:	429d      	cmp	r5, r3
 8005944:	d11b      	bne.n	800597e <_vfiprintf_r+0x56>
 8005946:	6875      	ldr	r5, [r6, #4]
 8005948:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800594a:	07d9      	lsls	r1, r3, #31
 800594c:	d405      	bmi.n	800595a <_vfiprintf_r+0x32>
 800594e:	89ab      	ldrh	r3, [r5, #12]
 8005950:	059a      	lsls	r2, r3, #22
 8005952:	d402      	bmi.n	800595a <_vfiprintf_r+0x32>
 8005954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005956:	f7ff fe75 	bl	8005644 <__retarget_lock_acquire_recursive>
 800595a:	89ab      	ldrh	r3, [r5, #12]
 800595c:	071b      	lsls	r3, r3, #28
 800595e:	d501      	bpl.n	8005964 <_vfiprintf_r+0x3c>
 8005960:	692b      	ldr	r3, [r5, #16]
 8005962:	b9eb      	cbnz	r3, 80059a0 <_vfiprintf_r+0x78>
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff fc46 	bl	80051f8 <__swsetup_r>
 800596c:	b1c0      	cbz	r0, 80059a0 <_vfiprintf_r+0x78>
 800596e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005970:	07dc      	lsls	r4, r3, #31
 8005972:	d50e      	bpl.n	8005992 <_vfiprintf_r+0x6a>
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	b01d      	add	sp, #116	; 0x74
 800597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597e:	4b7b      	ldr	r3, [pc, #492]	; (8005b6c <_vfiprintf_r+0x244>)
 8005980:	429d      	cmp	r5, r3
 8005982:	d101      	bne.n	8005988 <_vfiprintf_r+0x60>
 8005984:	68b5      	ldr	r5, [r6, #8]
 8005986:	e7df      	b.n	8005948 <_vfiprintf_r+0x20>
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <_vfiprintf_r+0x248>)
 800598a:	429d      	cmp	r5, r3
 800598c:	bf08      	it	eq
 800598e:	68f5      	ldreq	r5, [r6, #12]
 8005990:	e7da      	b.n	8005948 <_vfiprintf_r+0x20>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	0598      	lsls	r0, r3, #22
 8005996:	d4ed      	bmi.n	8005974 <_vfiprintf_r+0x4c>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff fe54 	bl	8005646 <__retarget_lock_release_recursive>
 800599e:	e7e9      	b.n	8005974 <_vfiprintf_r+0x4c>
 80059a0:	2300      	movs	r3, #0
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	2320      	movs	r3, #32
 80059a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ae:	2330      	movs	r3, #48	; 0x30
 80059b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b74 <_vfiprintf_r+0x24c>
 80059b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b8:	f04f 0901 	mov.w	r9, #1
 80059bc:	4623      	mov	r3, r4
 80059be:	469a      	mov	sl, r3
 80059c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059c4:	b10a      	cbz	r2, 80059ca <_vfiprintf_r+0xa2>
 80059c6:	2a25      	cmp	r2, #37	; 0x25
 80059c8:	d1f9      	bne.n	80059be <_vfiprintf_r+0x96>
 80059ca:	ebba 0b04 	subs.w	fp, sl, r4
 80059ce:	d00b      	beq.n	80059e8 <_vfiprintf_r+0xc0>
 80059d0:	465b      	mov	r3, fp
 80059d2:	4622      	mov	r2, r4
 80059d4:	4629      	mov	r1, r5
 80059d6:	4630      	mov	r0, r6
 80059d8:	f7ff ff93 	bl	8005902 <__sfputs_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	f000 80aa 	beq.w	8005b36 <_vfiprintf_r+0x20e>
 80059e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e4:	445a      	add	r2, fp
 80059e6:	9209      	str	r2, [sp, #36]	; 0x24
 80059e8:	f89a 3000 	ldrb.w	r3, [sl]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80a2 	beq.w	8005b36 <_vfiprintf_r+0x20e>
 80059f2:	2300      	movs	r3, #0
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295
 80059f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059fc:	f10a 0a01 	add.w	sl, sl, #1
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a08:	931a      	str	r3, [sp, #104]	; 0x68
 8005a0a:	4654      	mov	r4, sl
 8005a0c:	2205      	movs	r2, #5
 8005a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a12:	4858      	ldr	r0, [pc, #352]	; (8005b74 <_vfiprintf_r+0x24c>)
 8005a14:	f7fa fbe4 	bl	80001e0 <memchr>
 8005a18:	9a04      	ldr	r2, [sp, #16]
 8005a1a:	b9d8      	cbnz	r0, 8005a54 <_vfiprintf_r+0x12c>
 8005a1c:	06d1      	lsls	r1, r2, #27
 8005a1e:	bf44      	itt	mi
 8005a20:	2320      	movmi	r3, #32
 8005a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a26:	0713      	lsls	r3, r2, #28
 8005a28:	bf44      	itt	mi
 8005a2a:	232b      	movmi	r3, #43	; 0x2b
 8005a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a30:	f89a 3000 	ldrb.w	r3, [sl]
 8005a34:	2b2a      	cmp	r3, #42	; 0x2a
 8005a36:	d015      	beq.n	8005a64 <_vfiprintf_r+0x13c>
 8005a38:	9a07      	ldr	r2, [sp, #28]
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f04f 0c0a 	mov.w	ip, #10
 8005a42:	4621      	mov	r1, r4
 8005a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a48:	3b30      	subs	r3, #48	; 0x30
 8005a4a:	2b09      	cmp	r3, #9
 8005a4c:	d94e      	bls.n	8005aec <_vfiprintf_r+0x1c4>
 8005a4e:	b1b0      	cbz	r0, 8005a7e <_vfiprintf_r+0x156>
 8005a50:	9207      	str	r2, [sp, #28]
 8005a52:	e014      	b.n	8005a7e <_vfiprintf_r+0x156>
 8005a54:	eba0 0308 	sub.w	r3, r0, r8
 8005a58:	fa09 f303 	lsl.w	r3, r9, r3
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	46a2      	mov	sl, r4
 8005a62:	e7d2      	b.n	8005a0a <_vfiprintf_r+0xe2>
 8005a64:	9b03      	ldr	r3, [sp, #12]
 8005a66:	1d19      	adds	r1, r3, #4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	9103      	str	r1, [sp, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bfbb      	ittet	lt
 8005a70:	425b      	neglt	r3, r3
 8005a72:	f042 0202 	orrlt.w	r2, r2, #2
 8005a76:	9307      	strge	r3, [sp, #28]
 8005a78:	9307      	strlt	r3, [sp, #28]
 8005a7a:	bfb8      	it	lt
 8005a7c:	9204      	strlt	r2, [sp, #16]
 8005a7e:	7823      	ldrb	r3, [r4, #0]
 8005a80:	2b2e      	cmp	r3, #46	; 0x2e
 8005a82:	d10c      	bne.n	8005a9e <_vfiprintf_r+0x176>
 8005a84:	7863      	ldrb	r3, [r4, #1]
 8005a86:	2b2a      	cmp	r3, #42	; 0x2a
 8005a88:	d135      	bne.n	8005af6 <_vfiprintf_r+0x1ce>
 8005a8a:	9b03      	ldr	r3, [sp, #12]
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	9203      	str	r2, [sp, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	bfb8      	it	lt
 8005a96:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a9a:	3402      	adds	r4, #2
 8005a9c:	9305      	str	r3, [sp, #20]
 8005a9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b84 <_vfiprintf_r+0x25c>
 8005aa2:	7821      	ldrb	r1, [r4, #0]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	f7fa fb9a 	bl	80001e0 <memchr>
 8005aac:	b140      	cbz	r0, 8005ac0 <_vfiprintf_r+0x198>
 8005aae:	2340      	movs	r3, #64	; 0x40
 8005ab0:	eba0 000a 	sub.w	r0, r0, sl
 8005ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ab8:	9b04      	ldr	r3, [sp, #16]
 8005aba:	4303      	orrs	r3, r0
 8005abc:	3401      	adds	r4, #1
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac4:	482c      	ldr	r0, [pc, #176]	; (8005b78 <_vfiprintf_r+0x250>)
 8005ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005aca:	2206      	movs	r2, #6
 8005acc:	f7fa fb88 	bl	80001e0 <memchr>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d03f      	beq.n	8005b54 <_vfiprintf_r+0x22c>
 8005ad4:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <_vfiprintf_r+0x254>)
 8005ad6:	bb1b      	cbnz	r3, 8005b20 <_vfiprintf_r+0x1f8>
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	3307      	adds	r3, #7
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	443b      	add	r3, r7
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	e767      	b.n	80059bc <_vfiprintf_r+0x94>
 8005aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af0:	460c      	mov	r4, r1
 8005af2:	2001      	movs	r0, #1
 8005af4:	e7a5      	b.n	8005a42 <_vfiprintf_r+0x11a>
 8005af6:	2300      	movs	r3, #0
 8005af8:	3401      	adds	r4, #1
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	4619      	mov	r1, r3
 8005afe:	f04f 0c0a 	mov.w	ip, #10
 8005b02:	4620      	mov	r0, r4
 8005b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b08:	3a30      	subs	r2, #48	; 0x30
 8005b0a:	2a09      	cmp	r2, #9
 8005b0c:	d903      	bls.n	8005b16 <_vfiprintf_r+0x1ee>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c5      	beq.n	8005a9e <_vfiprintf_r+0x176>
 8005b12:	9105      	str	r1, [sp, #20]
 8005b14:	e7c3      	b.n	8005a9e <_vfiprintf_r+0x176>
 8005b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e7f0      	b.n	8005b02 <_vfiprintf_r+0x1da>
 8005b20:	ab03      	add	r3, sp, #12
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	462a      	mov	r2, r5
 8005b26:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <_vfiprintf_r+0x258>)
 8005b28:	a904      	add	r1, sp, #16
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	f3af 8000 	nop.w
 8005b30:	4607      	mov	r7, r0
 8005b32:	1c78      	adds	r0, r7, #1
 8005b34:	d1d6      	bne.n	8005ae4 <_vfiprintf_r+0x1bc>
 8005b36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b38:	07d9      	lsls	r1, r3, #31
 8005b3a:	d405      	bmi.n	8005b48 <_vfiprintf_r+0x220>
 8005b3c:	89ab      	ldrh	r3, [r5, #12]
 8005b3e:	059a      	lsls	r2, r3, #22
 8005b40:	d402      	bmi.n	8005b48 <_vfiprintf_r+0x220>
 8005b42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b44:	f7ff fd7f 	bl	8005646 <__retarget_lock_release_recursive>
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af12 	bmi.w	8005974 <_vfiprintf_r+0x4c>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	e711      	b.n	8005978 <_vfiprintf_r+0x50>
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <_vfiprintf_r+0x258>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	4630      	mov	r0, r6
 8005b60:	f000 f880 	bl	8005c64 <_printf_i>
 8005b64:	e7e4      	b.n	8005b30 <_vfiprintf_r+0x208>
 8005b66:	bf00      	nop
 8005b68:	080061b8 	.word	0x080061b8
 8005b6c:	080061d8 	.word	0x080061d8
 8005b70:	08006198 	.word	0x08006198
 8005b74:	080061f8 	.word	0x080061f8
 8005b78:	08006202 	.word	0x08006202
 8005b7c:	00000000 	.word	0x00000000
 8005b80:	08005903 	.word	0x08005903
 8005b84:	080061fe 	.word	0x080061fe

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	4699      	mov	r9, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	6033      	str	r3, [r6, #0]
 8005ba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	b10a      	cbz	r2, 8005bae <_printf_common+0x26>
 8005baa:	3301      	adds	r3, #1
 8005bac:	6033      	str	r3, [r6, #0]
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	0699      	lsls	r1, r3, #26
 8005bb2:	bf42      	ittt	mi
 8005bb4:	6833      	ldrmi	r3, [r6, #0]
 8005bb6:	3302      	addmi	r3, #2
 8005bb8:	6033      	strmi	r3, [r6, #0]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d106      	bne.n	8005bd0 <_printf_common+0x48>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	6832      	ldr	r2, [r6, #0]
 8005bca:	1a9b      	subs	r3, r3, r2
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	dc26      	bgt.n	8005c1e <_printf_common+0x96>
 8005bd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bd4:	1e13      	subs	r3, r2, #0
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	bf18      	it	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	0692      	lsls	r2, r2, #26
 8005bde:	d42b      	bmi.n	8005c38 <_printf_common+0xb0>
 8005be0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d01e      	beq.n	8005c2c <_printf_common+0xa4>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	68e5      	ldr	r5, [r4, #12]
 8005bf2:	6832      	ldr	r2, [r6, #0]
 8005bf4:	f003 0306 	and.w	r3, r3, #6
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	bf08      	it	eq
 8005bfc:	1aad      	subeq	r5, r5, r2
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	bf0c      	ite	eq
 8005c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c08:	2500      	movne	r5, #0
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	bfc4      	itt	gt
 8005c0e:	1a9b      	subgt	r3, r3, r2
 8005c10:	18ed      	addgt	r5, r5, r3
 8005c12:	2600      	movs	r6, #0
 8005c14:	341a      	adds	r4, #26
 8005c16:	42b5      	cmp	r5, r6
 8005c18:	d11a      	bne.n	8005c50 <_printf_common+0xc8>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e008      	b.n	8005c30 <_printf_common+0xa8>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4652      	mov	r2, sl
 8005c22:	4649      	mov	r1, r9
 8005c24:	4638      	mov	r0, r7
 8005c26:	47c0      	blx	r8
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d103      	bne.n	8005c34 <_printf_common+0xac>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c34:	3501      	adds	r5, #1
 8005c36:	e7c6      	b.n	8005bc6 <_printf_common+0x3e>
 8005c38:	18e1      	adds	r1, r4, r3
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	2030      	movs	r0, #48	; 0x30
 8005c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c42:	4422      	add	r2, r4
 8005c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	e7c7      	b.n	8005be0 <_printf_common+0x58>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4622      	mov	r2, r4
 8005c54:	4649      	mov	r1, r9
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d0e6      	beq.n	8005c2c <_printf_common+0xa4>
 8005c5e:	3601      	adds	r6, #1
 8005c60:	e7d9      	b.n	8005c16 <_printf_common+0x8e>
	...

08005c64 <_printf_i>:
 8005c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c68:	7e0f      	ldrb	r7, [r1, #24]
 8005c6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c6c:	2f78      	cmp	r7, #120	; 0x78
 8005c6e:	4691      	mov	r9, r2
 8005c70:	4680      	mov	r8, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	469a      	mov	sl, r3
 8005c76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c7a:	d807      	bhi.n	8005c8c <_printf_i+0x28>
 8005c7c:	2f62      	cmp	r7, #98	; 0x62
 8005c7e:	d80a      	bhi.n	8005c96 <_printf_i+0x32>
 8005c80:	2f00      	cmp	r7, #0
 8005c82:	f000 80d8 	beq.w	8005e36 <_printf_i+0x1d2>
 8005c86:	2f58      	cmp	r7, #88	; 0x58
 8005c88:	f000 80a3 	beq.w	8005dd2 <_printf_i+0x16e>
 8005c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c94:	e03a      	b.n	8005d0c <_printf_i+0xa8>
 8005c96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c9a:	2b15      	cmp	r3, #21
 8005c9c:	d8f6      	bhi.n	8005c8c <_printf_i+0x28>
 8005c9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ca4 <_printf_i+0x40>)
 8005ca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005d11 	.word	0x08005d11
 8005cac:	08005c8d 	.word	0x08005c8d
 8005cb0:	08005c8d 	.word	0x08005c8d
 8005cb4:	08005c8d 	.word	0x08005c8d
 8005cb8:	08005c8d 	.word	0x08005c8d
 8005cbc:	08005d11 	.word	0x08005d11
 8005cc0:	08005c8d 	.word	0x08005c8d
 8005cc4:	08005c8d 	.word	0x08005c8d
 8005cc8:	08005c8d 	.word	0x08005c8d
 8005ccc:	08005c8d 	.word	0x08005c8d
 8005cd0:	08005e1d 	.word	0x08005e1d
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005dff 	.word	0x08005dff
 8005cdc:	08005c8d 	.word	0x08005c8d
 8005ce0:	08005c8d 	.word	0x08005c8d
 8005ce4:	08005e3f 	.word	0x08005e3f
 8005ce8:	08005c8d 	.word	0x08005c8d
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005c8d 	.word	0x08005c8d
 8005cf4:	08005c8d 	.word	0x08005c8d
 8005cf8:	08005e07 	.word	0x08005e07
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a3      	b.n	8005e58 <_printf_i+0x1f4>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	6829      	ldr	r1, [r5, #0]
 8005d14:	0606      	lsls	r6, r0, #24
 8005d16:	f101 0304 	add.w	r3, r1, #4
 8005d1a:	d50a      	bpl.n	8005d32 <_printf_i+0xce>
 8005d1c:	680e      	ldr	r6, [r1, #0]
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	2e00      	cmp	r6, #0
 8005d22:	da03      	bge.n	8005d2c <_printf_i+0xc8>
 8005d24:	232d      	movs	r3, #45	; 0x2d
 8005d26:	4276      	negs	r6, r6
 8005d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2c:	485e      	ldr	r0, [pc, #376]	; (8005ea8 <_printf_i+0x244>)
 8005d2e:	230a      	movs	r3, #10
 8005d30:	e019      	b.n	8005d66 <_printf_i+0x102>
 8005d32:	680e      	ldr	r6, [r1, #0]
 8005d34:	602b      	str	r3, [r5, #0]
 8005d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d3a:	bf18      	it	ne
 8005d3c:	b236      	sxthne	r6, r6
 8005d3e:	e7ef      	b.n	8005d20 <_printf_i+0xbc>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	6820      	ldr	r0, [r4, #0]
 8005d44:	1d19      	adds	r1, r3, #4
 8005d46:	6029      	str	r1, [r5, #0]
 8005d48:	0601      	lsls	r1, r0, #24
 8005d4a:	d501      	bpl.n	8005d50 <_printf_i+0xec>
 8005d4c:	681e      	ldr	r6, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <_printf_i+0xf2>
 8005d50:	0646      	lsls	r6, r0, #25
 8005d52:	d5fb      	bpl.n	8005d4c <_printf_i+0xe8>
 8005d54:	881e      	ldrh	r6, [r3, #0]
 8005d56:	4854      	ldr	r0, [pc, #336]	; (8005ea8 <_printf_i+0x244>)
 8005d58:	2f6f      	cmp	r7, #111	; 0x6f
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2308      	moveq	r3, #8
 8005d5e:	230a      	movne	r3, #10
 8005d60:	2100      	movs	r1, #0
 8005d62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d66:	6865      	ldr	r5, [r4, #4]
 8005d68:	60a5      	str	r5, [r4, #8]
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	bfa2      	ittt	ge
 8005d6e:	6821      	ldrge	r1, [r4, #0]
 8005d70:	f021 0104 	bicge.w	r1, r1, #4
 8005d74:	6021      	strge	r1, [r4, #0]
 8005d76:	b90e      	cbnz	r6, 8005d7c <_printf_i+0x118>
 8005d78:	2d00      	cmp	r5, #0
 8005d7a:	d04d      	beq.n	8005e18 <_printf_i+0x1b4>
 8005d7c:	4615      	mov	r5, r2
 8005d7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d82:	fb03 6711 	mls	r7, r3, r1, r6
 8005d86:	5dc7      	ldrb	r7, [r0, r7]
 8005d88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d8c:	4637      	mov	r7, r6
 8005d8e:	42bb      	cmp	r3, r7
 8005d90:	460e      	mov	r6, r1
 8005d92:	d9f4      	bls.n	8005d7e <_printf_i+0x11a>
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d10b      	bne.n	8005db0 <_printf_i+0x14c>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	07de      	lsls	r6, r3, #31
 8005d9c:	d508      	bpl.n	8005db0 <_printf_i+0x14c>
 8005d9e:	6923      	ldr	r3, [r4, #16]
 8005da0:	6861      	ldr	r1, [r4, #4]
 8005da2:	4299      	cmp	r1, r3
 8005da4:	bfde      	ittt	le
 8005da6:	2330      	movle	r3, #48	; 0x30
 8005da8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005db0:	1b52      	subs	r2, r2, r5
 8005db2:	6122      	str	r2, [r4, #16]
 8005db4:	f8cd a000 	str.w	sl, [sp]
 8005db8:	464b      	mov	r3, r9
 8005dba:	aa03      	add	r2, sp, #12
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff fee2 	bl	8005b88 <_printf_common>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d14c      	bne.n	8005e62 <_printf_i+0x1fe>
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	b004      	add	sp, #16
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	4835      	ldr	r0, [pc, #212]	; (8005ea8 <_printf_i+0x244>)
 8005dd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd8:	6829      	ldr	r1, [r5, #0]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005de0:	6029      	str	r1, [r5, #0]
 8005de2:	061d      	lsls	r5, r3, #24
 8005de4:	d514      	bpl.n	8005e10 <_printf_i+0x1ac>
 8005de6:	07df      	lsls	r7, r3, #31
 8005de8:	bf44      	itt	mi
 8005dea:	f043 0320 	orrmi.w	r3, r3, #32
 8005dee:	6023      	strmi	r3, [r4, #0]
 8005df0:	b91e      	cbnz	r6, 8005dfa <_printf_i+0x196>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f023 0320 	bic.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	e7b0      	b.n	8005d60 <_printf_i+0xfc>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2378      	movs	r3, #120	; 0x78
 8005e08:	4828      	ldr	r0, [pc, #160]	; (8005eac <_printf_i+0x248>)
 8005e0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e0e:	e7e3      	b.n	8005dd8 <_printf_i+0x174>
 8005e10:	0659      	lsls	r1, r3, #25
 8005e12:	bf48      	it	mi
 8005e14:	b2b6      	uxthmi	r6, r6
 8005e16:	e7e6      	b.n	8005de6 <_printf_i+0x182>
 8005e18:	4615      	mov	r5, r2
 8005e1a:	e7bb      	b.n	8005d94 <_printf_i+0x130>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	6826      	ldr	r6, [r4, #0]
 8005e20:	6961      	ldr	r1, [r4, #20]
 8005e22:	1d18      	adds	r0, r3, #4
 8005e24:	6028      	str	r0, [r5, #0]
 8005e26:	0635      	lsls	r5, r6, #24
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	d501      	bpl.n	8005e30 <_printf_i+0x1cc>
 8005e2c:	6019      	str	r1, [r3, #0]
 8005e2e:	e002      	b.n	8005e36 <_printf_i+0x1d2>
 8005e30:	0670      	lsls	r0, r6, #25
 8005e32:	d5fb      	bpl.n	8005e2c <_printf_i+0x1c8>
 8005e34:	8019      	strh	r1, [r3, #0]
 8005e36:	2300      	movs	r3, #0
 8005e38:	6123      	str	r3, [r4, #16]
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	e7ba      	b.n	8005db4 <_printf_i+0x150>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	1d1a      	adds	r2, r3, #4
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	681d      	ldr	r5, [r3, #0]
 8005e46:	6862      	ldr	r2, [r4, #4]
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7fa f9c8 	bl	80001e0 <memchr>
 8005e50:	b108      	cbz	r0, 8005e56 <_printf_i+0x1f2>
 8005e52:	1b40      	subs	r0, r0, r5
 8005e54:	6060      	str	r0, [r4, #4]
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e60:	e7a8      	b.n	8005db4 <_printf_i+0x150>
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	462a      	mov	r2, r5
 8005e66:	4649      	mov	r1, r9
 8005e68:	4640      	mov	r0, r8
 8005e6a:	47d0      	blx	sl
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d0ab      	beq.n	8005dc8 <_printf_i+0x164>
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	079b      	lsls	r3, r3, #30
 8005e74:	d413      	bmi.n	8005e9e <_printf_i+0x23a>
 8005e76:	68e0      	ldr	r0, [r4, #12]
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	bfb8      	it	lt
 8005e7e:	4618      	movlt	r0, r3
 8005e80:	e7a4      	b.n	8005dcc <_printf_i+0x168>
 8005e82:	2301      	movs	r3, #1
 8005e84:	4632      	mov	r2, r6
 8005e86:	4649      	mov	r1, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	47d0      	blx	sl
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d09b      	beq.n	8005dc8 <_printf_i+0x164>
 8005e90:	3501      	adds	r5, #1
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	9903      	ldr	r1, [sp, #12]
 8005e96:	1a5b      	subs	r3, r3, r1
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dcf2      	bgt.n	8005e82 <_printf_i+0x21e>
 8005e9c:	e7eb      	b.n	8005e76 <_printf_i+0x212>
 8005e9e:	2500      	movs	r5, #0
 8005ea0:	f104 0619 	add.w	r6, r4, #25
 8005ea4:	e7f5      	b.n	8005e92 <_printf_i+0x22e>
 8005ea6:	bf00      	nop
 8005ea8:	08006209 	.word	0x08006209
 8005eac:	0800621a 	.word	0x0800621a

08005eb0 <_sbrk_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_sbrk_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fa ffb6 	bl	8000e2c <_sbrk>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_sbrk_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_sbrk_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200016a4 	.word	0x200016a4

08005ed0 <__sread>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	f000 f8a0 	bl	800601c <_read_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	bfab      	itete	ge
 8005ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee4:	181b      	addge	r3, r3, r0
 8005ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eea:	bfac      	ite	ge
 8005eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8005eee:	81a3      	strhlt	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__swrite>:
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	898b      	ldrh	r3, [r1, #12]
 8005efa:	05db      	lsls	r3, r3, #23
 8005efc:	4605      	mov	r5, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4616      	mov	r6, r2
 8005f02:	d505      	bpl.n	8005f10 <__swrite+0x1e>
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f000 f868 	bl	8005fe0 <_lseek_r>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	f000 b817 	b.w	8005f58 <_write_r>

08005f2a <__sseek>:
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f32:	f000 f855 	bl	8005fe0 <_lseek_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	bf15      	itete	ne
 8005f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f46:	81a3      	strheq	r3, [r4, #12]
 8005f48:	bf18      	it	ne
 8005f4a:	81a3      	strhne	r3, [r4, #12]
 8005f4c:	bd10      	pop	{r4, pc}

08005f4e <__sclose>:
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 b813 	b.w	8005f7c <_close_r>
	...

08005f58 <_write_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	; (8005f78 <_write_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fa ff46 	bl	8000df8 <_write>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_write_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_write_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	200016a4 	.word	0x200016a4

08005f7c <_close_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d06      	ldr	r5, [pc, #24]	; (8005f98 <_close_r+0x1c>)
 8005f80:	2300      	movs	r3, #0
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	602b      	str	r3, [r5, #0]
 8005f88:	f7fa ff44 	bl	8000e14 <_close>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_close_r+0x1a>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_close_r+0x1a>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	200016a4 	.word	0x200016a4

08005f9c <_fstat_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	; (8005fbc <_fstat_r+0x20>)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	f7fa ff36 	bl	8000e1a <_fstat>
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	d102      	bne.n	8005fb8 <_fstat_r+0x1c>
 8005fb2:	682b      	ldr	r3, [r5, #0]
 8005fb4:	b103      	cbz	r3, 8005fb8 <_fstat_r+0x1c>
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
 8005fba:	bf00      	nop
 8005fbc:	200016a4 	.word	0x200016a4

08005fc0 <_isatty_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_isatty_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fa ff2a 	bl	8000e24 <_isatty>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_isatty_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_isatty_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200016a4 	.word	0x200016a4

08005fe0 <_lseek_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	; (8006000 <_lseek_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fa ff1a 	bl	8000e28 <_lseek>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_lseek_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_lseek_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	200016a4 	.word	0x200016a4

08006004 <__malloc_lock>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__malloc_lock+0x8>)
 8006006:	f7ff bb1d 	b.w	8005644 <__retarget_lock_acquire_recursive>
 800600a:	bf00      	nop
 800600c:	20001698 	.word	0x20001698

08006010 <__malloc_unlock>:
 8006010:	4801      	ldr	r0, [pc, #4]	; (8006018 <__malloc_unlock+0x8>)
 8006012:	f7ff bb18 	b.w	8005646 <__retarget_lock_release_recursive>
 8006016:	bf00      	nop
 8006018:	20001698 	.word	0x20001698

0800601c <_read_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_read_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fa fed4 	bl	8000dd8 <_read>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_read_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_read_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	200016a4 	.word	0x200016a4

08006040 <_init>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	bf00      	nop
 8006044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006046:	bc08      	pop	{r3}
 8006048:	469e      	mov	lr, r3
 800604a:	4770      	bx	lr

0800604c <_fini>:
 800604c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604e:	bf00      	nop
 8006050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006052:	bc08      	pop	{r3}
 8006054:	469e      	mov	lr, r3
 8006056:	4770      	bx	lr
